import raylib as rl
import raylib.utils
import libs.numbers as num
import libs.perlin
import libs.random


class State:
    width: f64
    height: f64
    angle: f64
    frame_count: u64
    blue: rl.Color
    green: rl.Color
    color3: rl.Color


def branch(x: f64, y: f64, length: f64, angle: f64, s: State) -> None:
    if length < 4.0:
        leaf_width: f64 = random.random_between(1.0, 3.0)
        leaf_height: f64 = random.random_between(3.0, 6.0)
        lerped_green: rl.Color = utils.lerp_color(s.green, s.blue, utils.remap(x, 0.0, s.width, 0.0, 1.0) * 2.0)
        color: rl.Color = utils.lerp_color(lerped_green, s.color3, utils.remap(y, 0.0, s.height, 0.0, 1.0) * 1.5)
        rl.draw_ellipse(num.d2i(x), num.d2i(y), leaf_height, leaf_width, color)
        return
    wind: f64 = utils.sin_deg(perlin.noise1d(num.uu2d(s.frame_count) / 50.0)) * 100.0 * utils.sin_deg(num.uu2d(s.frame_count) / 2.0)
    next_y: f64 = y - length * utils.cos_deg(angle)
    next_x: f64 = x + length * utils.sin_deg(angle)
    thick: f64 = utils.remap(length, 0.0, s.height / 4.0, 2.0, 6.0)
    rl.draw_line_ex(rl.vector2(x, y),
                    rl.vector2(next_x, next_y),
                    thick,
                    rl.color(152, 50, 1, 255))
    r1: f64 = random.random_between(0.3, 0.9)
    r2: f64 = random.random_between(0.5, 0.8)
    branch(next_x, next_y, (length * r2), angle + s.angle + wind * 10.0, s)
    branch(next_x, next_y, (length * r1), angle - s.angle + wind * 10.0, s)


def update_draw_frame(s: State) -> None:
    rl.clear_background(rl.color(255, 255, 255, 255))
    branch(s.width / 2.0, s.height, s.height / 4.0, 0.0, s)


def main() -> int:
    s: State = State()
    s.angle = random.random_between(30.0, 45.0)
    s.width = 600.0
    s.height = 600.0
    s.frame_count = num.i2uu(0)
    s.blue = rl.color(0, 255, 214, 255)
    s.green = rl.color(0, 255, 0, 255)
    s.color3 = rl.color(255, 45, 156, 255)
    rl.init_window(num.d2i(s.width), num.d2i(s.height), "Fractal Tree in the Wind")
    rl.set_target_fps(120)
    seed: u64 = random.init_random()
    while not rl.window_should_close():
        rl.begin_drawing()
        update_draw_frame(s)
        rl.draw_fps(0, 0)
        rl.end_drawing()
        s.frame_count = s.frame_count + num.i2uu(1)
        random.set_seed(seed)
    rl.close_window()
    del s
    return 0
