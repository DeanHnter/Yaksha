runtimefeature "raylib"

import raylib as rl

macros!{
    (defun hex_color (rgb)
       # rgb is in format "#RRGGBB", break it down to r, g, b variables.
       # Example: a: rl.Color = utils.hex_color!{"#aabbcc"}
        (= tmp (explode_string rgb::value))
        (= r (+ "0x" (index tmp 1) (index tmp 2)))
        (= g (+ "0x" (index tmp 3) (index tmp 4)))
        (= b (+ "0x" (index tmp 5) (index tmp 6)))
        # CODE: { rl.color ( r , g , b , a ) }
        (list (yk_create_token YK_TOKEN_NAME "rl") (ykt_dot) (yk_create_token YK_TOKEN_NAME "color")
            (ykt_paren_open)
            (yk_create_token YK_TOKEN_INTEGER_HEX r) (ykt_comma)
            (yk_create_token YK_TOKEN_INTEGER_HEX g) (ykt_comma)
            (yk_create_token YK_TOKEN_INTEGER_HEX b) (ykt_comma)
            (ykt_integer_decimal 255) (ykt_paren_close)))
    (yk_register {dsl hex_color hex_color})
}

def remap(x: float, a: float, b: float, c: float, d: float) -> float:
    # Map x to be from 'a to b' range to 'c to d' range
    if a == b:
        return 0.0f
    return (x - a) / (b - a) * (d - c) + c

@nativemacro
def pi() -> float:
    # Get approximate PI value
    ccode """PI"""

@nativemacro
def torad(degrees: float) -> float:
    ccode """nn__degrees * DEG2RAD"""

@nativemacro
def todeg(radians: float) -> float:
    ccode """nn__radians * RAD2DEG"""

@nativemacro
def sin_deg(x: float) -> float:
    ccode """sin(nn__x * DEG2RAD)"""

@nativemacro
def cos_deg(x: float) -> float:
    ccode """cos(nn__x * DEG2RAD)"""

@nativemacro
def tan_deg(x: float) -> float:
    ccode """tan(nn__x * DEG2RAD)"""

@native
def lerp_color(a: rl.Color, b: rl.Color, fraction: float) -> rl.Color:
    ccode """float x = nn__fraction;
    if (x > 1.0f) {
        x = 1.0f;
    }
    if (x < 0.0f) {
        x = 0.0f;
    }
    float r = (nn__b.r - nn__a.r) * x + (nn__a.r);
    float g = (nn__b.g - nn__a.g) * x + (nn__a.g);
    float b = (nn__b.b - nn__a.b) * x + (nn__a.b);
    float a = (nn__b.a - nn__a.a) * x + (nn__a.a);
    return (Color){(unsigned char)r, (unsigned char)g, (unsigned char)b, (unsigned char)a}
    """

@native
def clear() -> None:
    # Clear background with RAYWHITE colour
    ccode """ClearBackground(RAYWHITE)"""

@nativedefine("void*")
class Data:
    # Arbitary data (void*)
    pass

@nativedefine("yk__rungameloop")
def run_game_loop(fps: int, data: Data) -> int:
    # Run def game_step(d: utils.Data) in a loop
    # Warning! this assumes you have def game_step(d: utils.Data) present in code
    # Warning! game_step def must be present in same file as main()
    # See wind_tree_gs.yaka for a sample of how to use this.
    # Use only if you run into slowness with standard while loop
    pass

@native
def is_web() -> bool:
    # Are we running in raylib WASM/Web?
    ccode """bool result = false;
    #if defined(PLATFORM_WEB)
    result = true;
    #endif
    return result"""

@native
def is_desktop() -> bool:
    # Are we running in raylib in desktop?
    ccode """bool result = false;
    #if defined(PLATFORM_DESKOP)
    result = true;
    #endif
    return result"""

@native
def is_hot_reload() -> bool:
    # Are we running in raylib with hot reload?
    ccode """bool result = false;
    #if defined(YK__CR_DLL)
    result = true;
    #endif
    return result"""
