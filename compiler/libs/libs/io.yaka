import libs.c
import libs.numbers as num

PROT_NONE: Const[int] = ccode "PROT_NONE"
PROT_READ: Const[int] = ccode "PROT_READ"
PROT_WRITE: Const[int] = ccode "PROT_WRITE"
PROT_EXEC: Const[int] = ccode "PROT_EXEC"

MAP_FILE: Const[int] = ccode "MAP_FILE"
MAP_SHARED: Const[int] = ccode "MAP_SHARED"
MAP_PRIVATE: Const[int] = ccode "MAP_PRIVATE"
MAP_TYPE: Const[int] = ccode "MAP_TYPE"
MAP_FIXED: Const[int] = ccode "MAP_FIXED"
MAP_ANONYMOUS: Const[int] = ccode "MAP_ANONYMOUS"
MAP_ANON: Const[int] = ccode "MAP_ANON"
MAP_FAILED: Const[int] = ccode "MAP_FAILED"

MS_ASYNC: Const[int] = ccode "MS_ASYNC"
MS_SYNC: Const[int] = ccode "MS_SYNC"
MS_INVALIDATE: Const[int] = ccode "MS_INVALIDATE"

O_RDONLY: Const[int] = ccode "YK__IO_O_RDONLY"
O_WRONLY: Const[int] = ccode "YK__IO_O_WRONLY"
O_RDWR: Const[int] = ccode "YK__IO_O_RDWR"
O_CREAT: Const[int] = ccode "YK__IO_O_CREAT"
O_EXCL: Const[int] = ccode "YK__IO_O_EXCL"
O_APPEND: Const[int] = ccode "YK__IO_O_APPEND"
O_ASYNC: Const[int] = ccode "YK__IO_O_ASYNC"
O_CLOEXEC: Const[int] = ccode "YK__IO_O_CLOEXEC"
O_NONBLOCK: Const[int] = ccode "YK__IO_O_NONBLOCK"
O_TMPFILE: Const[int] = ccode "YK__IO_O_TMPFILE"


@nativedefine("FILE")
class File:
    pass

@nativedefine("fpos_t")
class FilePos:
    pass

@nativemacro("stdin")
def stdin() -> Ptr[File]:
    pass

@nativemacro("stdout")
def stdout() -> Ptr[File]:
    pass

@nativemacro("stderr")
def stderr() -> Ptr[File]:
    pass

@nativemacro("(nn__stream != NULL)")
def valid(stream: Ptr[File]) -> bool:
    # Did we succesfully opened a file?
    pass

@nativedefine("yk__io_fopen")
def fopen(fname: sr, mode: sr) -> Ptr[File]:
    # Open a file
    pass

@nativedefine("yk__io_fclose")
def fclose(stream: Ptr[File]) -> bool:
    # Close a file using given FILE*
    pass

@nativedefine("yk__io_fflush")
def fflush(stream: Ptr[File]) -> bool:
    pass

def fflush_all() -> bool:
    return fflush(cast("Ptr[File]", None))

@nativedefine("yk__io_fread")
def fread(buffer: AnyPtr, size: c.Size, count: c.Size, stream: Ptr[File]) -> c.Size:
    pass

@nativedefine("yk__io_fwrite")
def fwrite(buffer: AnyPtr, size: c.Size, count: c.Size, stream: Ptr[File]) -> c.Size:
    pass

@nativedefine("yk__io_ftell")
def ftell(stream: Ptr[File]) -> i64:
    pass

@nativemacro("(yk__io_fseek(nn__stream, nn__offset, SEEK_SET))")
def fseek_begin(stream: Ptr[File], offset: i64) -> bool:
    # Seek from begining
    pass

@nativemacro("(yk__io_fseek(nn__stream, nn__offset, SEEK_CUR))")
def fseek_relative(stream: Ptr[File], offset: i64) -> bool:
    # Seem from current location
    pass

@nativemacro("(yk__io_fseek(nn__stream, nn__offset, SEEK_END))")
def fseek_end(stream: Ptr[File], offset: i64) -> bool:
    # Seek from end
    pass

@nativedefine("yk__io_feof")
def is_eof(stream: Ptr[File]) -> bool:
    # Is end of file?
    pass

@nativedefine("yk__io_ferror")
def has_error(stream: Ptr[File]) -> bool:
    # Has error?
    pass

@nativedefine("yk__io_clearerr")
def clear_error(stream: Ptr[File]) -> None:
    # Clear eof and error
    pass

@nativedefine("yk__io_rewind")
def rewind(stream: Ptr[File]) -> None:
    # Set the position as begining of file
    pass

@nativedefine("mmap")
def mmap(address: AnyPtr, length: c.Size, protection: int, flags: int, file_descriptor: c.CInt, offset: i64) -> AnyPtr:
    pass

@nativedefine("munmap")
def munmap(address: AnyPtr, length: c.Size) -> int:
    pass

@nativedefine("mprotect")
def mprotect(address: AnyPtr, length: c.Size, protection: int) -> int:
    pass

@nativedefine("msync")
def msync(address: AnyPtr, length: c.Size, flags: int) -> int:
    pass

@nativedefine("mlock")
def mlock(address: AnyPtr, length: c.Size) -> int:
    pass

@nativedefine("munlock")
def munlock(address: AnyPtr, length: c.Size) -> int:
    pass

@native("yk__io_readfile")
def readfile(fname: sr) -> str:
    # Read a file to as string, on error returns empty
    pass

@native("yk__io_writefile")
def writefile(fname: sr, data: sr) -> bool:
    # Write a file
    pass

@nativedefine("yk__io_open")
def open(path: sr, mode: int) -> c.CInt:
    pass

@nativedefine("yk__io_close")
def close(file: c.CInt) -> bool:
    pass

# --------------------------------------------------------------------------------------------------
# Reading / Writing utilities
# --------------------------------------------------------------------------------------------------

def file_write_u8(file: Ptr[File], value: u8) -> bool:
    buffer = cast("AnyPtr", getref(value))
    size = cast("c.Size", 1)
    count = cast("c.Size", 1)
    return fwrite(buffer, size, count, file) == count

def file_write_i8(file: Ptr[File], value: i8) -> bool:
    return file_write_u8(file, cast("u8", value))

def file_write_u16be(file: Ptr[File], value: u16) -> bool:
    big_endian_int = num.to_be16(value)
    buffer = cast("AnyPtr", getref(big_endian_int))
    size = cast("c.Size", 2)
    count = cast("c.Size", 1)
    return fwrite(buffer, size, count, file) == count

def file_write_i16be(file: Ptr[File], value: i16) -> bool:
    return file_write_u16be(file, cast("u16", value))

def file_write_u16le(file: Ptr[File], value: u16) -> bool:
    little_endian_int = num.to_le16(value)
    buffer = cast("AnyPtr", getref(little_endian_int))
    size = cast("c.Size", 2)
    count = cast("c.Size", 1)
    return fwrite(buffer, size, count, file) == count

def file_write_i16le(file: Ptr[File], value: i16) -> bool:
    return file_write_u16le(file, cast("u16", value))

def file_write_u32be(file: Ptr[File], value: u32) -> bool:
    big_endian_int = num.to_be32(value)
    buffer = cast("AnyPtr", getref(big_endian_int))
    size = cast("c.Size", 4)
    count = cast("c.Size", 1)
    return fwrite(buffer, size, count, file) == count

def file_write_i32be(file: Ptr[File], value: i32) -> bool:
    return file_write_u32be(file, cast("u32", value))

def file_write_u32le(file: Ptr[File], value: u32) -> bool:
    little_endian_int = num.to_le32(value)
    buffer = cast("AnyPtr", getref(little_endian_int))
    size = cast("c.Size", 4)
    count = cast("c.Size", 1)
    return fwrite(buffer, size, count, file) == count

def file_write_i32le(file: Ptr[File], value: i32) -> bool:
    return file_write_u32le(file, cast("u32", value))

def file_write_u64be(file: Ptr[File], value: u64) -> bool:
    big_endian_int = num.to_be64(value)
    buffer = cast("AnyPtr", getref(big_endian_int))
    size = cast("c.Size", 8)
    count = cast("c.Size", 1)
    return fwrite(buffer, size, count, file) == count

def file_write_i64be(file: Ptr[File], value: i64) -> bool:
    return file_write_u64be(file, cast("u64", value))

def file_write_u64le(file: Ptr[File], value: u64) -> bool:
    little_endian_int = num.to_le64(value)
    buffer = cast("AnyPtr", getref(little_endian_int))
    size = cast("c.Size", 8)
    count = cast("c.Size", 1)
    return fwrite(buffer, size, count, file) == count

def file_write_i64le(file: Ptr[File], value: i64) -> bool:
    return file_write_u64le(file, cast("u64", value))

# Reading from file

def file_read_u8(file: Ptr[File]) -> Tuple[u8, bool]:
    val: u8 = 0u8
    buffer = cast("AnyPtr", getref(val))
    size = cast("c.Size", 1)
    count = cast("c.Size", 1)
    success: bool = fread(buffer, size, count, file) == count
    result: Tuple[u8, bool]
    result[0] = val
    result[1] = success
    return result

def file_read_i8(file: Ptr[File]) -> Tuple[i8, bool]:
    u8_result = file_read_u8(file)
    result: Tuple[i8, bool]
    result[0] = cast("i8", u8_result[0])
    result[1] = u8_result[1]
    return result

def file_read_u16be(file: Ptr[File]) -> Tuple[u16, bool]:
    val: u16 = 0u16
    buffer = cast("AnyPtr", getref(val))
    size = cast("c.Size", 2)
    count = cast("c.Size", 1)
    success: bool = fread(buffer, size, count, file) == count
    result: Tuple[u16, bool]
    result[0] = num.from_be16(val)
    result[1] = success
    return result

def file_read_i16be(file: Ptr[File]) -> Tuple[i16, bool]:
    u16_result = file_read_u16be(file)
    result: Tuple[i16, bool]
    result[0] = cast("i16", u16_result[0])
    result[1] = u16_result[1]
    return result

def file_read_u16le(file: Ptr[File]) -> Tuple[u16, bool]:
    val: u16 = 0u16
    buffer = cast("AnyPtr", getref(val))
    size = cast("c.Size", 2)
    count = cast("c.Size", 1)
    success: bool = fread(buffer, size, count, file) == count
    result: Tuple[u16, bool]
    result[0] = num.from_le16(val)
    result[1] = success
    return result

def file_read_i16le(file: Ptr[File]) -> Tuple[i16, bool]:
    u16_result = file_read_u16le(file)
    result: Tuple[i16, bool]
    result[0] = cast("i16", u16_result[0])
    result[1] = u16_result[1]
    return result

def file_read_u32be(file: Ptr[File]) -> Tuple[u32, bool]:
    val: u32 = 0u32
    buffer = cast("AnyPtr", getref(val))
    size = cast("c.Size", 4)
    count = cast("c.Size", 1)
    success: bool = fread(buffer, size, count, file) == count
    result: Tuple[u32, bool]
    result[0] = num.from_be32(val)
    result[1] = success
    return result

def file_read_i32be(file: Ptr[File]) -> Tuple[i32, bool]:
    u32_result = file_read_u32be(file)
    result: Tuple[i32, bool]
    result[0] = cast("i32", u32_result[0])
    result[1] = u32_result[1]
    return result

def file_read_u32le(file: Ptr[File]) -> Tuple[u32, bool]:
    val: u32 = 0u32
    buffer = cast("AnyPtr", getref(val))
    size = cast("c.Size", 4)
    count = cast("c.Size", 1)
    success: bool = fread(buffer, size, count, file) == count
    result: Tuple[u32, bool]
    result[0] = num.from_le32(val)
    result[1] = success
    return result

def file_read_i32le(file: Ptr[File]) -> Tuple[i32, bool]:
    u32_result = file_read_u32le(file)
    result: Tuple[i32, bool]
    result[0] = cast("i32", u32_result[0])
    result[1] = u32_result[1]
    return result

def file_read_u64be(file: Ptr[File]) -> Tuple[u64, bool]:
    val: u64 = 0u64
    buffer = cast("AnyPtr", getref(val))
    size = cast("c.Size", 8)
    count = cast("c.Size", 1)
    success: bool = fread(buffer, size, count, file) == count
    result: Tuple[u64, bool]
    result[0] = num.from_be64(val)
    result[1] = success
    return result

def file_read_i64be(file: Ptr[File]) -> Tuple[i64, bool]:
    u64_result = file_read_u64be(file)
    result: Tuple[i64, bool]
    result[0] = cast("i64", u64_result[0])
    result[1] = u64_result[1]
    return result

def file_read_u64le(file: Ptr[File]) -> Tuple[u64, bool]:
    val: u64 = 0u64
    buffer = cast("AnyPtr", getref(val))
    size = cast("c.Size", 8)
    count = cast("c.Size", 1)
    success: bool = fread(buffer, size, count, file) == count
    result: Tuple[u64, bool]
    result[0] = num.from_le64(val)
    result[1] = success
    return result

def file_read_i64le(file: Ptr[File]) -> Tuple[i64, bool]:
    u64_result = file_read_u64le(file)
    result: Tuple[i64, bool]
    result[0] = cast("i64", u64_result[0])
    result[1] = u64_result[1]
    return result
