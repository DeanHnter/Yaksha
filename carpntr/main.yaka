import libs
import libs.os
import libs.os.path
import libs.fileformats.toml
import libs.io
import libs.c
import libs.console
import libs.strings
import libs.strings.array as sarr
import configuration as carp
import building

def print_banner() -> None:
    # This just print a banner
    # ASCII art for hammer from https://ascii.co.uk/art/hammer -> author jgs
    art: str = """
    ╔═╗┌─┐┬─┐╔═╗┌┐┌┌┬┐┬─┐
    ║  ├─┤├┬┘╠═╝│││ │ ├┬┘
    ╚═╝┴ ┴┴└─╩  ┘└┘ ┴ ┴└─
    """
    text: str = """
    Tool for building Yaksha 
    Projects
    """

    art2: str = """
       ,
      /(  ___________
     |  >:===========`
      )(
      \"\"\n"""
    console.green(art)
    console.cyan(text)
    console.yellow(art2)

def print_errors(er: Array[str]) -> None:
    length: int = len(er)
    x: int = 0
    while x < length:
        console.red(er[x] + "\n")
        x = x + 1

def printkv(k: str, v: str) -> None:
    console.cyan(k)
    console.red(" := ")
    console.green(v)
    print("\n")

def print_config(config: carp.Config) -> None:
    printkv("libs", config.libs_path)
    printkv("runtime", config.runtime_path)
    printkv("compiler", config.compiler_path)
    printkv("zig compiler", config.zig_compiler_path)
    printkv("standard library version", libs.version())

def build_from_config(config: carp.Config, simple: bool) -> int:
    return_val: int = 0
    yk_args: Array[str] = sarr.new(3, config.compiler_path, config.project.main, config.libs_path)
    result: os.ProcessResult = os.run(yk_args)

    defer sarr.del_str_array(yk_args)
    defer os.del_process_result(result)

    if not result.ok:
        console.cyan("---- running Yaksha compiler ---\n")
        console.red("Failed to execute: ")
        console.yellow(sarr.join(yk_args, " "))
        print("\n")
        console.red(result.output)
        print("\n")
        return_val = -1
        console.cyan("---- end of compiler run ---\n")
    else:
        if strings.startswith(result.output, "// YK"):
            if simple:
                return_val = building.build_simple(config, result.output)
            else:
                return_val = building.build(config, result.output)
        else:
            console.cyan("---- running Yaksha compiler ---\n")
            console.red(result.output)
            print("\n")
            return_val = -1
            console.cyan("---- end of compiler run ---\n")

    return return_val

def perform_build() -> int:
    config: carp.Config = carp.load_config()
    defer carp.del_config(config)
    if len(config.errors) > 0:
        print_errors(config.errors)
        return -1
    print_config(config)
    ret: int = build_from_config(config, False)
    return ret

def perform_run(filename: str, use_raylib: bool) -> int:
    name: str = path.remove_extension(path.basename(filename))
    config: carp.Config = carp.create_adhoc_config(name, filename, use_raylib)
    defer carp.del_config(config)
    if len(config.errors) > 0:
        print_errors(config.errors)
        return -1
    print_config(config)
    ret: int = build_from_config(config, True)
    if ret != 0:
        return ret
    console.cyan("-----------------------------")
    print("\n")
    # Try to run binary now
    binary: str = name
    if os.is_windows():
        binary = binary + ".exe"
    else:
        binary = "./" + binary
    binary_cstr: c.CStr = strings.to_cstr(binary)
    c.system(binary_cstr)
    del strings.del_str(binary_cstr)
    return 0


def usage_print(sample: str, help: str) -> None:
    console.red("Usage: ")
    console.cyan(sample)
    console.red(" -> ")
    println(help)


def main() -> int:
    args: os.arguments = os.get_args()
    print_banner()
    if args.argc <= 1:
        return perform_build()
    if args.argc == 3:
        if args.argv[1] == "run_file":
            return perform_run(args.argv[2], False)
        if args.argv[1] == "ray_file":
            return perform_run(args.argv[2], True)
    usage_print("carpntr", "Build program using 'yaksha.toml'")
    usage_print("carpntr run_file prog.yaka", "Build single file with main() prog.yaka and run it.")
    usage_print("carpntr ray_file prog.yaka", "Build single file with main() prog.yaka, linked with raylib and run it.")
    return 1
