import libs.os
import libs.os.path
import libs.fileformats.toml
import libs.io
import libs.c
import libs.clrprint
import libs.strings
import libs.strings.array as sarr
import configuration as carp
import building

def print_banner() -> None:
    # This just print a banner
    # ASCII art for hammer from https://ascii.co.uk/art/hammer -> author jgs
    art: str = """
    ╔═╗┌─┐┬─┐╔═╗┌┐┌┌┬┐┬─┐
    ║  ├─┤├┬┘╠═╝│││ │ ├┬┘
    ╚═╝┴ ┴┴└─╩  ┘└┘ ┴ ┴└─
    """
    text: str = """
    Tool for building Yaksha 
    Projects
    """

    art2: str = """
       ,
      /(  ___________
     |  >:===========`
      )(
      \"\"\n"""
    clrprint.green(art)
    clrprint.cyan(text)
    clrprint.yellow(art2)

def print_errors(er: Array[str]) -> None:
    length: int = len(er)
    x: int = 0
    while x < length:
        clrprint.red(er[x] + "\n")
        x = x + 1

def printkv(k: str, v: str) -> None:
    clrprint.cyan(k)
    clrprint.red(" := ")
    clrprint.green(v)
    print("\n")

def start_build() -> int:
    config: carp.Config = carp.load_config()
    defer carp.del_config(config)
    if len(config.errors) > 0:
        print_errors(config.errors)
        return -1
    printkv("libs", config.libs_path)
    printkv("runtime", config.runtime_path)
    printkv("compiler", config.compiler_path)
    printkv("zig compiler", config.zig_compiler_path)

    return_val: int = 0


    yk_args: Array[str] = sarr.new(3, config.compiler_path, config.project.main, config.libs_path)
    defer del yk_args
    result: os.ProcessResult = os.run(yk_args)
    defer os.del_process_result(result)

    if not result.ok:
        clrprint.cyan("---- running Yaksha compiler ---\n")
        clrprint.red("Failed to execute: " + sarr.join(yk_args, " ") + "\n")
        clrprint.red(result.output)
        print("\n")
        return_val = -1
        clrprint.cyan("---- end of compiler run ---\n")
    else:
        if strings.startswith(result.output, "// YK"):
            return_val = building.build(config, result.output)
        else:
            clrprint.cyan("---- running Yaksha compiler ---\n")
            clrprint.red(result.output)
            print("\n")
            return_val = -1
            clrprint.cyan("---- end of compiler run ---\n")

    return return_val

def main() -> int:
    defer clrprint.red("\n >--> program end <--< \n")
    print_banner()
    result: int = start_build()
    return result
