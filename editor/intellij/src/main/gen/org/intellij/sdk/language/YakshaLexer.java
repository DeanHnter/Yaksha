/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package org.intellij.sdk.language;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import org.intellij.sdk.language.psi.YakshaTokenType;
import org.intellij.sdk.language.psi.YakshaTypes;
import com.intellij.psi.TokenType;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>Yaksha.flex</tt>
 */
class YakshaLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [8, 6, 7]
   * Total runtime size is 1040 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>13]|((ch>>7)&0x3f)]|(ch&0x7f)];
  }

  /* The ZZ_CMAP_Z table has 136 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\207\100");

  /* The ZZ_CMAP_Y table has 128 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\177\200");

  /* The ZZ_CMAP_A table has 256 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\3\1\2\2\0\1\1\22\0\1\4\1\101\1\35\1\5\1\0\1\73\1\75\1\33\1\61\1\62"+
    "\1\71\1\32\1\104\1\67\1\30\1\72\1\10\1\14\1\17\1\16\1\20\1\24\1\15\1\24\1"+
    "\13\1\11\1\103\1\105\1\74\1\100\1\70\1\0\1\102\4\22\1\31\1\27\7\6\1\57\1\23"+
    "\4\6\1\56\3\6\1\21\2\6\1\63\1\34\1\64\1\77\1\7\1\0\1\36\1\25\1\43\1\47\1\41"+
    "\1\51\1\6\1\55\1\12\1\6\1\42\1\44\1\52\1\50\1\26\1\53\1\6\1\40\1\37\1\45\1"+
    "\46\1\60\1\54\1\21\2\6\1\65\1\76\1\66\1\106\201\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\2\2\2\3\1\4\1\5\2\6\4\5"+
    "\1\7\1\10\2\11\16\5\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\21"+
    "\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34"+
    "\1\35\1\36\1\3\2\4\1\6\4\0\2\6\1\0"+
    "\1\37\3\5\1\40\1\41\3\5\1\42\1\5\1\43"+
    "\6\11\1\44\22\5\1\45\1\46\1\47\1\21\1\50"+
    "\1\51\1\52\1\53\1\54\1\55\1\56\1\3\3\0"+
    "\4\6\1\0\4\5\3\11\1\57\1\37\10\5\1\60"+
    "\1\61\1\62\1\63\6\5\1\64\1\65\1\66\3\5"+
    "\4\0\3\5\1\67\1\70\7\5\1\71\1\5\1\72"+
    "\1\73\1\5\1\74\1\75\2\0\4\5\1\76\1\77"+
    "\1\5\1\100\1\5\1\101\1\102\1\103\1\104\3\5"+
    "\1\105\4\5\1\106\2\5\1\107\4\5\1\110";

  private static int [] zzUnpackAction() {
    int [] result = new int[210];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\107\0\216\0\107\0\325\0\u011c\0\u0163\0\u01aa"+
    "\0\u01f1\0\u0238\0\u027f\0\u02c6\0\u030d\0\u0354\0\u039b\0\u03e2"+
    "\0\u0429\0\u0470\0\u04b7\0\u04fe\0\u0545\0\u058c\0\u05d3\0\u061a"+
    "\0\u0661\0\u06a8\0\u06ef\0\u0736\0\u077d\0\u07c4\0\u080b\0\u0852"+
    "\0\107\0\107\0\107\0\107\0\107\0\107\0\u0899\0\u08e0"+
    "\0\u0927\0\u096e\0\u09b5\0\u09fc\0\u0a43\0\u0a8a\0\u0ad1\0\u0b18"+
    "\0\u0b18\0\107\0\107\0\107\0\107\0\107\0\u0b5f\0\u0ba6"+
    "\0\107\0\u0bed\0\u0c34\0\u0c7b\0\u0cc2\0\u0d09\0\107\0\u0d50"+
    "\0\u0d97\0\u01aa\0\u0dde\0\u0e25\0\u0e6c\0\u0eb3\0\u01aa\0\u0efa"+
    "\0\u0f41\0\u0f88\0\u01aa\0\u0fcf\0\107\0\u1016\0\u105d\0\u10a4"+
    "\0\u10eb\0\u1132\0\u1179\0\u01aa\0\u11c0\0\u1207\0\u124e\0\u1295"+
    "\0\u12dc\0\u1323\0\u136a\0\u13b1\0\u13f8\0\u143f\0\u1486\0\u14cd"+
    "\0\u1514\0\u155b\0\u15a2\0\u15e9\0\u1630\0\u1677\0\107\0\107"+
    "\0\u16be\0\107\0\107\0\107\0\107\0\u1705\0\107\0\107"+
    "\0\107\0\u174c\0\u1793\0\u17da\0\u1821\0\u1868\0\u18af\0\u18f6"+
    "\0\u193d\0\u1984\0\u19cb\0\u1a12\0\u1a59\0\u1aa0\0\107\0\u1ae7"+
    "\0\u1b2e\0\u01aa\0\u1b75\0\u1bbc\0\u1c03\0\u1c4a\0\u1c91\0\u1cd8"+
    "\0\u1d1f\0\u1d66\0\u1dad\0\u01aa\0\u1df4\0\u01aa\0\u01aa\0\u1e3b"+
    "\0\u1e82\0\u1ec9\0\u1f10\0\u1f57\0\u1f9e\0\107\0\107\0\u1fe5"+
    "\0\u202c\0\u2073\0\u20ba\0\u2101\0\u2148\0\u218f\0\u21d6\0\u221d"+
    "\0\u2264\0\u22ab\0\u01aa\0\u01aa\0\u22f2\0\u2339\0\u2380\0\u23c7"+
    "\0\u240e\0\u0eb3\0\u2455\0\u01aa\0\u249c\0\u01aa\0\u01aa\0\u24e3"+
    "\0\u01aa\0\u01aa\0\u252a\0\u2571\0\u25b8\0\u25ff\0\u2646\0\u268d"+
    "\0\u01aa\0\u01aa\0\u26d4\0\u01aa\0\u271b\0\u01aa\0\u01aa\0\u01aa"+
    "\0\u01aa\0\u2762\0\u27a9\0\u27f0\0\u01aa\0\u2837\0\u287e\0\u28c5"+
    "\0\u290c\0\u01aa\0\u2953\0\u299a\0\u01aa\0\u29e1\0\u2a28\0\u2a6f"+
    "\0\u2ab6\0\u01aa";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[210];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\2"+
    "\1\11\1\12\1\13\6\12\3\10\1\12\1\14\1\15"+
    "\1\16\1\17\1\10\1\20\1\21\1\2\1\22\1\23"+
    "\1\24\1\25\1\26\1\10\1\27\2\10\1\30\1\31"+
    "\1\32\1\33\1\34\1\35\1\36\1\10\1\37\1\40"+
    "\1\10\1\41\1\42\1\43\1\44\1\45\1\46\1\47"+
    "\1\50\1\51\1\52\1\53\1\54\1\55\1\56\1\57"+
    "\1\60\1\61\1\62\1\63\1\64\1\65\1\66\111\0"+
    "\1\4\107\0\2\5\1\7\104\0\1\5\1\67\1\7"+
    "\101\0\1\7\1\70\1\71\104\7\6\0\22\10\1\0"+
    "\1\10\4\0\23\10\36\0\2\72\1\73\6\72\1\74"+
    "\1\0\1\75\1\72\1\76\1\75\1\77\1\100\1\101"+
    "\7\0\1\101\4\0\1\73\2\0\1\77\45\0\2\12"+
    "\1\73\6\12\3\0\1\12\2\0\1\77\1\100\1\101"+
    "\7\0\1\101\4\0\1\73\2\0\1\77\43\0\5\10"+
    "\1\102\1\103\1\104\1\105\11\10\1\0\1\10\4\0"+
    "\12\10\1\106\1\107\1\110\6\10\34\0\20\10\1\111"+
    "\1\10\1\0\1\10\4\0\2\10\1\112\20\10\34\0"+
    "\22\10\1\0\1\10\4\0\2\10\1\113\20\10\34\0"+
    "\22\10\1\0\1\10\4\0\1\114\22\10\36\0\2\100"+
    "\1\0\6\100\3\0\1\100\162\0\1\115\6\0\1\116"+
    "\2\0\30\116\1\117\1\120\52\116\1\121\2\0\31\121"+
    "\1\122\1\123\51\121\6\0\22\10\1\0\1\10\4\0"+
    "\1\10\1\124\10\10\1\125\10\10\34\0\22\10\1\0"+
    "\1\10\4\0\2\10\1\102\4\10\1\126\13\10\34\0"+
    "\22\10\1\0\1\10\4\0\3\10\1\127\4\10\1\130"+
    "\12\10\34\0\22\10\1\0\1\10\4\0\6\10\1\131"+
    "\14\10\34\0\20\10\1\132\1\10\1\0\1\10\4\0"+
    "\5\10\1\133\1\134\14\10\34\0\5\10\1\102\1\103"+
    "\1\104\1\105\11\10\1\0\1\10\4\0\23\10\34\0"+
    "\4\10\1\135\15\10\1\0\1\10\4\0\3\10\1\136"+
    "\17\10\34\0\20\10\1\137\1\10\1\0\1\10\4\0"+
    "\23\10\34\0\7\10\1\104\1\105\7\10\1\140\1\10"+
    "\1\0\1\10\4\0\6\10\1\141\14\10\34\0\22\10"+
    "\1\0\1\10\4\0\1\142\22\10\34\0\22\10\1\0"+
    "\1\10\4\0\1\143\22\10\34\0\22\10\1\0\1\10"+
    "\4\0\17\10\1\144\3\10\34\0\22\10\1\0\1\10"+
    "\4\0\2\10\1\145\20\10\34\0\20\10\1\146\1\10"+
    "\1\0\1\10\4\0\23\10\116\0\1\147\7\0\1\150"+
    "\76\0\1\151\7\0\1\152\106\0\1\153\106\0\1\154"+
    "\106\0\1\155\102\0\1\156\3\0\1\152\106\0\1\157"+
    "\106\0\1\160\106\0\1\161\106\0\1\152\11\0\1\5"+
    "\1\162\1\7\103\0\1\71\114\0\2\72\1\0\6\72"+
    "\3\0\1\72\2\0\1\77\1\100\1\101\7\0\1\101"+
    "\7\0\1\77\50\0\1\77\1\163\1\164\1\165\100\0"+
    "\2\166\1\0\6\166\1\0\1\166\1\0\2\166\1\0"+
    "\1\166\1\0\1\166\4\0\1\166\2\0\1\166\1\0"+
    "\1\166\3\0\1\166\1\0\1\166\45\0\1\167\3\0"+
    "\5\167\3\0\1\167\72\0\1\170\3\0\1\170\102\0"+
    "\2\100\1\0\6\100\3\0\1\100\2\0\1\77\1\0"+
    "\1\101\7\0\1\101\7\0\1\77\45\0\2\171\1\0"+
    "\6\171\3\0\1\171\5\0\1\172\34\0\1\172\25\0"+
    "\7\10\1\102\12\10\1\0\1\10\4\0\23\10\34\0"+
    "\12\10\1\102\7\10\1\0\1\10\4\0\23\10\34\0"+
    "\11\10\1\102\10\10\1\0\1\10\4\0\23\10\34\0"+
    "\22\10\1\0\1\10\4\0\7\10\1\102\13\10\34\0"+
    "\22\10\1\0\1\10\4\0\15\10\1\173\5\10\34\0"+
    "\20\10\1\174\1\10\1\0\1\10\4\0\23\10\34\0"+
    "\22\10\1\0\1\10\4\0\3\10\1\175\17\10\34\0"+
    "\22\10\1\0\1\10\4\0\6\10\1\176\14\10\26\0"+
    "\1\116\2\0\30\116\1\177\1\120\52\116\33\0\1\200"+
    "\53\0\107\116\1\121\2\0\31\121\1\122\1\177\160\121"+
    "\35\0\1\201\57\0\22\10\1\0\1\10\4\0\11\10"+
    "\1\202\11\10\34\0\22\10\1\0\1\10\4\0\2\10"+
    "\1\203\20\10\34\0\22\10\1\0\1\10\4\0\7\10"+
    "\1\204\13\10\34\0\22\10\1\0\1\10\4\0\12\10"+
    "\1\205\10\10\34\0\4\10\1\206\15\10\1\0\1\10"+
    "\4\0\1\10\1\207\21\10\34\0\22\10\1\0\1\10"+
    "\4\0\12\10\1\210\10\10\34\0\20\10\1\211\1\10"+
    "\1\0\1\10\4\0\23\10\34\0\22\10\1\0\1\10"+
    "\4\0\1\212\22\10\34\0\22\10\1\0\1\10\4\0"+
    "\2\10\1\213\20\10\34\0\22\10\1\0\1\10\4\0"+
    "\6\10\1\214\4\10\1\215\7\10\34\0\22\10\1\0"+
    "\1\10\4\0\7\10\1\216\13\10\34\0\22\10\1\0"+
    "\1\10\4\0\2\10\1\217\20\10\34\0\20\10\1\220"+
    "\1\10\1\0\1\10\4\0\23\10\34\0\22\10\1\0"+
    "\1\10\4\0\5\10\1\221\15\10\34\0\22\10\1\0"+
    "\1\10\4\0\1\10\1\222\21\10\34\0\4\10\1\223"+
    "\15\10\1\0\1\10\4\0\23\10\34\0\22\10\1\0"+
    "\1\10\4\0\10\10\1\224\12\10\34\0\22\10\1\0"+
    "\1\10\4\0\12\10\1\225\10\10\126\0\1\226\106\0"+
    "\1\227\11\0\1\5\1\230\1\7\116\0\1\77\111\0"+
    "\1\77\105\0\1\77\77\0\2\166\1\73\6\166\1\0"+
    "\1\166\1\0\2\166\1\0\1\166\1\0\1\166\4\0"+
    "\1\166\2\0\1\166\1\0\1\166\2\0\1\73\1\166"+
    "\1\0\1\166\45\0\1\167\1\0\1\73\1\0\5\167"+
    "\3\0\1\167\21\0\1\73\50\0\1\170\1\0\1\73"+
    "\1\0\1\170\31\0\1\73\50\0\2\171\1\0\6\171"+
    "\3\0\1\171\2\0\1\77\21\0\1\77\45\0\2\171"+
    "\1\0\6\171\3\0\1\171\70\0\20\10\1\231\1\10"+
    "\1\0\1\10\4\0\23\10\34\0\22\10\1\0\1\10"+
    "\4\0\6\10\1\102\14\10\34\0\22\10\1\0\1\10"+
    "\4\0\1\232\22\10\34\0\22\10\1\0\1\10\4\0"+
    "\1\10\1\233\21\10\26\0\33\200\1\234\1\235\52\200"+
    "\34\201\1\236\1\237\51\201\6\0\22\10\1\0\1\10"+
    "\4\0\10\10\1\240\12\10\34\0\22\10\1\0\1\10"+
    "\4\0\10\10\1\241\12\10\34\0\22\10\1\0\1\10"+
    "\4\0\7\10\1\242\13\10\34\0\22\10\1\0\1\10"+
    "\4\0\13\10\1\243\7\10\34\0\22\10\1\0\1\10"+
    "\4\0\3\10\1\244\17\10\34\0\22\10\1\0\1\10"+
    "\4\0\7\10\1\245\13\10\34\0\22\10\1\0\1\10"+
    "\4\0\11\10\1\246\11\10\34\0\22\10\1\0\1\10"+
    "\4\0\1\10\1\247\21\10\34\0\22\10\1\0\1\10"+
    "\4\0\3\10\1\250\17\10\34\0\22\10\1\0\1\10"+
    "\4\0\3\10\1\251\17\10\34\0\22\10\1\0\1\10"+
    "\4\0\1\252\22\10\34\0\22\10\1\0\1\10\4\0"+
    "\2\10\1\253\20\10\34\0\22\10\1\0\1\10\4\0"+
    "\1\10\1\254\21\10\34\0\22\10\1\0\1\10\4\0"+
    "\6\10\1\255\14\10\34\0\22\10\1\0\1\10\4\0"+
    "\3\10\1\256\17\10\34\0\22\10\1\0\1\10\4\0"+
    "\3\10\1\257\17\10\31\0\1\5\1\6\1\7\107\0"+
    "\22\10\1\0\1\10\4\0\2\10\1\260\20\10\34\0"+
    "\22\10\1\0\1\10\4\0\4\10\1\261\16\10\34\0"+
    "\22\10\1\0\1\10\4\0\3\10\1\262\17\10\26\0"+
    "\33\200\1\263\1\235\161\200\143\201\1\236\1\264\51\201"+
    "\6\0\22\10\1\0\1\10\4\0\5\10\1\265\15\10"+
    "\34\0\22\10\1\0\1\10\4\0\2\10\1\266\20\10"+
    "\34\0\4\10\1\267\15\10\1\0\1\10\4\0\23\10"+
    "\34\0\4\10\1\270\15\10\1\0\1\10\4\0\23\10"+
    "\34\0\22\10\1\0\1\10\4\0\3\10\1\271\17\10"+
    "\34\0\22\10\1\0\1\10\4\0\1\10\1\272\21\10"+
    "\34\0\22\10\1\0\1\10\4\0\5\10\1\273\15\10"+
    "\34\0\22\10\1\0\1\10\4\0\2\10\1\274\20\10"+
    "\34\0\20\10\1\275\1\10\1\0\1\10\4\0\23\10"+
    "\34\0\22\10\1\0\1\10\4\0\3\10\1\276\17\10"+
    "\34\0\22\10\1\0\1\10\4\0\7\10\1\277\13\10"+
    "\26\0\33\200\1\177\1\235\52\200\34\201\1\236\1\177"+
    "\51\201\6\0\22\10\1\0\1\10\4\0\7\10\1\300"+
    "\13\10\34\0\22\10\1\0\1\10\4\0\12\10\1\301"+
    "\10\10\34\0\22\10\1\0\1\10\4\0\14\10\1\302"+
    "\6\10\34\0\22\10\1\0\1\10\4\0\12\10\1\303"+
    "\10\10\34\0\22\10\1\0\1\10\4\0\7\10\1\304"+
    "\13\10\34\0\22\10\1\0\1\10\4\0\1\10\1\305"+
    "\21\10\34\0\22\10\1\0\1\10\4\0\3\10\1\306"+
    "\17\10\34\0\22\10\1\0\1\10\4\0\10\10\1\307"+
    "\12\10\34\0\4\10\1\310\15\10\1\0\1\10\4\0"+
    "\23\10\34\0\22\10\1\0\1\10\4\0\13\10\1\311"+
    "\7\10\34\0\22\10\1\0\1\10\4\0\3\10\1\312"+
    "\17\10\34\0\22\10\1\0\1\10\4\0\22\10\1\313"+
    "\34\0\22\10\1\0\1\10\4\0\3\10\1\314\17\10"+
    "\34\0\22\10\1\0\1\10\4\0\3\10\1\315\17\10"+
    "\34\0\22\10\1\0\1\10\4\0\1\316\22\10\34\0"+
    "\22\10\1\0\1\10\4\0\7\10\1\317\13\10\34\0"+
    "\22\10\1\0\1\10\4\0\10\10\1\320\12\10\34\0"+
    "\22\10\1\0\1\10\4\0\2\10\1\321\20\10\34\0"+
    "\22\10\1\0\1\10\4\0\3\10\1\322\17\10\26\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[11005];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\1\1\1\11\34\1\6\11\13\1\5\11"+
    "\2\1\1\11\1\1\4\0\1\11\1\1\1\0\13\1"+
    "\1\11\31\1\2\11\1\1\4\11\1\1\3\11\1\1"+
    "\3\0\4\1\1\0\4\1\1\11\26\1\2\11\4\1"+
    "\4\0\23\1\2\0\36\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[210];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  YakshaLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return TokenType.BAD_CHARACTER;
            } 
            // fall through
          case 73: break;
          case 2: 
            { return YakshaTypes.NL;
            } 
            // fall through
          case 74: break;
          case 3: 
            { return YakshaTypes.S;
            } 
            // fall through
          case 75: break;
          case 4: 
            { return YakshaTypes.COMMENT;
            } 
            // fall through
          case 76: break;
          case 5: 
            { return YakshaTypes.IDENTIFIER;
            } 
            // fall through
          case 77: break;
          case 6: 
            { return YakshaTypes.NUMBER;
            } 
            // fall through
          case 78: break;
          case 7: 
            { return YakshaTypes.OPERATOR_DOT;
            } 
            // fall through
          case 79: break;
          case 8: 
            { return YakshaTypes.OPERATOR_PLUS;
            } 
            // fall through
          case 80: break;
          case 9: 
            { return YakshaTypes.STRING;
            } 
            // fall through
          case 81: break;
          case 10: 
            { return YakshaTypes.OPERATOR_OPEN_P;
            } 
            // fall through
          case 82: break;
          case 11: 
            { return YakshaTypes.OPERATOR_CLOSE_P;
            } 
            // fall through
          case 83: break;
          case 12: 
            { return YakshaTypes.OPERATOR_OPEN_SQB;
            } 
            // fall through
          case 84: break;
          case 13: 
            { return YakshaTypes.OPERATOR_CLOSE_SQB;
            } 
            // fall through
          case 85: break;
          case 14: 
            { return YakshaTypes.OPERATOR_CURLY_OPEN;
            } 
            // fall through
          case 86: break;
          case 15: 
            { return YakshaTypes.OPERATOR_CURLY_CLOSE;
            } 
            // fall through
          case 87: break;
          case 16: 
            { return YakshaTypes.OPERATOR_MINUS;
            } 
            // fall through
          case 88: break;
          case 17: 
            { return YakshaTypes.OPERATOR_COMPARISON;
            } 
            // fall through
          case 89: break;
          case 18: 
            { return YakshaTypes.OPERATOR_MUL;
            } 
            // fall through
          case 90: break;
          case 19: 
            { return YakshaTypes.OPERATOR_DIV;
            } 
            // fall through
          case 91: break;
          case 20: 
            { return YakshaTypes.OPERATOR_REMAINDER;
            } 
            // fall through
          case 92: break;
          case 21: 
            { return YakshaTypes.OPERATOR_B_AND;
            } 
            // fall through
          case 93: break;
          case 22: 
            { return YakshaTypes.OPERATOR_B_OR;
            } 
            // fall through
          case 94: break;
          case 23: 
            { return YakshaTypes.OPERATOR_B_XOR;
            } 
            // fall through
          case 95: break;
          case 24: 
            { return YakshaTypes.OPERATOR_EQ;
            } 
            // fall through
          case 96: break;
          case 25: 
            { return YakshaTypes.OPERATOR_NOT_SYMBOL;
            } 
            // fall through
          case 97: break;
          case 26: 
            { return YakshaTypes.OPERATOR_AT;
            } 
            // fall through
          case 98: break;
          case 27: 
            { return YakshaTypes.OPERATOR_COLON;
            } 
            // fall through
          case 99: break;
          case 28: 
            { return YakshaTypes.OPERATOR_COMMA;
            } 
            // fall through
          case 100: break;
          case 29: 
            { return YakshaTypes.OPERATOR_SEMICOLON;
            } 
            // fall through
          case 101: break;
          case 30: 
            { return YakshaTypes.OPERATOR_B_NOT;
            } 
            // fall through
          case 102: break;
          case 31: 
            { return YakshaTypes.PRIMITIVE_DATA_TYPE;
            } 
            // fall through
          case 103: break;
          case 32: 
            { return YakshaTypes.KW_IN;
            } 
            // fall through
          case 104: break;
          case 33: 
            { return YakshaTypes.KW_IF;
            } 
            // fall through
          case 105: break;
          case 34: 
            { return YakshaTypes.OPERATOR_OR;
            } 
            // fall through
          case 106: break;
          case 35: 
            { return YakshaTypes.OPERATOR_PLUS_EQ;
            } 
            // fall through
          case 107: break;
          case 36: 
            { return YakshaTypes.KW_AS;
            } 
            // fall through
          case 108: break;
          case 37: 
            { return YakshaTypes.OPERATOR_ARROW;
            } 
            // fall through
          case 109: break;
          case 38: 
            { return YakshaTypes.OPERATOR_MINUS_EQ;
            } 
            // fall through
          case 110: break;
          case 39: 
            { return YakshaTypes.OPERATOR_SHR;
            } 
            // fall through
          case 111: break;
          case 40: 
            { return YakshaTypes.OPERATOR_MUL_EQ;
            } 
            // fall through
          case 112: break;
          case 41: 
            { return YakshaTypes.OPERATOR_DIV_EQ;
            } 
            // fall through
          case 113: break;
          case 42: 
            { return YakshaTypes.OPERATOR_REMAINDER_EQ;
            } 
            // fall through
          case 114: break;
          case 43: 
            { return YakshaTypes.OPERATOR_SHL;
            } 
            // fall through
          case 115: break;
          case 44: 
            { return YakshaTypes.OPERATOR_B_AND_EQ;
            } 
            // fall through
          case 116: break;
          case 45: 
            { return YakshaTypes.OPERATOR_B_OR_EQ;
            } 
            // fall through
          case 117: break;
          case 46: 
            { return YakshaTypes.OPERATOR_B_XOR_EQ;
            } 
            // fall through
          case 118: break;
          case 47: 
            { return YakshaTypes.OPERATOR_AND;
            } 
            // fall through
          case 119: break;
          case 48: 
            { return YakshaTypes.KW_DEL;
            } 
            // fall through
          case 120: break;
          case 49: 
            { return YakshaTypes.KW_DEF;
            } 
            // fall through
          case 121: break;
          case 50: 
            { return YakshaTypes.OPERATOR_NOT;
            } 
            // fall through
          case 122: break;
          case 51: 
            { return YakshaTypes.KW_FOR;
            } 
            // fall through
          case 123: break;
          case 52: 
            { return YakshaTypes.OPERATOR_SHR_EQ;
            } 
            // fall through
          case 124: break;
          case 53: 
            { return YakshaTypes.OPERATOR_SHL_EQ;
            } 
            // fall through
          case 125: break;
          case 54: 
            { return YakshaTypes.I;
            } 
            // fall through
          case 126: break;
          case 55: 
            { return YakshaTypes.KW_ELIF;
            } 
            // fall through
          case 127: break;
          case 56: 
            { return YakshaTypes.KW_ELSE;
            } 
            // fall through
          case 128: break;
          case 57: 
            { return YakshaTypes.KW_PASS;
            } 
            // fall through
          case 129: break;
          case 58: 
            { return YakshaTypes.KW_TRUE;
            } 
            // fall through
          case 130: break;
          case 59: 
            { return YakshaTypes.KW_NONE;
            } 
            // fall through
          case 131: break;
          case 60: 
            { return YakshaTypes.KW_BREAK;
            } 
            // fall through
          case 132: break;
          case 61: 
            { return YakshaTypes.KW_FALSE;
            } 
            // fall through
          case 133: break;
          case 62: 
            { return YakshaTypes.KW_CCODE;
            } 
            // fall through
          case 134: break;
          case 63: 
            { return YakshaTypes.KW_CLASS;
            } 
            // fall through
          case 135: break;
          case 64: 
            { return YakshaTypes.KW_DEFER;
            } 
            // fall through
          case 136: break;
          case 65: 
            { return YakshaTypes.KW_WHILE;
            } 
            // fall through
          case 137: break;
          case 66: 
            { return YakshaTypes.KW_IMPORT;
            } 
            // fall through
          case 138: break;
          case 67: 
            { return YakshaTypes.KW_STRUCT;
            } 
            // fall through
          case 139: break;
          case 68: 
            { return YakshaTypes.KW_RETURN;
            } 
            // fall through
          case 140: break;
          case 69: 
            { return YakshaTypes.KW_MACROS;
            } 
            // fall through
          case 141: break;
          case 70: 
            { return YakshaTypes.KW_CONTINUE;
            } 
            // fall through
          case 142: break;
          case 71: 
            { return YakshaTypes.KW_DIRECTIVE;
            } 
            // fall through
          case 143: break;
          case 72: 
            { return YakshaTypes.KW_RUNTIMEFEATURE;
            } 
            // fall through
          case 144: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
