// Generated by JFlex 1.9.1 http://jflex.de/  (tweaked for IntelliJ platform)
// source: Yaksha.flex

package org.intellij.sdk.language;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.TokenType;
import com.intellij.psi.tree.IElementType;
import org.intellij.sdk.language.psi.YakshaTypes;


class YakshaLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\u10ff\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\2\0\1\3\22\0\1\4\1\5"+
    "\1\6\1\7\1\0\1\10\1\11\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\1\26\1\27\1\30\1\31\1\30\1\32\1\33"+
    "\1\34\1\35\1\36\1\37\1\40\1\0\1\41\1\42"+
    "\1\43\2\42\1\44\1\45\7\46\1\47\1\50\4\46"+
    "\1\51\3\46\1\52\2\46\1\53\1\54\1\55\1\56"+
    "\1\46\1\0\1\57\1\60\1\61\1\62\1\63\1\64"+
    "\1\46\1\65\1\66\1\46\1\67\1\70\1\71\1\72"+
    "\1\73\1\74\1\46\1\75\1\76\1\77\1\100\1\101"+
    "\1\102\1\52\2\46\1\103\1\104\1\105\1\106\u0181\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[512];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\2\3\1\2\1\4\1\5\1\6"+
    "\1\7\1\10\1\5\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\2\21\1\22\1\23\1\24\1\25"+
    "\1\24\1\26\4\27\1\30\1\31\1\32\17\27\1\33"+
    "\1\34\1\35\1\36\1\2\1\24\3\5\2\6\1\37"+
    "\1\40\3\5\1\41\1\42\1\43\1\44\1\21\1\45"+
    "\1\21\2\0\1\21\3\0\1\46\1\47\3\27\1\50"+
    "\1\27\1\51\16\27\1\52\1\53\1\27\1\54\2\27"+
    "\1\55\5\27\1\56\1\2\3\5\1\21\1\0\3\21"+
    "\3\0\1\57\1\60\3\27\1\61\6\27\1\62\1\63"+
    "\5\27\1\64\2\27\1\65\3\27\1\52\1\27\1\66"+
    "\4\0\1\27\1\67\1\70\4\27\1\71\2\27\1\72"+
    "\1\73\1\74\3\27\1\75\4\27\2\0\1\76\1\77"+
    "\1\100\1\101\1\27\1\102\6\27\1\103\2\27\1\104"+
    "\1\105\1\106\1\27\1\107\3\27\1\110\2\27\1\111"+
    "\5\27\1\112";

  private static int [] zzUnpackAction() {
    int [] result = new int[215];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\107\0\216\0\107\0\325\0\u011c\0\u0163\0\u01aa"+
    "\0\u01f1\0\u0238\0\u027f\0\u02c6\0\107\0\107\0\u030d\0\u0354"+
    "\0\107\0\u039b\0\u03e2\0\u0429\0\u0470\0\u04b7\0\107\0\107"+
    "\0\u04fe\0\u0163\0\u0545\0\107\0\u058c\0\u05d3\0\u061a\0\u0661"+
    "\0\107\0\107\0\u06a8\0\u06ef\0\u0736\0\u077d\0\u07c4\0\u080b"+
    "\0\u0852\0\u0899\0\u08e0\0\u0927\0\u096e\0\u09b5\0\u09fc\0\u0a43"+
    "\0\u0a8a\0\u0ad1\0\107\0\u0b18\0\107\0\107\0\u0b5f\0\107"+
    "\0\u0ba6\0\u0bed\0\u0c34\0\107\0\u0c7b\0\107\0\107\0\u0cc2"+
    "\0\u0d09\0\u0d50\0\107\0\107\0\107\0\107\0\u0d97\0\107"+
    "\0\u0dde\0\u0e25\0\u0e6c\0\107\0\u0eb3\0\u0efa\0\u0f41\0\u0f88"+
    "\0\u0fcf\0\u1016\0\u105d\0\u10a4\0\107\0\u10eb\0\u058c\0\u1132"+
    "\0\u1179\0\u11c0\0\u1207\0\u124e\0\u1295\0\u12dc\0\u1323\0\u136a"+
    "\0\u13b1\0\u13f8\0\u143f\0\u1486\0\u14cd\0\u058c\0\u058c\0\u1514"+
    "\0\u155b\0\u15a2\0\u15e9\0\u058c\0\u1630\0\u1677\0\u16be\0\u1705"+
    "\0\u174c\0\107\0\u1793\0\107\0\u17da\0\u1821\0\u1868\0\u18af"+
    "\0\u18f6\0\u193d\0\u1984\0\u19cb\0\u1a12\0\u1a59\0\107\0\107"+
    "\0\u1aa0\0\u1ae7\0\u1b2e\0\u058c\0\u1b75\0\u1bbc\0\u1c03\0\u1c4a"+
    "\0\u1c91\0\u1cd8\0\u1d1f\0\u058c\0\u1d66\0\u1dad\0\u1df4\0\u1e3b"+
    "\0\u1e82\0\u058c\0\u1ec9\0\u1f10\0\u058c\0\u1f57\0\u1f9e\0\u1fe5"+
    "\0\u202c\0\u2073\0\u20ba\0\u2101\0\u2148\0\u218f\0\u21d6\0\u221d"+
    "\0\u058c\0\u058c\0\u2264\0\u22ab\0\u22f2\0\u2339\0\u058c\0\u2380"+
    "\0\u23c7\0\u058c\0\u058c\0\u058c\0\u155b\0\u240e\0\u2455\0\u058c"+
    "\0\u249c\0\u24e3\0\u252a\0\u2571\0\u25b8\0\u25ff\0\u058c\0\u058c"+
    "\0\u058c\0\u058c\0\u2646\0\u058c\0\u268d\0\u26d4\0\u271b\0\u2762"+
    "\0\u27a9\0\u27f0\0\u058c\0\u2837\0\u287e\0\u058c\0\u058c\0\u058c"+
    "\0\u28c5\0\u058c\0\u290c\0\u2953\0\u299a\0\u058c\0\u29e1\0\u2a28"+
    "\0\u058c\0\u2a6f\0\u2ab6\0\u2afd\0\u2b44\0\u2b8b\0\u058c";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[215];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\10\26\1\27\1\30\1\31"+
    "\1\32\1\33\1\34\3\35\1\36\1\35\1\37\1\35"+
    "\1\40\1\35\1\41\1\2\1\42\1\43\1\44\1\45"+
    "\1\46\1\47\1\50\1\51\1\35\1\52\2\35\1\53"+
    "\1\54\1\55\1\56\1\57\1\60\1\35\1\61\1\35"+
    "\1\62\1\63\1\64\1\65\1\66\110\0\1\3\2\0"+
    "\1\3\2\0\1\11\101\0\1\4\105\0\1\3\2\0"+
    "\1\67\2\0\1\11\136\0\1\70\47\0\2\71\2\0"+
    "\2\71\1\72\45\71\1\73\32\71\2\11\1\74\1\75"+
    "\103\11\37\0\1\76\106\0\1\77\47\0\2\100\2\0"+
    "\6\100\1\101\41\100\1\102\32\100\37\0\1\103\106\0"+
    "\1\104\106\0\1\105\1\106\71\0\11\107\112\0\1\110"+
    "\70\0\1\107\1\0\11\111\7\0\1\112\1\113\1\114"+
    "\2\0\1\115\1\0\1\116\5\0\1\112\2\0\1\113"+
    "\1\114\1\0\1\117\4\0\1\115\4\0\1\117\27\0"+
    "\1\107\1\0\11\26\10\0\1\113\1\114\15\0\1\113"+
    "\1\114\1\0\1\117\11\0\1\117\44\0\1\120\1\70"+
    "\106\0\1\70\1\121\71\0\11\35\6\0\11\35\4\0"+
    "\24\35\27\0\11\35\6\0\11\35\4\0\1\122\23\35"+
    "\27\0\11\35\6\0\11\35\4\0\14\35\1\123\7\35"+
    "\27\0\11\35\6\0\11\35\4\0\16\35\1\124\5\35"+
    "\43\0\1\125\72\0\11\35\6\0\11\35\4\0\13\35"+
    "\1\126\3\35\1\127\4\35\27\0\11\35\6\0\11\35"+
    "\4\0\14\35\1\130\1\35\1\131\5\35\27\0\11\35"+
    "\6\0\11\35\4\0\2\35\1\132\6\35\1\133\2\35"+
    "\1\134\7\35\27\0\11\35\6\0\11\35\4\0\4\35"+
    "\1\135\2\35\1\136\14\35\27\0\11\35\6\0\11\35"+
    "\4\0\11\35\1\137\1\35\1\140\10\35\27\0\3\35"+
    "\1\141\2\35\1\142\2\35\6\0\11\35\4\0\11\35"+
    "\1\143\2\35\1\144\7\35\27\0\1\35\1\145\1\35"+
    "\1\141\2\35\1\142\1\146\1\35\6\0\11\35\4\0"+
    "\5\35\1\147\4\35\1\150\1\151\10\35\27\0\11\35"+
    "\6\0\11\35\4\0\1\152\23\35\27\0\11\35\6\0"+
    "\11\35\4\0\14\35\1\153\7\35\27\0\11\35\6\0"+
    "\11\35\4\0\16\35\1\154\5\35\27\0\11\35\6\0"+
    "\11\35\4\0\1\155\23\35\27\0\11\35\6\0\11\35"+
    "\4\0\4\35\1\156\14\35\1\157\2\35\27\0\11\35"+
    "\6\0\11\35\4\0\16\35\1\146\1\35\1\160\3\35"+
    "\27\0\1\35\1\145\1\35\1\141\2\35\1\142\1\146"+
    "\1\35\6\0\11\35\4\0\24\35\27\0\11\35\6\0"+
    "\11\35\4\0\6\35\1\161\15\35\43\0\1\162\50\0"+
    "\1\3\2\0\1\163\2\0\1\11\77\0\2\71\2\0"+
    "\2\71\1\164\45\71\1\73\32\71\6\0\1\165\100\0"+
    "\107\71\2\0\1\74\104\0\2\100\2\0\6\100\1\164"+
    "\41\100\1\102\32\100\12\0\1\166\74\0\107\100\23\0"+
    "\11\107\10\0\1\113\1\114\15\0\1\113\1\114\43\0"+
    "\1\107\1\0\11\111\10\0\1\113\1\114\15\0\1\113"+
    "\1\114\45\0\2\167\100\0\1\170\1\0\1\170\2\0"+
    "\11\171\76\0\7\172\100\0\11\173\6\0\4\173\11\0"+
    "\6\173\46\0\1\174\1\0\1\175\2\0\1\176\1\114"+
    "\113\0\1\177\106\0\1\200\72\0\11\35\6\0\11\35"+
    "\4\0\11\35\1\201\12\35\27\0\11\35\6\0\11\35"+
    "\4\0\13\35\1\202\10\35\27\0\11\35\6\0\11\35"+
    "\4\0\21\35\1\203\2\35\27\0\11\35\6\0\11\35"+
    "\4\0\3\35\1\204\20\35\27\0\11\35\6\0\11\35"+
    "\4\0\14\35\1\205\7\35\27\0\11\35\6\0\11\35"+
    "\4\0\4\35\1\206\17\35\27\0\11\35\6\0\11\35"+
    "\4\0\14\35\1\207\7\35\27\0\11\35\6\0\11\35"+
    "\4\0\1\210\23\35\27\0\11\35\6\0\11\35\4\0"+
    "\13\35\1\211\10\35\27\0\11\35\6\0\11\35\4\0"+
    "\2\35\1\212\2\35\1\213\3\35\1\214\12\35\27\0"+
    "\11\35\6\0\11\35\4\0\16\35\1\215\5\35\27\0"+
    "\11\35\6\0\11\35\4\0\7\35\1\216\7\35\1\217"+
    "\4\35\27\0\11\35\6\0\11\35\4\0\21\35\1\220"+
    "\2\35\27\0\2\35\1\146\6\35\6\0\11\35\4\0"+
    "\24\35\27\0\4\35\1\146\4\35\6\0\11\35\4\0"+
    "\24\35\27\0\11\35\6\0\11\35\4\0\14\35\1\221"+
    "\7\35\27\0\11\35\6\0\11\35\4\0\16\35\1\222"+
    "\5\35\27\0\6\35\1\146\2\35\6\0\11\35\4\0"+
    "\24\35\27\0\11\35\6\0\11\35\4\0\15\35\1\223"+
    "\6\35\27\0\11\35\6\0\11\35\4\0\20\35\1\146"+
    "\3\35\27\0\11\35\6\0\11\35\4\0\2\35\1\224"+
    "\21\35\27\0\11\35\6\0\11\35\4\0\20\35\1\225"+
    "\3\35\27\0\11\35\6\0\11\35\4\0\17\35\1\226"+
    "\4\35\27\0\11\35\6\0\11\35\4\0\20\35\1\227"+
    "\3\35\27\0\11\35\6\0\11\35\4\0\13\35\1\230"+
    "\10\35\27\0\11\35\6\0\11\35\4\0\16\35\1\231"+
    "\5\35\27\0\11\35\6\0\11\35\4\0\7\35\1\232"+
    "\14\35\5\0\1\3\2\0\1\233\2\0\1\11\77\0"+
    "\6\165\1\234\45\165\1\235\32\165\12\166\1\236\41\166"+
    "\1\237\32\166\23\0\2\167\41\0\1\117\11\0\1\117"+
    "\31\0\11\171\76\0\11\171\11\0\1\114\16\0\1\114"+
    "\45\0\7\172\34\0\1\117\11\0\1\117\31\0\11\173"+
    "\6\0\4\173\11\0\6\173\1\0\1\117\11\0\1\117"+
    "\37\0\1\114\102\0\1\114\110\0\1\114\102\0\11\35"+
    "\6\0\11\35\4\0\17\35\1\240\4\35\27\0\11\35"+
    "\6\0\11\35\4\0\4\35\1\241\17\35\27\0\11\35"+
    "\6\0\11\35\4\0\4\35\1\242\17\35\27\0\11\35"+
    "\6\0\11\35\4\0\11\35\1\146\12\35\27\0\11\35"+
    "\6\0\11\35\4\0\1\243\23\35\27\0\11\35\6\0"+
    "\11\35\4\0\3\35\1\244\20\35\27\0\11\35\6\0"+
    "\11\35\4\0\17\35\1\245\4\35\27\0\11\35\6\0"+
    "\11\35\4\0\20\35\1\246\3\35\27\0\11\35\6\0"+
    "\11\35\4\0\11\35\1\247\12\35\27\0\11\35\6\0"+
    "\11\35\4\0\4\35\1\250\17\35\27\0\11\35\6\0"+
    "\11\35\4\0\4\35\1\251\17\35\27\0\11\35\6\0"+
    "\11\35\4\0\5\35\1\252\16\35\27\0\11\35\6\0"+
    "\11\35\4\0\4\35\1\253\17\35\27\0\11\35\6\0"+
    "\11\35\4\0\12\35\1\254\11\35\27\0\11\35\6\0"+
    "\11\35\4\0\1\255\23\35\27\0\11\35\6\0\11\35"+
    "\4\0\14\35\1\256\7\35\27\0\11\35\6\0\11\35"+
    "\4\0\16\35\1\257\5\35\27\0\11\35\6\0\11\35"+
    "\4\0\17\35\1\260\4\35\27\0\11\35\6\0\11\35"+
    "\4\0\21\35\1\261\2\35\27\0\11\35\6\0\11\35"+
    "\4\0\20\35\1\262\3\35\27\0\11\35\6\0\11\35"+
    "\4\0\21\35\1\263\2\35\27\0\11\35\6\0\11\35"+
    "\4\0\11\35\1\264\12\35\5\0\1\3\2\0\1\6"+
    "\2\0\1\11\77\0\6\165\1\265\45\165\1\235\141\165"+
    "\12\166\1\266\41\166\1\237\141\166\23\0\11\35\6\0"+
    "\11\35\4\0\4\35\1\267\17\35\27\0\11\35\6\0"+
    "\11\35\4\0\10\35\1\270\13\35\27\0\11\35\6\0"+
    "\11\35\4\0\4\35\1\271\17\35\27\0\11\35\6\0"+
    "\11\35\4\0\17\35\1\272\4\35\27\0\11\35\6\0"+
    "\11\35\4\0\7\35\1\273\14\35\27\0\11\35\6\0"+
    "\11\35\4\0\16\35\1\274\5\35\27\0\11\35\6\0"+
    "\11\35\4\0\2\35\1\275\21\35\27\0\11\35\6\0"+
    "\11\35\4\0\16\35\1\276\5\35\27\0\11\35\6\0"+
    "\11\35\4\0\14\35\1\277\7\35\27\0\11\35\6\0"+
    "\11\35\4\0\16\35\1\300\5\35\27\0\11\35\6\0"+
    "\11\35\4\0\7\35\1\301\14\35\27\0\11\35\6\0"+
    "\11\35\4\0\2\35\1\302\21\35\27\0\11\35\6\0"+
    "\11\35\4\0\4\35\1\303\17\35\4\0\6\165\1\164"+
    "\45\165\1\235\32\165\12\166\1\164\41\166\1\237\32\166"+
    "\23\0\11\35\6\0\11\35\4\0\13\35\1\304\10\35"+
    "\27\0\11\35\6\0\11\35\4\0\20\35\1\305\3\35"+
    "\27\0\11\35\6\0\11\35\4\0\20\35\1\306\3\35"+
    "\27\0\11\35\6\0\11\35\4\0\17\35\1\307\4\35"+
    "\27\0\11\35\6\0\11\35\4\0\13\35\1\310\10\35"+
    "\27\0\11\35\6\0\11\35\4\0\12\35\1\311\11\35"+
    "\27\0\11\35\6\0\11\35\4\0\20\35\1\312\3\35"+
    "\27\0\11\35\6\0\11\35\4\0\21\35\1\313\2\35"+
    "\27\0\11\35\6\0\11\35\4\0\7\35\1\314\14\35"+
    "\27\0\11\35\6\0\11\35\4\0\4\35\1\315\17\35"+
    "\27\0\11\35\6\0\11\35\4\0\4\35\1\316\17\35"+
    "\27\0\11\35\6\0\11\35\4\0\22\35\1\317\1\35"+
    "\27\0\11\35\6\0\11\35\4\0\5\35\1\320\16\35"+
    "\27\0\11\35\6\0\11\35\4\0\4\35\1\321\17\35"+
    "\27\0\11\35\6\0\11\35\4\0\4\35\1\322\17\35"+
    "\27\0\11\35\6\0\11\35\4\0\1\323\23\35\27\0"+
    "\11\35\6\0\11\35\4\0\20\35\1\324\3\35\27\0"+
    "\11\35\6\0\11\35\4\0\21\35\1\325\2\35\27\0"+
    "\11\35\6\0\11\35\4\0\16\35\1\326\5\35\27\0"+
    "\11\35\6\0\11\35\4\0\4\35\1\327\17\35\4\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[11218];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\1\1\1\11\10\1\2\11\2\1\1\11"+
    "\5\1\2\11\3\1\1\11\4\1\2\11\20\1\1\11"+
    "\1\1\2\11\1\1\1\11\3\1\1\11\1\1\2\11"+
    "\3\1\4\11\1\1\1\11\1\1\2\0\1\11\3\0"+
    "\5\1\1\11\34\1\1\11\1\1\1\11\3\1\1\0"+
    "\3\1\3\0\2\11\33\1\4\0\25\1\2\0\41\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[215];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  YakshaLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return TokenType.BAD_CHARACTER;
            }
          // fall through
          case 75: break;
          case 2:
            { return YakshaTypes.S;
            }
          // fall through
          case 76: break;
          case 3:
            { return YakshaTypes.NL;
            }
          // fall through
          case 77: break;
          case 4:
            { return YakshaTypes.OPERATOR_NOT_SYMBOL;
            }
          // fall through
          case 78: break;
          case 5:
            { return YakshaTypes.STRING;
            }
          // fall through
          case 79: break;
          case 6:
            { return YakshaTypes.COMMENT;
            }
          // fall through
          case 80: break;
          case 7:
            { return YakshaTypes.OPERATOR_REMAINDER;
            }
          // fall through
          case 81: break;
          case 8:
            { return YakshaTypes.OPERATOR_B_AND;
            }
          // fall through
          case 82: break;
          case 9:
            { return YakshaTypes.OPERATOR_OPEN_P;
            }
          // fall through
          case 83: break;
          case 10:
            { return YakshaTypes.OPERATOR_CLOSE_P;
            }
          // fall through
          case 84: break;
          case 11:
            { return YakshaTypes.OPERATOR_MUL;
            }
          // fall through
          case 85: break;
          case 12:
            { return YakshaTypes.OPERATOR_PLUS;
            }
          // fall through
          case 86: break;
          case 13:
            { return YakshaTypes.OPERATOR_COMMA;
            }
          // fall through
          case 87: break;
          case 14:
            { return YakshaTypes.OPERATOR_MINUS;
            }
          // fall through
          case 88: break;
          case 15:
            { return YakshaTypes.OPERATOR_DOT;
            }
          // fall through
          case 89: break;
          case 16:
            { return YakshaTypes.OPERATOR_DIV;
            }
          // fall through
          case 90: break;
          case 17:
            { return YakshaTypes.NUMBER;
            }
          // fall through
          case 91: break;
          case 18:
            { return YakshaTypes.OPERATOR_COLON;
            }
          // fall through
          case 92: break;
          case 19:
            { return YakshaTypes.OPERATOR_SEMICOLON;
            }
          // fall through
          case 93: break;
          case 20:
            { return YakshaTypes.OPERATOR_COMPARISON;
            }
          // fall through
          case 94: break;
          case 21:
            { return YakshaTypes.OPERATOR_EQ;
            }
          // fall through
          case 95: break;
          case 22:
            { return YakshaTypes.OPERATOR_AT;
            }
          // fall through
          case 96: break;
          case 23:
            { return YakshaTypes.IDENTIFIER;
            }
          // fall through
          case 97: break;
          case 24:
            { return YakshaTypes.OPERATOR_OPEN_SQB;
            }
          // fall through
          case 98: break;
          case 25:
            { return YakshaTypes.OPERATOR_CLOSE_SQB;
            }
          // fall through
          case 99: break;
          case 26:
            { return YakshaTypes.OPERATOR_B_XOR;
            }
          // fall through
          case 100: break;
          case 27:
            { return YakshaTypes.OPERATOR_CURLY_OPEN;
            }
          // fall through
          case 101: break;
          case 28:
            { return YakshaTypes.OPERATOR_B_OR;
            }
          // fall through
          case 102: break;
          case 29:
            { return YakshaTypes.OPERATOR_CURLY_CLOSE;
            }
          // fall through
          case 103: break;
          case 30:
            { return YakshaTypes.OPERATOR_B_NOT;
            }
          // fall through
          case 104: break;
          case 31:
            { return YakshaTypes.OPERATOR_REMAINDER_EQ;
            }
          // fall through
          case 105: break;
          case 32:
            { return YakshaTypes.OPERATOR_B_AND_EQ;
            }
          // fall through
          case 106: break;
          case 33:
            { return YakshaTypes.OPERATOR_MUL_EQ;
            }
          // fall through
          case 107: break;
          case 34:
            { return YakshaTypes.OPERATOR_PLUS_EQ;
            }
          // fall through
          case 108: break;
          case 35:
            { return YakshaTypes.OPERATOR_MINUS_EQ;
            }
          // fall through
          case 109: break;
          case 36:
            { return YakshaTypes.OPERATOR_ARROW;
            }
          // fall through
          case 110: break;
          case 37:
            { return YakshaTypes.OPERATOR_DIV_EQ;
            }
          // fall through
          case 111: break;
          case 38:
            { return YakshaTypes.OPERATOR_SHL;
            }
          // fall through
          case 112: break;
          case 39:
            { return YakshaTypes.OPERATOR_SHR;
            }
          // fall through
          case 113: break;
          case 40:
            { return YakshaTypes.OPERATOR_B_XOR_EQ;
            }
          // fall through
          case 114: break;
          case 41:
            { return YakshaTypes.KW_AS;
            }
          // fall through
          case 115: break;
          case 42:
            { return YakshaTypes.PRIMITIVE_DATA_TYPE;
            }
          // fall through
          case 116: break;
          case 43:
            { return YakshaTypes.KW_IF;
            }
          // fall through
          case 117: break;
          case 44:
            { return YakshaTypes.KW_IN;
            }
          // fall through
          case 118: break;
          case 45:
            { return YakshaTypes.OPERATOR_OR;
            }
          // fall through
          case 119: break;
          case 46:
            { return YakshaTypes.OPERATOR_B_OR_EQ;
            }
          // fall through
          case 120: break;
          case 47:
            { return YakshaTypes.OPERATOR_SHL_EQ;
            }
          // fall through
          case 121: break;
          case 48:
            { return YakshaTypes.OPERATOR_SHR_EQ;
            }
          // fall through
          case 122: break;
          case 49:
            { return YakshaTypes.OPERATOR_AND;
            }
          // fall through
          case 123: break;
          case 50:
            { return YakshaTypes.KW_DEF;
            }
          // fall through
          case 124: break;
          case 51:
            { return YakshaTypes.KW_DEL;
            }
          // fall through
          case 125: break;
          case 52:
            { return YakshaTypes.KW_FOR;
            }
          // fall through
          case 126: break;
          case 53:
            { return YakshaTypes.OPERATOR_NOT;
            }
          // fall through
          case 127: break;
          case 54:
            { return YakshaTypes.I;
            }
          // fall through
          case 128: break;
          case 55:
            { return YakshaTypes.KW_NONE;
            }
          // fall through
          case 129: break;
          case 56:
            { return YakshaTypes.KW_TRUE;
            }
          // fall through
          case 130: break;
          case 57:
            { return YakshaTypes.KW_DECL;
            }
          // fall through
          case 131: break;
          case 58:
            { return YakshaTypes.KW_ELIF;
            }
          // fall through
          case 132: break;
          case 59:
            { return YakshaTypes.KW_ELSE;
            }
          // fall through
          case 133: break;
          case 60:
            { return YakshaTypes.KW_ENUM;
            }
          // fall through
          case 134: break;
          case 61:
            { return YakshaTypes.KW_PASS;
            }
          // fall through
          case 135: break;
          case 62:
            { return YakshaTypes.KW_FALSE;
            }
          // fall through
          case 136: break;
          case 63:
            { return YakshaTypes.KW_BREAK;
            }
          // fall through
          case 137: break;
          case 64:
            { return YakshaTypes.KW_CCODE;
            }
          // fall through
          case 138: break;
          case 65:
            { return YakshaTypes.KW_CLASS;
            }
          // fall through
          case 139: break;
          case 66:
            { return YakshaTypes.KW_DEFER;
            }
          // fall through
          case 140: break;
          case 67:
            { return YakshaTypes.KW_WHILE;
            }
          // fall through
          case 141: break;
          case 68:
            { return YakshaTypes.KW_IMPORT;
            }
          // fall through
          case 142: break;
          case 69:
            { return YakshaTypes.KW_MACROS;
            }
          // fall through
          case 143: break;
          case 70:
            { return YakshaTypes.KW_RETURN;
            }
          // fall through
          case 144: break;
          case 71:
            { return YakshaTypes.KW_STRUCT;
            }
          // fall through
          case 145: break;
          case 72:
            { return YakshaTypes.KW_CONTINUE;
            }
          // fall through
          case 146: break;
          case 73:
            { return YakshaTypes.KW_DIRECTIVE;
            }
          // fall through
          case 147: break;
          case 74:
            { return YakshaTypes.KW_RUNTIMEFEATURE;
            }
          // fall through
          case 148: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
