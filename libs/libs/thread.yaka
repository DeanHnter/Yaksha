import libs.timespec

ERROR: Const[int] = 0
# The requested operation failed
SUCCESS: Const[int] = 1
# The requested operation succeeded
TIMEOUT: Const[int] = 2
# The time specified in the call was reached without acquiring the requested resource
BUSY: Const[int] = 3
# The requested operation failed because a tesource requested by a test and return function is already in use
NOMEM: Const[int] = 4
# The requested operation failed because it was unable to allocate memory

SLEEP_SUCCES: Const[int] = 0
# Sleep is successful

@nativedefine("thrd_t")
@dotaccess
class Thread:
    # Thread Object
    pass

@nativedefine("void*")
class Data:
    # Any data
    pass

@native("thrd_create")
def create_with_data(thr: Ptr[Thread], func: Function[In[Data], Out[int]], data: Data) -> int:
    # Create a new thread with given reference to Thread and a function that takes Data and return int
    pass

@native
def create(thr: Ptr[Thread], func: Function[In[Data], Out[int]]) -> int:
    # Create a thread with None data. Otherwise same as create_with_data()
    ccode """return thrd_create(nn__thr, nn__func, NULL)"""

@native("thrd_current")
def current() -> Thread:
    # Get current thread object
    pass

@native("thrd_detach")
def detach(thr: Thread) -> int:
    pass

@native("thrd_equal")
def equal(thr1: Thread, thr2: Thread) -> int:
    # Are these two equal?
    pass

@native("thrd_exit")
def exit(res: int) -> None:
    # Exit current thread giving result value
    pass

@native("thrd_join")
def join_with_result(thr: Thread, res: Ptr[int]) -> int:
    pass

@native
def join(thr: Thread) -> int:
    ccode """return thrd_join(nn__thr, NULL)"""

@native("thrd_yield")
def yield() -> None:
    pass

@native("thrd_sleep")
def sleep_ex(duration: Ptr[timespec.TimeSpec], remainder: Ptr[timespec.TimeSpec]) -> int:
    # remainder - this parameter will hold the remaining time until time_point upon return
    # SLEEP_SUCCES is returned if successful
    pass

@native
def sleep(seconds: int) -> int:
    # Sleep for given seconds
    # SLEEP_SUCCES is returned if successful
    ccode """struct timespec t = {0, };
    t.tv_sec = nn__seconds;
    t.tv_nsec = 0;
    return thrd_sleep(&t, &t)"""
