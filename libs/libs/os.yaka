runtimefeature "whereami"
runtimefeature "process"

import libs.strings
import libs.strings.array as sarr
import libs.os.path as ospath

@nativedefine("struct yk__arguments*")
class arguments:
    # UTF-8 converted arguments and argument count
    # Do not delete, Do not modify
    argc: int
    argv: Array[str]


# Get command line arguments
@nativedefine("yk__get_args")
def get_args() -> arguments:
    # Get arguments
    pass

@native
def exe() -> str:
    # Get exe file path, or empty string (if failed) on return
    ccode """int length = wai_getExecutablePath(NULL, 0, NULL);
    char* path = malloc(length + 1);
    if (path == NULL) return yk__sdsempty();
    wai_getExecutablePath(path, length, NULL);
    path[length] = '\\0';
    yk__sds value = yk__sdsnewlen(path, length);
    free(path);
    return value"""

@native
def exe_path() -> str:
    # Get exe directory path, or empty string (if failed) on return
    ccode """int length = wai_getExecutablePath(NULL, 0, NULL);
    char* path = malloc(length + 1);
    if (path == NULL) return yk__sdsempty();
    int path_len;
    wai_getExecutablePath(path, length, &path_len);
    path[path_len] = '\\0';
    yk__sds value = yk__sdsnewlen(path, path_len);
    free(path);
    return value"""

@native
def cwd() -> str:
    # Get current working directory, or empty string (if failed) on return
    ccode """char* path = yk__get_current_dir_path();
    if (path == NULL) return yk__sdsempty();
    yk__sds value = yk__sdsnewlen(path, strlen(path));
    free(path);
    return value"""


@nativedefine("struct yk__process_result*")
class ProcessResult:
    # Results of run() execution
    #   Must be deleted
    ok: bool
    output: str
    return_code: int


@native("yk__run")
def run(args: Array[str]) -> ProcessResult:
    # Run give [process, arg1, arg2] command line
    pass

@native("yk__free_process_result")
def del_process_result(pr: ProcessResult) -> None:
    # Delete process result object
    pass

@native
def is_windows() -> bool:
    # Are we running Windows?
    ccode """bool win = false;
    #if defined(_WIN32) || defined(_WIN64)
    win = true;
    #endif
    return win"""

@native
def is_macos() -> bool:
    # Are we running MacOS?
    ccode """bool mach_os = false;
    #if defined(__APPLE__) && defined(__MACH__)
    mach_os = true;
    #endif
    return mach_os"""


@native("yk__getenv")
def getenv(name: str) -> str:
    # Get environment variable, empty if not found or error
    pass


def which(binary: str) -> str:
    # Try to find full path to binary in $PATH, no need .exe for windows
    # If we cannot find in $PATH, This will fallback to current path and exe path as well
    #
    # Example find zig compiler path:
    #
    # os.which("zig")
    actual_bin: str = binary
    env: str = getenv("PATH")
    sep: str = ":"
    if is_windows():
        sep = ";"
        # add .exe to windows
        actual_bin = actual_bin + ".exe"
    paths: Array[str] = strings.split(env, sep)
    defer sarr.del_str_array(paths)
    length: int = len(paths)
    while length > 0:
        length = length - 1
        cur_path: str = paths[length]
        full_path:str = ospath.join(cur_path, actual_bin)
        if ospath.executable(full_path):
            return full_path
    # Not found from any of the paths, try fallbacks
    # Current path?
    special: str = ospath.join(cwd(), actual_bin)
    if ospath.executable(special):
        return special
    # Exe path?
    special = ospath.join(exe_path(), actual_bin)
    if ospath.executable(special):
        return special
    return ""
