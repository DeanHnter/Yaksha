REWIND: Const[int] = 0
# Use rewind with set_colour to stop applying colour
RED: Const[int] = 1
GREEN: Const[int] = 2
WHITE: Const[int] = 3
BLUE: Const[int] = 4
PURPLE: Const[int] = 5
YELLOW: Const[int] = 6
CYAN: Const[int] = 7


@native
def set_colour(c: int) -> None:
    ccode """if (nn__c == 0) { // rewind
        yk__set_colour(YK__CONSOLE_REWIND);
    } else if (nn__c == 1) { // red 
        yk__set_colour(YK__CONSOLE_RED);
    } else if (nn__c == 2) { // green 
        yk__set_colour(YK__CONSOLE_GREEN);
    } else if (nn__c == 3) { // white 
        yk__set_colour(YK__CONSOLE_WHITE);
    } else if (nn__c == 4) { // blue 
        yk__set_colour(YK__CONSOLE_BLUE);
    } else if (nn__c == 5) { // purple 
        yk__set_colour(YK__CONSOLE_PURPLE);
    } else if (nn__c == 6) { // yellow 
        yk__set_colour(YK__CONSOLE_YELLOW);
    } else if (nn__c == 7) { // cyan  
        yk__set_colour(YK__CONSOLE_CYAN);
    }"""

@native
def getch() -> int:
    ccode """return yk__getch()"""

@nativedefine("yk__clear")
def clear() -> None:
    pass

def colour_print(colour: int, x: str) -> None:
    # Print in given colour and then rewind
    set_colour(colour)
    print(x)
    set_colour(0)

def red(x: str) -> None:
    colour_print(1, x)

def green(x: str) -> None:
    colour_print(2, x)

def white(x: str) -> None:
    colour_print(3, x)

def blue(x: str) -> None:
    colour_print(4, x)

def purple(x: str) -> None:
    colour_print(5, x)

def yellow(x: str) -> None:
    colour_print(6, x)

def cyan(x: str) -> None:
    colour_print(7, x)
