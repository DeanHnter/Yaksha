######## String arrays

@nativedefine("yk__newsdsarray")
@varargs
def new(count: int, s: str) -> Array[str]:
    # Create new string array
    # Example:
    #
    # import libs.strings.array as sarr
    # my_array: Array[str] = sarr.new(4, "A", "B", "C", "D")
    pass

@native 
def prefix(sa: Array[str], prefix_str: str) -> Array[str]:
    # Mutate all strings in this array by prefixing with prefix_str
    ccode """if (NULL == nn__sa) return NULL;
    size_t l = yk__arrlenu(nn__sa);
    for (size_t x = 0; x < l; x++) {
        yk__sds tmp = nn__sa[x];
        nn__sa[x] = yk__sdscatsds(yk__sdsdup(nn__prefix_str), nn__sa[x]);
        yk__sdsfree(tmp);
    }
    yk__sdsfree(nn__prefix_str);
    return nn__sa"""

@native 
def suffix(sa: Array[str], suffix_str: str) -> Array[str]:
    # Mutate all strings in this array by suffixing with suffix_str
    ccode """if (NULL == nn__sa) return NULL;
    size_t l = yk__arrlenu(nn__sa);
    for (size_t x = 0; x < l; x++) {
        nn__sa[x] = yk__sdscatsds(nn__sa[x], nn__suffix_str);
    }
    yk__sdsfree(nn__suffix_str);
    return nn__sa"""

@native
def join(values: Array[str], sep: str) -> str:
    # Join given string array with given separator and return a single string
    ccode """
    if (NULL == nn__values) {
        yk__sdsfree(nn__sep);
        return yk__sdsempty();
    }
    yk__sds tmp = yk__sdsjoinsds(nn__values, yk__arrlen(nn__values), nn__sep, yk__sdslen(nn__sep));
    yk__sdsfree(nn__sep);
    return tmp"""

@native
def extend(a: Array[str], b: Array[str]) -> Array[str]:
    # Copy all strings from b to a and return a
    # Warning! You must assign this back to a (as 'a' might be reallocated to a new address)
    ccode """yk__sds* lhs = nn__a;
    if (NULL != nn__b) {
        size_t l = yk__arrlenu(nn__b);
        for (size_t x = 0; x < l; x++) {
            yk__arrput(lhs, yk__sdsdup(nn__b[x]));
        }
    }
    return lhs"""

@nativedefine("yk__delsdsarray")
def del_str_array(sa: Array[str]) -> None:
    # Delete a string array by deleting individual string objects and array itself
    pass

@nativedefine("yk__sdsarraydup")
def dup(sa: Array[str]) -> Array[str]:
    # Duplicate given array to a new array
    # Both new array and string copies are created
    pass
