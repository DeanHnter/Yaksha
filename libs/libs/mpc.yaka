import libs.c as c

@nativedefine("mpc_ast_t*")
class Ast:
    tag: c.CStr
    contents: c.CStr
    children: Array[Ast]

@nativedefine("mpc_parser_t*")
class Mpc:
    pass

@nativedefine("mpc_result_t*")
class Result:
    output: Ast

@nativedefine("mpc_new")
def new(a: str) -> Mpc:
    pass

@native
def new_result() -> Result:
    ccode """return calloc(1, sizeof(mpc_result_t))"""

@varargs
@nativedefine("mpca_lang")
def mpca_lang(a: int, b: str, v: Mpc) -> None:
    pass

@varargs
@nativedefine("mpc_cleanup")
def cleanup(a: int, v: Mpc) -> None:
    pass

@nativedefine("mpc_parse")
def parse(a: str, b: str, v: Mpc, r: Result) -> bool:
    pass

@native
def ast_print(r: Result) -> None:
    ccode """mpc_ast_print(nn__r->output)"""

@native
def err_print(r: Result) -> None:
    ccode """mpc_err_print(nn__r->output)"""

@native
def del_ast(r: Result) -> None:
    ccode """mpc_ast_delete(nn__r->output)"""

@native
def del_err(r: Result) -> None:
    ccode """mpc_err_delete(nn__r->output)"""
