import libs.c

######## Byte level access

@native
def get_cstr(s: c.CStr, pos: int) -> int:
    # Get a single byte from given CStr
    # Warning: Does not do a length check
    ccode """return (int32_t)nn__s[nn__pos]"""

@native 
def set_cstr(s: c.CStr, pos: int, v: int) -> None:
    # Set a byte to given CStr position
    # Warning: Does not do a length check
    ccode """nn__s[nn__pos] = nn__v;"""

@native
def get(s: str, pos: int) -> int:
    # Get a single byte from given string and position
    # Warning: Does not do a length check
    # Warning: This copies the string to just get a single byte
    ccode """int32_t x = (int32_t)nn__s[nn__pos];
    yk__sdsfree(nn__s);
    return x"""

######## Utils

@native
def contains(haystack: str, needle: str) -> bool:
    # Does the string needle contain in string haystack?
    ccode """bool val = strstr(nn__haystack, nn__needle) != NULL;
    yk__sdsfree(nn__haystack);
    yk__sdsfree(nn__needle);
    return val"""

@nativemacro
def valid_cstr(s: c.CStr) -> bool:
    # Is a valid CStr
    ccode """(NULL != nn__s)"""

@native
def isempty(s: str) -> bool:
    # Is this string empty?
    ccode """bool x = yk__sdslen(nn__s) == 0;
    yk__sdsfree(nn__s);
    return x"""

@native
def isempty_cstr(s: c.CStr) -> bool:
    # Is an empty CStr?
    ccode """bool x = strlen(nn__s) == 0;
    return x"""

@native
def ord_cstr(s: c.CStr) -> int:
    # Get first byte of CStr
    ccode """return (int32_t)nn__s[0]"""

def ord(s: str) -> int:
    # Get first byte of string
    return get(s, 0)

@native
def startswith(a: str, b: str) -> bool:
    # Does the given string a starts with b
    ccode """bool x = (strstr(nn__a, nn__b) != NULL);
    yk__sdsfree(nn__a);
    yk__sdsfree(nn__b);
    return x"""

@native
def split(value: str, sep: str) -> Array[str]:
    # Split a string to a string array
    ccode """int count;
    yk__sds* result = yk__sdssplitlen(nn__value, yk__sdslen(nn__value),
            nn__sep, yk__sdslen(nn__sep), &count);
    yk__sdsfree(nn__value);
    yk__sdsfree(nn__sep);
    if (NULL == result) {
        return NULL;
    }
    yk__sds* newarr = NULL;
    for (int i = 0; i < count; i++) {
        yk__arrput(newarr, result[i]);
    }
    free(result); // free array itself.
    return newarr"""

@native
def find_char(value: str, ch: int) -> int:
    # Find first occurance of given character
    ccode """int position = -1;
    int length = (int)yk__sdslen(nn__value);
    for (int i = 0; i < length; i++) {
        if (nn__value[i] == nn__ch) {
            position = i;
            break;
        }
    }
    yk__sdsfree(nn__value);
    return position"""

############ Conversions and deletions

@native
def from_cstr(a: c.CStr) -> str:
    # Create a string from CStr
    ccode """return yk__sdsnewlen(nn__a, strlen(nn__a))"""

@native
def from_cstrlen(a: c.CStr, length: int) -> str:
    # Create a string from CStr with a given length
    ccode """return yk__sdsnewlen(nn__a, nn__length)"""

@native
def from_cstrlen_after(a: c.CStr, length: int, after: int) -> str:
    # Create a new string from CStr from given after location for given length
    ccode """return yk__sdsnewlen(nn__a + nn__after, nn__length)"""

@native
def null_cstr() -> c.CStr:
    ccode """return (char*)NULL"""

@native
def to_cstr(a: str) -> c.CStr:
    # Yaksha copies managed strings that you pass in so must free this
    ccode """return nn__a"""

@native
def del_cstr(a: c.CStr) -> None:
    # Delete a native c-string created from other other functions (calls free)
    ccode """free(nn__a)"""

@native
def del_str(a: c.CStr) -> None:
    # Delete a normal string that was cast as a c-str with to_cstr
    # You only need to use this if CStr was cast from standard str
    ccode """if (NULL == nn__a) return;
    yk__sdsfree(nn__a)"""

@native
def cut_from(a: str, position: int) -> str:
    # Cut a string from given position
    ccode """if (nn__a == NULL || yk__sdslen(nn__a) < nn__position) {
        yk__sdsfree(nn__a);
        return yk__sdsempty();
    }
    yk__sds s = yk__sdsnewlen(nn__a + nn__position, yk__sdslen(nn__a) - nn__position);
    yk__sdsfree(nn__a);
    return s"""

@native
def mid(a: str, position: int, number: int) -> str:
    # Cut a string from given position for number characters
    # Returns empty() if input is invalid
    ccode """if (nn__a == NULL || nn__number < 1 || yk__sdslen(nn__a) < (nn__position + nn__number)) {
        yk__sdsfree(nn__a);
        return yk__sdsempty();
    }
    yk__sds s = yk__sdsnewlen(nn__a + nn__position, nn__number);
    yk__sdsfree(nn__a);
    return s"""

def endswith(a: str, b: str) -> bool:
    # Does string a ends with string b
    if len(b) > len(a):
        return False
    pos: int = len(a) - len(b)
    cut_a: str = cut_from(a, pos)
    result: bool = cut_a == b
    return result

@native
def spaces(count: int) -> str:
    # Get a spaces only string of given count
    ccode """if (nn__count <= 0) {
        return yk__sdsempty();
    }
    yk__sds s = yk__sdsgrowzero(yk__sdsempty(), nn__count);
    for (int i = 0; i < nn__count; i++) {
        s[i] = ' ';
    }
    return s"""

def rpad(a: str, count: int) -> str:
    # Pad string to right to ensure string length is large or equal to count
    if len(a) > count:
        return a
    remainder: int = count - len(a)
    result: str = a + spaces(remainder)
    return result

def lpad(a: str, count: int) -> str:
    # Pad string to left to ensure string length is large or equal to count
    if len(a) > count:
        return a
    remainder: int = count - len(a)
    result: str = spaces(remainder) + a
    return result
