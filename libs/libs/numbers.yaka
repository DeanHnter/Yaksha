import libs.c

@nativedefine("atoi")
def cstr2i(a: c.CStr) -> int:
    # Convert a c-string to an integer
    pass

@nativemacro
def cdbl2d(a: c.CDouble) -> f64:
    # c.CDouble to f64 (double precision)
    ccode """n__a"""

@nativemacro
def d2cdbl(a: f64) -> c.CDouble:
    # f64 (double precision) to c.CDouble
    ccode """n__a"""


@nativemacro
def d2i(a: f64) -> int:
    # f64 (double precision) to int/i32
    # Warning: value is truncated
    ccode """((int32_t)(nn__a))"""

@nativemacro
def i2d(a: int) -> f64:
    # int/i32 to f64 (double precision)
    ccode """((double)(nn__a))"""

@nativemacro
def f2d(a: float) -> f64:
    # float/f32 (single precision) to f64 (double precision)
    ccode """((double)nn__a)"""

@nativemacro
def d2f(a: float) -> f64:
    # float/f32 (single precision) to f64 (double precision)
    # Warning: precision might be lost/truncated
    ccode """((double)nn__a)"""

@nativemacro
def i2uu(a: int) -> u64:
    # int/i32 to a u64
    ccode """((uint64_t)nn__a)"""

@nativemacro
def uu2i(a: u64) -> int:
    # int/i32 to a u64
    ccode """((int32_t)nn__a)"""

@nativemacro
def d2uu(a: f64) -> u64:
    # int/i32 to a u64
    ccode """((uint64_t)nn__a)"""

@nativemacro
def uu2d(a: u64) -> f64:
    # int/i32 to a u64
    ccode """((double)nn__a)"""