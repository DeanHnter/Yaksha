import raylib as rl

def remap(x: float, a: float, b: float, c: float, d: float) -> float:
    # Map x to be from 'a to b' range to 'c to d' range
    if a == b:
        return 0.0f
    return (x - a) / (b - a) * (d - c) + c

@nativemacro
def pi() -> float:
    # Get approximate PI value
    ccode """PI"""

@nativemacro
def torad(degrees: float) -> float:
    ccode """nn__degrees * DEG2RAD"""

@nativemacro
def todeg(radians: float) -> float:
    ccode """nn__radians * RAD2DEG"""

@nativemacro
def sin_deg(x: float) -> float:
    ccode """sin(nn__x * DEG2RAD)"""

@nativemacro
def cos_deg(x: float) -> float:
    ccode """cos(nn__x * DEG2RAD)"""

@nativemacro
def tan_deg(x: float) -> float:
    ccode """tan(nn__x * DEG2RAD)"""

@native
def lerp_color(a: rl.Color, b: rl.Color, fraction: float) -> rl.Color:
    ccode """float x = nn__fraction;
    if (x > 1.0f) {
        x = 1.0f;
    }
    if (x < 0.0f) {
        x = 0.0f;
    }
    float r = (nn__b.r - nn__a.r) * x + (nn__a.r);
    float g = (nn__b.g - nn__a.g) * x + (nn__a.g);
    float b = (nn__b.b - nn__a.b) * x + (nn__a.b);
    float a = (nn__b.a - nn__a.a) * x + (nn__a.a);
    return (Color){(unsigned char)r, (unsigned char)g, (unsigned char)b, (unsigned char)a}
    """

@native
def clear() -> None:
    # Clear background with RAYWHITE colour
    ccode """ClearBackground(RAYWHITE)"""
