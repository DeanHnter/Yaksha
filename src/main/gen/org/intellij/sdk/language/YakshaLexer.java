/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package org.intellij.sdk.language;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import org.intellij.sdk.language.psi.YakshaTokenType;
import org.intellij.sdk.language.psi.YakshaTypes;
import com.intellij.psi.TokenType;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>Yaksha.flex</tt>
 */
class YakshaLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [8, 6, 7]
   * Total runtime size is 1040 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>13]|((ch>>7)&0x3f)]|(ch&0x7f)];
  }

  /* The ZZ_CMAP_Z table has 136 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\207\100");

  /* The ZZ_CMAP_Y table has 128 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\177\200");

  /* The ZZ_CMAP_A table has 256 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\3\1\2\2\0\1\1\22\0\1\4\1\73\1\26\1\5\1\0\1\70\1\0\1\24\1\60\1\61\1"+
    "\66\1\23\1\76\1\64\1\21\1\67\1\10\1\16\1\15\1\56\1\57\1\17\1\55\1\17\1\54"+
    "\1\11\1\75\1\0\1\71\1\72\1\65\1\0\1\74\4\14\1\22\1\20\3\6\1\77\1\6\1\12\1"+
    "\6\1\53\5\6\1\52\3\6\1\13\2\6\1\62\1\25\1\63\1\0\1\7\1\0\1\27\1\31\1\35\1"+
    "\40\1\33\1\45\1\6\1\51\1\43\1\77\1\34\1\36\1\46\1\41\1\37\1\47\1\6\1\32\1"+
    "\30\1\42\1\44\1\6\1\50\1\13\2\6\205\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\2\2\2\3\1\4\1\5\2\6\1\5"+
    "\1\7\1\10\2\11\20\5\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\1\1\24"+
    "\1\25\1\26\1\3\2\4\3\6\1\0\4\6\1\0"+
    "\1\5\6\11\1\27\12\5\1\30\4\5\1\31\1\5"+
    "\1\32\7\5\1\33\1\17\1\3\4\6\1\0\1\5"+
    "\3\11\1\34\11\5\1\35\1\36\1\37\6\5\1\40"+
    "\2\6\1\5\4\0\3\5\1\41\1\42\5\5\1\43"+
    "\1\5\1\44\1\45\2\6\1\46\2\0\1\47\2\5"+
    "\1\50\1\51\1\5\1\52\1\5\1\53\2\6\1\54"+
    "\2\5\1\55\2\6\2\5\2\6\1\5\1\56\2\6"+
    "\1\5\2\6\1\5\1\0\1\6\1\5\1\0\1\6"+
    "\1\5\1\0\1\6\1\5\1\0\1\6\1\57\1\0"+
    "\1\6\1\0\1\6\1\0\1\6\1\0\5\6";

  private static int [] zzUnpackAction() {
    int [] result = new int[201];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\100\0\200\0\100\0\300\0\u0100\0\u0140\0\u0180"+
    "\0\u01c0\0\u0200\0\u0240\0\u0280\0\100\0\u02c0\0\u0300\0\u0340"+
    "\0\u0380\0\u03c0\0\u0400\0\u0440\0\u0480\0\u04c0\0\u0500\0\u0540"+
    "\0\u0580\0\u05c0\0\u0600\0\u0640\0\u0680\0\u06c0\0\u0700\0\100"+
    "\0\100\0\100\0\100\0\u0740\0\u0780\0\100\0\100\0\100"+
    "\0\u0780\0\u0780\0\100\0\100\0\100\0\u07c0\0\u0800\0\100"+
    "\0\u0840\0\u0880\0\100\0\u08c0\0\u0900\0\u0940\0\u0980\0\u09c0"+
    "\0\u0a00\0\u0a40\0\u0a80\0\u0ac0\0\u0b00\0\u0b40\0\u0b80\0\u0bc0"+
    "\0\u0180\0\u0c00\0\u0c40\0\u0c80\0\u0cc0\0\u0d00\0\u0d40\0\u0d80"+
    "\0\u0dc0\0\u0e00\0\u0e40\0\u0180\0\u0e80\0\u0ec0\0\u0f00\0\u0f40"+
    "\0\u0180\0\u0f80\0\u0180\0\u0fc0\0\u1000\0\u1040\0\u1080\0\u10c0"+
    "\0\u1100\0\u1140\0\100\0\100\0\u1180\0\u11c0\0\u1200\0\u1240"+
    "\0\u1280\0\u12c0\0\u1300\0\100\0\u1340\0\u1380\0\u0180\0\u13c0"+
    "\0\u1400\0\u1440\0\u1480\0\u14c0\0\u1500\0\u1540\0\u1580\0\u15c0"+
    "\0\u0180\0\u1600\0\u0180\0\u1640\0\u1680\0\u16c0\0\u1700\0\u1740"+
    "\0\u1780\0\u17c0\0\u1800\0\u1840\0\u1880\0\u18c0\0\u1900\0\u1940"+
    "\0\u1980\0\u19c0\0\u1a00\0\u1a40\0\u0180\0\u0180\0\u1a80\0\u1ac0"+
    "\0\u1b00\0\u1b40\0\u1b80\0\u0180\0\u1bc0\0\u0180\0\u0180\0\u1c00"+
    "\0\u1c40\0\u0180\0\u1c80\0\u1cc0\0\u0180\0\u1d00\0\u1d40\0\u0180"+
    "\0\u0180\0\u1d80\0\u0180\0\u1dc0\0\u0180\0\u1e00\0\u1e40\0\u0180"+
    "\0\u1e80\0\u1ec0\0\u0180\0\u1f00\0\u1f40\0\u1f80\0\u1fc0\0\u2000"+
    "\0\u2040\0\u2080\0\u0180\0\u20c0\0\u2100\0\u2140\0\u2180\0\u21c0"+
    "\0\u2200\0\u2240\0\u2280\0\u22c0\0\u2300\0\u2340\0\u2380\0\u23c0"+
    "\0\u2400\0\u2440\0\u2480\0\u24c0\0\u0180\0\u2500\0\u2540\0\u2580"+
    "\0\u25c0\0\u2600\0\u2640\0\u2680\0\u26c0\0\u2700\0\u2740\0\u2780"+
    "\0\u27c0";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[201];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\2"+
    "\1\11\1\12\3\10\3\12\1\13\1\14\1\10\1\15"+
    "\1\16\1\2\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\1\10\1\25\1\10\1\26\1\27\1\30\1\10\1\31"+
    "\1\32\1\33\1\10\1\34\1\35\1\10\1\36\1\37"+
    "\4\12\1\40\1\41\1\42\1\43\1\44\1\45\1\46"+
    "\1\47\1\50\1\45\1\51\1\52\1\53\1\54\1\55"+
    "\1\10\102\0\1\4\100\0\2\5\1\7\75\0\1\5"+
    "\1\56\1\7\72\0\1\7\1\57\1\60\75\7\6\0"+
    "\13\10\1\0\1\10\4\0\31\10\17\0\1\10\10\0"+
    "\1\61\1\62\1\63\1\64\1\0\1\65\1\66\1\65"+
    "\1\67\1\70\1\71\10\0\1\71\2\0\1\63\6\0"+
    "\1\67\6\0\1\62\3\65\30\0\2\12\1\63\2\0"+
    "\3\12\1\67\1\70\1\71\10\0\1\71\2\0\1\63"+
    "\6\0\1\67\6\0\4\12\26\0\13\10\1\0\1\10"+
    "\4\0\1\72\30\10\17\0\1\10\10\0\2\70\3\0"+
    "\3\70\34\0\4\70\20\0\1\73\2\0\21\73\1\74"+
    "\1\75\52\73\1\76\2\0\22\76\1\77\1\100\51\76"+
    "\6\0\13\10\1\0\1\10\4\0\1\10\1\101\10\10"+
    "\1\102\16\10\17\0\1\10\6\0\13\10\1\0\1\10"+
    "\4\0\13\10\1\103\15\10\17\0\1\10\6\0\13\10"+
    "\1\0\1\10\4\0\3\10\1\104\4\10\1\105\20\10"+
    "\17\0\1\10\6\0\13\10\1\0\1\10\4\0\4\10"+
    "\1\106\10\10\1\107\13\10\17\0\1\10\6\0\13\10"+
    "\1\0\1\10\4\0\7\10\1\110\21\10\17\0\1\10"+
    "\6\0\13\10\1\0\1\10\4\0\6\10\1\111\1\112"+
    "\1\113\20\10\17\0\1\10\6\0\13\10\1\0\1\10"+
    "\4\0\3\10\1\114\25\10\17\0\1\10\6\0\13\10"+
    "\1\0\1\10\4\0\4\10\1\115\24\10\17\0\1\10"+
    "\6\0\13\10\1\0\1\10\4\0\10\10\1\116\20\10"+
    "\17\0\1\10\6\0\10\10\1\117\2\10\1\0\1\10"+
    "\4\0\12\10\1\120\3\10\1\121\1\122\5\10\1\123"+
    "\1\124\1\125\1\10\17\0\1\10\6\0\10\10\1\117"+
    "\2\10\1\0\1\10\4\0\25\10\1\123\1\124\1\125"+
    "\1\10\17\0\1\10\6\0\13\10\1\0\1\10\4\0"+
    "\7\10\1\126\16\10\1\124\1\125\1\10\17\0\1\10"+
    "\6\0\13\10\1\0\1\10\4\0\1\127\30\10\17\0"+
    "\1\10\6\0\13\10\1\0\1\10\4\0\22\10\1\130"+
    "\6\10\17\0\1\10\6\0\13\10\1\0\1\10\4\0"+
    "\3\10\1\131\25\10\17\0\1\10\6\0\13\10\1\0"+
    "\1\10\4\0\10\10\1\132\20\10\17\0\1\10\65\0"+
    "\1\133\104\0\1\134\10\0\1\5\1\135\1\7\74\0"+
    "\1\60\105\0\1\61\1\62\1\63\2\0\1\65\1\66"+
    "\1\65\1\67\1\70\1\71\10\0\1\71\2\0\1\63"+
    "\6\0\1\67\6\0\1\62\3\65\30\0\2\62\3\0"+
    "\3\62\1\67\1\70\1\71\10\0\1\71\11\0\1\67"+
    "\6\0\4\62\30\0\1\136\1\137\2\0\5\137\1\0"+
    "\1\137\4\0\1\137\1\0\1\137\1\0\1\137\1\0"+
    "\1\137\2\0\1\137\4\0\1\137\6\0\4\137\30\0"+
    "\1\140\1\62\1\63\2\0\3\140\1\67\1\70\1\71"+
    "\10\0\1\71\2\0\1\63\6\0\1\67\6\0\1\62"+
    "\3\140\30\0\1\65\1\62\1\63\2\0\3\65\1\67"+
    "\1\70\1\71\10\0\1\71\2\0\1\63\6\0\1\67"+
    "\6\0\1\62\3\65\117\0\1\63\10\0\2\70\3\0"+
    "\3\70\1\67\1\0\1\71\10\0\1\71\11\0\1\67"+
    "\6\0\4\70\30\0\2\141\3\0\3\141\3\0\1\142"+
    "\30\0\4\141\4\0\1\142\21\0\13\10\1\0\1\10"+
    "\4\0\7\10\1\143\21\10\17\0\1\10\1\73\2\0"+
    "\21\73\1\144\1\75\52\73\24\0\1\145\53\0\100\73"+
    "\1\76\2\0\22\76\1\77\1\144\151\76\26\0\1\146"+
    "\57\0\13\10\1\0\1\10\4\0\11\10\1\147\17\10"+
    "\17\0\1\10\6\0\13\10\1\0\1\10\4\0\3\10"+
    "\1\123\25\10\17\0\1\10\6\0\13\10\1\0\1\10"+
    "\4\0\4\10\1\150\24\10\17\0\1\10\6\0\13\10"+
    "\1\0\1\10\4\0\10\10\1\151\20\10\17\0\1\10"+
    "\6\0\13\10\1\0\1\10\4\0\13\10\1\152\15\10"+
    "\17\0\1\10\6\0\13\10\1\0\1\10\4\0\12\10"+
    "\1\153\16\10\17\0\1\10\6\0\13\10\1\0\1\10"+
    "\4\0\1\10\1\154\12\10\1\155\14\10\17\0\1\10"+
    "\6\0\13\10\1\0\1\10\4\0\10\10\1\156\20\10"+
    "\17\0\1\10\6\0\13\10\1\0\1\10\4\0\1\157"+
    "\30\10\17\0\1\10\6\0\13\10\1\0\1\10\4\0"+
    "\12\10\1\160\16\10\17\0\1\10\6\0\13\10\1\0"+
    "\1\10\4\0\7\10\1\161\6\10\1\162\12\10\17\0"+
    "\1\10\6\0\13\10\1\0\1\10\4\0\13\10\1\163"+
    "\15\10\17\0\1\10\6\0\13\10\1\0\1\10\4\0"+
    "\26\10\1\123\2\10\17\0\1\10\6\0\13\10\1\0"+
    "\1\10\4\0\13\10\1\123\15\10\17\0\1\10\6\0"+
    "\13\10\1\0\1\10\4\0\20\10\1\164\10\10\17\0"+
    "\1\10\6\0\13\10\1\0\1\10\4\0\30\10\1\123"+
    "\17\0\1\10\6\0\7\10\1\123\3\10\1\0\1\10"+
    "\4\0\31\10\17\0\1\10\6\0\13\10\1\0\1\10"+
    "\4\0\10\10\1\165\20\10\17\0\1\10\6\0\13\10"+
    "\1\0\1\10\4\0\1\10\1\166\27\10\17\0\1\10"+
    "\6\0\13\10\1\0\1\10\4\0\14\10\1\167\14\10"+
    "\17\0\1\10\6\0\13\10\1\0\1\10\4\0\15\10"+
    "\1\170\13\10\17\0\1\10\6\0\13\10\1\0\1\10"+
    "\4\0\12\10\1\171\16\10\17\0\1\10\3\0\1\5"+
    "\1\172\1\7\102\0\1\136\1\137\1\63\1\0\5\137"+
    "\1\0\1\137\4\0\1\137\1\0\1\137\1\0\1\137"+
    "\1\0\1\137\1\63\1\0\1\137\4\0\1\137\6\0"+
    "\4\137\30\0\2\173\1\63\1\0\5\173\1\0\1\173"+
    "\4\0\1\173\1\0\1\173\1\0\1\173\1\0\1\173"+
    "\1\63\1\0\1\173\4\0\1\173\6\0\4\173\30\0"+
    "\1\174\1\62\1\63\2\0\3\174\1\67\1\70\1\71"+
    "\10\0\1\71\2\0\1\63\6\0\1\67\6\0\1\62"+
    "\3\174\30\0\2\141\3\0\3\141\1\67\24\0\1\67"+
    "\6\0\4\141\30\0\2\141\3\0\3\141\34\0\4\141"+
    "\26\0\13\10\1\0\1\10\4\0\1\10\1\175\27\10"+
    "\17\0\1\10\24\145\1\176\1\177\52\145\25\146\1\200"+
    "\1\201\51\146\6\0\13\10\1\0\1\10\4\0\1\202"+
    "\30\10\17\0\1\10\6\0\13\10\1\0\1\10\4\0"+
    "\7\10\1\123\21\10\17\0\1\10\6\0\13\10\1\0"+
    "\1\10\4\0\15\10\1\203\13\10\17\0\1\10\6\0"+
    "\13\10\1\0\1\10\4\0\13\10\1\204\15\10\17\0"+
    "\1\10\6\0\13\10\1\0\1\10\4\0\4\10\1\205"+
    "\24\10\17\0\1\10\6\0\13\10\1\0\1\10\4\0"+
    "\16\10\1\206\12\10\17\0\1\10\6\0\13\10\1\0"+
    "\1\10\4\0\11\10\1\207\17\10\17\0\1\10\6\0"+
    "\13\10\1\0\1\10\4\0\1\10\1\210\27\10\17\0"+
    "\1\10\6\0\13\10\1\0\1\10\4\0\13\10\1\211"+
    "\15\10\17\0\1\10\6\0\13\10\1\0\1\10\4\0"+
    "\4\10\1\212\24\10\17\0\1\10\6\0\13\10\1\0"+
    "\1\10\4\0\10\10\1\213\20\10\17\0\1\10\6\0"+
    "\13\10\1\0\1\10\4\0\1\120\30\10\17\0\1\10"+
    "\6\0\13\10\1\0\1\10\4\0\1\10\1\214\27\10"+
    "\17\0\1\10\6\0\13\10\1\0\1\10\4\0\7\10"+
    "\1\215\21\10\17\0\1\10\6\0\13\10\1\0\1\10"+
    "\4\0\4\10\1\216\24\10\17\0\1\10\6\0\13\10"+
    "\1\0\1\10\4\0\4\10\1\217\24\10\17\0\1\10"+
    "\3\0\1\5\1\6\1\7\102\0\2\220\1\63\1\0"+
    "\5\220\1\0\1\220\4\0\1\220\1\0\1\220\1\0"+
    "\1\220\1\0\1\220\1\63\1\0\1\220\4\0\1\220"+
    "\6\0\4\220\30\0\1\221\1\62\1\63\2\0\3\221"+
    "\1\67\1\70\1\71\10\0\1\71\2\0\1\63\6\0"+
    "\1\67\6\0\1\62\3\221\26\0\13\10\1\0\1\10"+
    "\4\0\4\10\1\222\24\10\17\0\1\10\24\145\1\223"+
    "\1\177\152\145\125\146\1\200\1\224\51\146\6\0\13\10"+
    "\1\0\1\10\4\0\5\10\1\225\23\10\17\0\1\10"+
    "\6\0\13\10\1\0\1\10\4\0\3\10\1\226\25\10"+
    "\17\0\1\10\6\0\13\10\1\0\1\10\4\0\14\10"+
    "\1\227\14\10\17\0\1\10\6\0\13\10\1\0\1\10"+
    "\4\0\4\10\1\230\24\10\17\0\1\10\6\0\13\10"+
    "\1\0\1\10\4\0\1\10\1\231\27\10\17\0\1\10"+
    "\6\0\13\10\1\0\1\10\4\0\14\10\1\232\14\10"+
    "\17\0\1\10\6\0\13\10\1\0\1\10\4\0\3\10"+
    "\1\233\25\10\17\0\1\10\6\0\13\10\1\0\1\10"+
    "\4\0\3\10\1\234\25\10\17\0\1\10\6\0\13\10"+
    "\1\0\1\10\4\0\4\10\1\235\24\10\17\0\1\10"+
    "\10\0\2\236\1\63\1\0\5\236\1\0\1\236\4\0"+
    "\1\236\1\0\1\236\1\0\1\236\1\0\1\236\1\63"+
    "\1\0\1\236\4\0\1\236\6\0\4\236\30\0\1\237"+
    "\1\62\1\63\2\0\3\237\1\67\1\70\1\71\10\0"+
    "\1\71\2\0\1\63\6\0\1\67\6\0\1\62\3\237"+
    "\20\0\24\145\1\144\1\177\52\145\25\146\1\200\1\144"+
    "\51\146\6\0\13\10\1\0\1\10\4\0\12\10\1\240"+
    "\16\10\17\0\1\10\6\0\13\10\1\0\1\10\4\0"+
    "\17\10\1\241\11\10\17\0\1\10\6\0\13\10\1\0"+
    "\1\10\4\0\12\10\1\242\16\10\17\0\1\10\6\0"+
    "\13\10\1\0\1\10\4\0\13\10\1\243\15\10\17\0"+
    "\1\10\10\0\2\244\1\63\1\0\5\244\1\0\1\244"+
    "\4\0\1\244\1\0\1\244\1\0\1\244\1\0\1\244"+
    "\1\63\1\0\1\244\4\0\1\244\6\0\4\244\30\0"+
    "\1\245\1\62\1\63\2\0\3\245\1\67\1\70\1\71"+
    "\10\0\1\71\2\0\1\63\6\0\1\67\6\0\1\62"+
    "\3\245\26\0\13\10\1\0\1\10\4\0\4\10\1\246"+
    "\24\10\17\0\1\10\6\0\13\10\1\0\1\10\4\0"+
    "\15\10\1\247\13\10\17\0\1\10\10\0\2\250\1\63"+
    "\1\0\5\250\1\0\1\250\4\0\1\250\1\0\1\250"+
    "\1\0\1\250\1\0\1\250\1\63\1\0\1\250\4\0"+
    "\1\250\6\0\4\250\30\0\1\251\1\62\1\63\2\0"+
    "\3\251\1\67\1\70\1\71\10\0\1\71\2\0\1\63"+
    "\6\0\1\67\6\0\1\62\3\251\26\0\13\10\1\0"+
    "\1\10\4\0\16\10\1\252\12\10\17\0\1\10\6\0"+
    "\13\10\1\0\1\10\4\0\4\10\1\253\24\10\17\0"+
    "\1\10\10\0\2\254\1\63\1\0\5\254\1\0\1\254"+
    "\4\0\1\254\1\0\1\254\1\0\1\254\1\0\1\254"+
    "\1\63\1\0\1\254\4\0\1\254\6\0\4\254\30\0"+
    "\1\255\1\62\1\63\2\0\3\255\1\67\1\70\1\71"+
    "\10\0\1\71\2\0\1\63\6\0\1\67\6\0\1\62"+
    "\3\255\26\0\13\10\1\0\1\10\4\0\4\10\1\256"+
    "\24\10\17\0\1\10\10\0\2\257\1\63\1\0\5\257"+
    "\1\0\1\257\4\0\1\257\1\0\1\257\1\0\1\257"+
    "\1\0\1\257\1\63\1\0\1\257\4\0\1\257\6\0"+
    "\4\257\30\0\1\260\1\62\1\63\2\0\3\260\1\67"+
    "\1\70\1\71\10\0\1\71\2\0\1\63\6\0\1\67"+
    "\6\0\1\62\3\260\26\0\13\10\1\0\1\10\4\0"+
    "\1\261\30\10\17\0\1\10\10\0\2\262\1\63\1\0"+
    "\5\262\1\0\1\262\4\0\1\262\1\0\1\262\1\0"+
    "\1\262\1\0\1\262\1\63\1\0\1\262\4\0\1\262"+
    "\6\0\4\262\30\0\1\263\1\62\1\63\2\0\3\263"+
    "\1\67\1\70\1\71\10\0\1\71\2\0\1\63\6\0"+
    "\1\67\6\0\1\62\3\263\26\0\13\10\1\0\1\10"+
    "\4\0\13\10\1\264\15\10\17\0\1\10\10\0\2\265"+
    "\1\63\1\0\5\265\1\0\1\265\4\0\1\265\1\0"+
    "\1\265\1\0\1\265\1\0\1\265\1\63\1\0\1\265"+
    "\4\0\1\265\6\0\4\265\30\0\1\266\1\62\1\63"+
    "\2\0\3\266\1\67\1\70\1\71\10\0\1\71\2\0"+
    "\1\63\6\0\1\67\6\0\1\62\3\266\26\0\13\10"+
    "\1\0\1\10\4\0\15\10\1\267\13\10\17\0\1\10"+
    "\10\0\2\270\1\63\1\0\5\270\1\0\1\270\4\0"+
    "\1\270\1\0\1\270\1\0\1\270\1\0\1\270\1\63"+
    "\1\0\1\270\4\0\1\270\6\0\4\270\30\0\1\271"+
    "\1\62\1\63\2\0\3\271\1\67\1\70\1\71\10\0"+
    "\1\71\2\0\1\63\6\0\1\67\6\0\1\62\3\271"+
    "\26\0\13\10\1\0\1\10\4\0\3\10\1\272\25\10"+
    "\17\0\1\10\10\0\2\273\1\63\1\0\5\273\1\0"+
    "\1\273\4\0\1\273\1\0\1\273\1\0\1\273\1\0"+
    "\1\273\1\63\1\0\1\273\4\0\1\273\6\0\4\273"+
    "\30\0\1\274\1\62\1\63\2\0\3\274\1\67\1\70"+
    "\1\71\10\0\1\71\2\0\1\63\6\0\1\67\6\0"+
    "\1\62\3\274\26\0\13\10\1\0\1\10\4\0\4\10"+
    "\1\275\24\10\17\0\1\10\10\0\2\276\1\63\1\0"+
    "\5\276\1\0\1\276\4\0\1\276\1\0\1\276\1\0"+
    "\1\276\1\0\1\276\1\63\1\0\1\276\4\0\1\276"+
    "\6\0\4\276\30\0\1\277\1\62\1\63\2\0\3\277"+
    "\1\67\1\70\1\71\10\0\1\71\2\0\1\63\6\0"+
    "\1\67\6\0\1\62\3\277\30\0\2\300\1\63\1\0"+
    "\5\300\1\0\1\300\4\0\1\300\1\0\1\300\1\0"+
    "\1\300\1\0\1\300\1\63\1\0\1\300\4\0\1\300"+
    "\6\0\4\300\30\0\1\301\1\62\1\63\2\0\3\301"+
    "\1\67\1\70\1\71\10\0\1\71\2\0\1\63\6\0"+
    "\1\67\6\0\1\62\3\301\30\0\2\302\1\63\1\0"+
    "\5\302\1\0\1\302\4\0\1\302\1\0\1\302\1\0"+
    "\1\302\1\0\1\302\1\63\1\0\1\302\4\0\1\302"+
    "\6\0\4\302\30\0\1\303\1\62\1\63\2\0\3\303"+
    "\1\67\1\70\1\71\10\0\1\71\2\0\1\63\6\0"+
    "\1\67\6\0\1\62\3\303\30\0\2\304\1\63\1\0"+
    "\5\304\1\0\1\304\4\0\1\304\1\0\1\304\1\0"+
    "\1\304\1\0\1\304\1\63\1\0\1\304\4\0\1\304"+
    "\6\0\4\304\30\0\1\305\1\62\1\63\2\0\3\305"+
    "\1\67\1\70\1\71\10\0\1\71\2\0\1\63\6\0"+
    "\1\67\6\0\1\62\3\305\32\0\1\63\23\0\1\63"+
    "\51\0\1\306\1\62\1\63\2\0\3\306\1\67\1\70"+
    "\1\71\10\0\1\71\2\0\1\63\6\0\1\67\6\0"+
    "\1\62\3\306\30\0\1\307\1\62\1\63\2\0\3\307"+
    "\1\67\1\70\1\71\10\0\1\71\2\0\1\63\6\0"+
    "\1\67\6\0\1\62\3\307\30\0\1\310\1\62\1\63"+
    "\2\0\3\310\1\67\1\70\1\71\10\0\1\71\2\0"+
    "\1\63\6\0\1\67\6\0\1\62\3\310\30\0\1\311"+
    "\1\62\1\63\2\0\3\311\1\67\1\70\1\71\10\0"+
    "\1\71\2\0\1\63\6\0\1\67\6\0\1\62\3\311"+
    "\30\0\2\62\1\63\2\0\3\62\1\67\1\70\1\71"+
    "\10\0\1\71\2\0\1\63\6\0\1\67\6\0\4\62"+
    "\20\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[10240];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\1\1\1\11\10\1\1\11\22\1\4\11"+
    "\2\1\3\11\2\1\3\11\2\1\1\11\2\1\1\11"+
    "\1\0\4\1\1\0\41\1\2\11\5\1\1\0\1\1"+
    "\1\11\31\1\4\0\21\1\2\0\35\1\1\0\2\1"+
    "\1\0\2\1\1\0\2\1\1\0\2\1\1\0\1\1"+
    "\1\0\1\1\1\0\1\1\1\0\5\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[201];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  YakshaLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return TokenType.BAD_CHARACTER;
            } 
            // fall through
          case 48: break;
          case 2: 
            { return YakshaTypes.NL;
            } 
            // fall through
          case 49: break;
          case 3: 
            { return YakshaTypes.S;
            } 
            // fall through
          case 50: break;
          case 4: 
            { return YakshaTypes.COMMENT;
            } 
            // fall through
          case 51: break;
          case 5: 
            { return YakshaTypes.IDENTIFIER;
            } 
            // fall through
          case 52: break;
          case 6: 
            { return YakshaTypes.NUMBER;
            } 
            // fall through
          case 53: break;
          case 7: 
            { return YakshaTypes.OPERATOR_DOT;
            } 
            // fall through
          case 54: break;
          case 8: 
            { return YakshaTypes.OPERATOR_PLUS;
            } 
            // fall through
          case 55: break;
          case 9: 
            { return YakshaTypes.STRING;
            } 
            // fall through
          case 56: break;
          case 10: 
            { return YakshaTypes.OPERATOR_OPEN_P;
            } 
            // fall through
          case 57: break;
          case 11: 
            { return YakshaTypes.OPERATOR_CLOSE_P;
            } 
            // fall through
          case 58: break;
          case 12: 
            { return YakshaTypes.OPERATOR_OPEN_SQB;
            } 
            // fall through
          case 59: break;
          case 13: 
            { return YakshaTypes.OPERATOR_CLOSE_SQB;
            } 
            // fall through
          case 60: break;
          case 14: 
            { return YakshaTypes.OPERATOR_MINUS;
            } 
            // fall through
          case 61: break;
          case 15: 
            { return YakshaTypes.OPERATOR_COMPARISON;
            } 
            // fall through
          case 62: break;
          case 16: 
            { return YakshaTypes.OPERATOR_MUL;
            } 
            // fall through
          case 63: break;
          case 17: 
            { return YakshaTypes.OPERATOR_DIV;
            } 
            // fall through
          case 64: break;
          case 18: 
            { return YakshaTypes.OPERATOR_REMAINDER;
            } 
            // fall through
          case 65: break;
          case 19: 
            { return YakshaTypes.OPERATOR_EQ;
            } 
            // fall through
          case 66: break;
          case 20: 
            { return YakshaTypes.OPERATOR_AT;
            } 
            // fall through
          case 67: break;
          case 21: 
            { return YakshaTypes.OPERATOR_COLON;
            } 
            // fall through
          case 68: break;
          case 22: 
            { return YakshaTypes.OPERATOR_COMMA;
            } 
            // fall through
          case 69: break;
          case 23: 
            { return YakshaTypes.KW_AS;
            } 
            // fall through
          case 70: break;
          case 24: 
            { return YakshaTypes.OPERATOR_OR;
            } 
            // fall through
          case 71: break;
          case 25: 
            { return YakshaTypes.KW_IF;
            } 
            // fall through
          case 72: break;
          case 26: 
            { return YakshaTypes.PRIMITIVE_DATA_TYPE;
            } 
            // fall through
          case 73: break;
          case 27: 
            { return YakshaTypes.OPERATOR_ARROW;
            } 
            // fall through
          case 74: break;
          case 28: 
            { return YakshaTypes.OPERATOR_AND;
            } 
            // fall through
          case 75: break;
          case 29: 
            { return YakshaTypes.KW_DEL;
            } 
            // fall through
          case 76: break;
          case 30: 
            { return YakshaTypes.KW_DEF;
            } 
            // fall through
          case 77: break;
          case 31: 
            { return YakshaTypes.OPERATOR_NOT;
            } 
            // fall through
          case 78: break;
          case 32: 
            { return YakshaTypes.I;
            } 
            // fall through
          case 79: break;
          case 33: 
            { return YakshaTypes.KW_ELSE;
            } 
            // fall through
          case 80: break;
          case 34: 
            { return YakshaTypes.KW_ELIF;
            } 
            // fall through
          case 81: break;
          case 35: 
            { return YakshaTypes.KW_PASS;
            } 
            // fall through
          case 82: break;
          case 36: 
            { return YakshaTypes.KW_TRUE;
            } 
            // fall through
          case 83: break;
          case 37: 
            { return YakshaTypes.KW_NONE;
            } 
            // fall through
          case 84: break;
          case 38: 
            { return YakshaTypes.KW_FALSE;
            } 
            // fall through
          case 85: break;
          case 39: 
            { return YakshaTypes.KW_BREAK;
            } 
            // fall through
          case 86: break;
          case 40: 
            { return YakshaTypes.KW_CCODE;
            } 
            // fall through
          case 87: break;
          case 41: 
            { return YakshaTypes.KW_CLASS;
            } 
            // fall through
          case 88: break;
          case 42: 
            { return YakshaTypes.KW_DEFER;
            } 
            // fall through
          case 89: break;
          case 43: 
            { return YakshaTypes.KW_WHILE;
            } 
            // fall through
          case 90: break;
          case 44: 
            { return YakshaTypes.KW_RETURN;
            } 
            // fall through
          case 91: break;
          case 45: 
            { return YakshaTypes.KW_IMPORT;
            } 
            // fall through
          case 92: break;
          case 46: 
            { return YakshaTypes.KW_CONTINUE;
            } 
            // fall through
          case 93: break;
          case 47: 
            { return YakshaTypes.KW_RUNTIMEFEATURE;
            } 
            // fall through
          case 94: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
