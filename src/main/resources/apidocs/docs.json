{
  "libs": {
    "imports": [],
    "global_consts": [],
    "functions": [
      {
        "name": "version",
        "comment": "This returns standard library version\n(Note: this is hardcoded)",
        "return_type": {
          "type": "str"
        },
        "parameters": [],
        "annotations": []
      }
    ],
    "classes": []
  },
  "raylib": {
    "imports": [
      {
        "alias": "c",
        "path": [
          "libs",
          "c"
        ]
      }
    ],
    "global_consts": [
      {
        "name": "BLEND_ADDITIVE",
        "comment": "Blend textures adding colors",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "BLEND_ADD_COLORS",
        "comment": "Blend textures adding colors (alternative)",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "BLEND_ALPHA",
        "comment": "Blend textures considering alpha (default)",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "BLEND_ALPHA_PREMULTIPLY",
        "comment": "Blend premultiplied textures considering alpha",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "BLEND_CUSTOM",
        "comment": "Blend textures using custom src/dst factors (use rlSetBlendMode())",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "BLEND_MULTIPLIED",
        "comment": "Blend textures multiplying colors",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "BLEND_SUBTRACT_COLORS",
        "comment": "Blend textures subtracting colors (alternative)",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "CAMERA_CUSTOM",
        "comment": "Custom camera",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "CAMERA_FIRST_PERSON",
        "comment": "First person camera",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "CAMERA_FREE",
        "comment": "Free camera",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "CAMERA_ORBITAL",
        "comment": "Orbital camera",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "CAMERA_ORTHOGRAPHIC",
        "comment": "Orthographic projection",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "CAMERA_PERSPECTIVE",
        "comment": "Perspective projection",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "CAMERA_THIRD_PERSON",
        "comment": "Third person camera",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "CUBEMAP_LAYOUT_AUTO_DETECT",
        "comment": "Automatically detect layout type",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "CUBEMAP_LAYOUT_CROSS_FOUR_BY_THREE",
        "comment": "Layout is defined by a 4x3 cross with cubemap faces",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "CUBEMAP_LAYOUT_CROSS_THREE_BY_FOUR",
        "comment": "Layout is defined by a 3x4 cross with cubemap faces",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "CUBEMAP_LAYOUT_LINE_HORIZONTAL",
        "comment": "Layout is defined by an horizontal line with faces",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "CUBEMAP_LAYOUT_LINE_VERTICAL",
        "comment": "Layout is defined by a vertical line with faces",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "CUBEMAP_LAYOUT_PANORAMA",
        "comment": "Layout is defined by a panorama image (equirectangular map)",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "FLAG_FULLSCREEN_MODE",
        "comment": "Set to run program in fullscreen",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "FLAG_INTERLACED_HINT",
        "comment": "Set to try enabling interlaced video format (for V3D)",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "FLAG_MSAA_4X_HINT",
        "comment": "Set to try enabling MSAA 4X",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "FLAG_VSYNC_HINT",
        "comment": "Set to try enabling V-Sync on GPU",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "FLAG_WINDOW_ALWAYS_RUN",
        "comment": "Set to allow windows running while minimized",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "FLAG_WINDOW_HIDDEN",
        "comment": "Set to hide window",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "FLAG_WINDOW_HIGHDPI",
        "comment": "Set to support HighDPI",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "FLAG_WINDOW_MAXIMIZED",
        "comment": "Set to maximize window (expanded to monitor)",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "FLAG_WINDOW_MINIMIZED",
        "comment": "Set to minimize window (iconify)",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "FLAG_WINDOW_MOUSE_PASSTHROUGH",
        "comment": "Set to support mouse passthrough, only supported when FLAG_WINDOW_UNDECORATED",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "FLAG_WINDOW_RESIZABLE",
        "comment": "Set to allow resizable window",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "FLAG_WINDOW_TOPMOST",
        "comment": "Set to window always on top",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "FLAG_WINDOW_TRANSPARENT",
        "comment": "Set to allow transparent framebuffer",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "FLAG_WINDOW_UNDECORATED",
        "comment": "Set to disable window decoration (frame and buttons)",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "FLAG_WINDOW_UNFOCUSED",
        "comment": "Set to window non focused",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "FONT_BITMAP",
        "comment": "Bitmap font generation, no anti-aliasing",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "FONT_DEFAULT",
        "comment": "Default font generation, anti-aliased",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "FONT_SDF",
        "comment": "SDF font generation, requires external shader",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "GAMEPAD_AXIS_LEFT_TRIGGER",
        "comment": "Gamepad back trigger left, pressure level: [1..-1]",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "GAMEPAD_AXIS_LEFT_X",
        "comment": "Gamepad left stick X axis",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "GAMEPAD_AXIS_LEFT_Y",
        "comment": "Gamepad left stick Y axis",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "GAMEPAD_AXIS_RIGHT_TRIGGER",
        "comment": "Gamepad back trigger right, pressure level: [1..-1]",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "GAMEPAD_AXIS_RIGHT_X",
        "comment": "Gamepad right stick X axis",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "GAMEPAD_AXIS_RIGHT_Y",
        "comment": "Gamepad right stick Y axis",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "GAMEPAD_BUTTON_LEFT_FACE_DOWN",
        "comment": "Gamepad left DPAD down button",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "GAMEPAD_BUTTON_LEFT_FACE_LEFT",
        "comment": "Gamepad left DPAD left button",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "GAMEPAD_BUTTON_LEFT_FACE_RIGHT",
        "comment": "Gamepad left DPAD right button",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "GAMEPAD_BUTTON_LEFT_FACE_UP",
        "comment": "Gamepad left DPAD up button",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "GAMEPAD_BUTTON_LEFT_THUMB",
        "comment": "Gamepad joystick pressed button left",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "GAMEPAD_BUTTON_LEFT_TRIGGER_1",
        "comment": "Gamepad top/back trigger left (first), it could be a trailing button",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "GAMEPAD_BUTTON_LEFT_TRIGGER_2",
        "comment": "Gamepad top/back trigger left (second), it could be a trailing button",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "GAMEPAD_BUTTON_MIDDLE",
        "comment": "Gamepad center buttons, middle one (i.e. PS3: PS, Xbox: XBOX)",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "GAMEPAD_BUTTON_MIDDLE_LEFT",
        "comment": "Gamepad center buttons, left one (i.e. PS3: Select)",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "GAMEPAD_BUTTON_MIDDLE_RIGHT",
        "comment": "Gamepad center buttons, right one (i.e. PS3: Start)",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "GAMEPAD_BUTTON_RIGHT_FACE_DOWN",
        "comment": "Gamepad right button down (i.e. PS3: Cross, Xbox: A)",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "GAMEPAD_BUTTON_RIGHT_FACE_LEFT",
        "comment": "Gamepad right button left (i.e. PS3: Circle, Xbox: B)",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "GAMEPAD_BUTTON_RIGHT_FACE_RIGHT",
        "comment": "Gamepad right button right (i.e. PS3: Square, Xbox: X)",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "GAMEPAD_BUTTON_RIGHT_FACE_UP",
        "comment": "Gamepad right button up (i.e. PS3: Triangle, Xbox: Y)",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "GAMEPAD_BUTTON_RIGHT_THUMB",
        "comment": "Gamepad joystick pressed button right",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "GAMEPAD_BUTTON_RIGHT_TRIGGER_1",
        "comment": "Gamepad top/back trigger right (one), it could be a trailing button",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "GAMEPAD_BUTTON_RIGHT_TRIGGER_2",
        "comment": "Gamepad top/back trigger right (second), it could be a trailing button",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "GAMEPAD_BUTTON_UNKNOWN",
        "comment": "Unknown button, just for error checking",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "GESTURE_DOUBLETAP",
        "comment": "Double tap gesture",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "GESTURE_DRAG",
        "comment": "Drag gesture",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "GESTURE_HOLD",
        "comment": "Hold gesture",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "GESTURE_NONE",
        "comment": "No gesture",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "GESTURE_PINCH_IN",
        "comment": "Pinch in gesture",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "GESTURE_PINCH_OUT",
        "comment": "Pinch out gesture",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "GESTURE_SWIPE_DOWN",
        "comment": "Swipe down gesture",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "GESTURE_SWIPE_LEFT",
        "comment": "Swipe left gesture",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "GESTURE_SWIPE_RIGHT",
        "comment": "Swipe right gesture",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "GESTURE_SWIPE_UP",
        "comment": "Swipe up gesture",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "GESTURE_TAP",
        "comment": "Tap gesture",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "KEY_A",
        "comment": "Key: A | a",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "KEY_APOSTROPHE",
        "comment": "Key: '",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "KEY_B",
        "comment": "Key: B | b",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "KEY_BACK",
        "comment": "Key: Android back button",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "KEY_BACKSLASH",
        "comment": "Key: '\\'",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "KEY_BACKSPACE",
        "comment": "Key: Backspace",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "KEY_C",
        "comment": "Key: C | c",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "KEY_CAPS_LOCK",
        "comment": "Key: Caps lock",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "KEY_COMMA",
        "comment": "Key: ,",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "KEY_D",
        "comment": "Key: D | d",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "KEY_DELETE",
        "comment": "Key: Del",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "KEY_DOWN",
        "comment": "Key: Cursor down",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "KEY_E",
        "comment": "Key: E | e",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "KEY_EIGHT",
        "comment": "Key: 8",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "KEY_END",
        "comment": "Key: End",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "KEY_ENTER",
        "comment": "Key: Enter",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "KEY_EQUAL",
        "comment": "Key: =",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "KEY_ESCAPE",
        "comment": "Key: Esc",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "KEY_F",
        "comment": "Key: F | f",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "KEY_F1",
        "comment": "Key: F1",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "KEY_F10",
        "comment": "Key: F10",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "KEY_F11",
        "comment": "Key: F11",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "KEY_F12",
        "comment": "Key: F12",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "KEY_F2",
        "comment": "Key: F2",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "KEY_F3",
        "comment": "Key: F3",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "KEY_F4",
        "comment": "Key: F4",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "KEY_F5",
        "comment": "Key: F5",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "KEY_F6",
        "comment": "Key: F6",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "KEY_F7",
        "comment": "Key: F7",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "KEY_F8",
        "comment": "Key: F8",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "KEY_F9",
        "comment": "Key: F9",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "KEY_FIVE",
        "comment": "Key: 5",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "KEY_FOUR",
        "comment": "Key: 4",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "KEY_G",
        "comment": "Key: G | g",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "KEY_GRAVE",
        "comment": "Key: `",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "KEY_H",
        "comment": "Key: H | h",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "KEY_HOME",
        "comment": "Key: Home",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "KEY_I",
        "comment": "Key: I | i",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "KEY_INSERT",
        "comment": "Key: Ins",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "KEY_J",
        "comment": "Key: J | j",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "KEY_K",
        "comment": "Key: K | k",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "KEY_KB_MENU",
        "comment": "Key: KB menu",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "KEY_KP_0",
        "comment": "Key: Keypad 0",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "KEY_KP_1",
        "comment": "Key: Keypad 1",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "KEY_KP_2",
        "comment": "Key: Keypad 2",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "KEY_KP_3",
        "comment": "Key: Keypad 3",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "KEY_KP_4",
        "comment": "Key: Keypad 4",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "KEY_KP_5",
        "comment": "Key: Keypad 5",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "KEY_KP_6",
        "comment": "Key: Keypad 6",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "KEY_KP_7",
        "comment": "Key: Keypad 7",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "KEY_KP_8",
        "comment": "Key: Keypad 8",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "KEY_KP_9",
        "comment": "Key: Keypad 9",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "KEY_KP_ADD",
        "comment": "Key: Keypad +",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "KEY_KP_DECIMAL",
        "comment": "Key: Keypad .",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "KEY_KP_DIVIDE",
        "comment": "Key: Keypad /",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "KEY_KP_ENTER",
        "comment": "Key: Keypad Enter",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "KEY_KP_EQUAL",
        "comment": "Key: Keypad =",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "KEY_KP_MULTIPLY",
        "comment": "Key: Keypad *",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "KEY_KP_SUBTRACT",
        "comment": "Key: Keypad -",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "KEY_L",
        "comment": "Key: L | l",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "KEY_LEFT",
        "comment": "Key: Cursor left",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "KEY_LEFT_ALT",
        "comment": "Key: Alt left",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "KEY_LEFT_BRACKET",
        "comment": "Key: [",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "KEY_LEFT_CONTROL",
        "comment": "Key: Control left",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "KEY_LEFT_SHIFT",
        "comment": "Key: Shift left",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "KEY_LEFT_SUPER",
        "comment": "Key: Super left",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "KEY_M",
        "comment": "Key: M | m",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "KEY_MENU",
        "comment": "Key: Android menu button",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "KEY_MINUS",
        "comment": "Key: -",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "KEY_N",
        "comment": "Key: N | n",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "KEY_NINE",
        "comment": "Key: 9",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "KEY_NULL",
        "comment": "Key: NULL, used for no key pressed",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "KEY_NUM_LOCK",
        "comment": "Key: Num lock",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "KEY_O",
        "comment": "Key: O | o",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "KEY_ONE",
        "comment": "Key: 1",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "KEY_P",
        "comment": "Key: P | p",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "KEY_PAGE_DOWN",
        "comment": "Key: Page down",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "KEY_PAGE_UP",
        "comment": "Key: Page up",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "KEY_PAUSE",
        "comment": "Key: Pause",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "KEY_PERIOD",
        "comment": "Key: .",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "KEY_PRINT_SCREEN",
        "comment": "Key: Print screen",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "KEY_Q",
        "comment": "Key: Q | q",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "KEY_R",
        "comment": "Key: R | r",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "KEY_RIGHT",
        "comment": "Key: Cursor right",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "KEY_RIGHT_ALT",
        "comment": "Key: Alt right",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "KEY_RIGHT_BRACKET",
        "comment": "Key: ]",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "KEY_RIGHT_CONTROL",
        "comment": "Key: Control right",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "KEY_RIGHT_SHIFT",
        "comment": "Key: Shift right",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "KEY_RIGHT_SUPER",
        "comment": "Key: Super right",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "KEY_S",
        "comment": "Key: S | s",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "KEY_SCROLL_LOCK",
        "comment": "Key: Scroll down",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "KEY_SEMICOLON",
        "comment": "Key: ;",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "KEY_SEVEN",
        "comment": "Key: 7",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "KEY_SIX",
        "comment": "Key: 6",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "KEY_SLASH",
        "comment": "Key: /",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "KEY_SPACE",
        "comment": "Key: Space",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "KEY_T",
        "comment": "Key: T | t",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "KEY_TAB",
        "comment": "Key: Tab",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "KEY_THREE",
        "comment": "Key: 3",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "KEY_TWO",
        "comment": "Key: 2",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "KEY_U",
        "comment": "Key: U | u",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "KEY_UP",
        "comment": "Key: Cursor up",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "KEY_V",
        "comment": "Key: V | v",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "KEY_VOLUME_DOWN",
        "comment": "Key: Android volume down button",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "KEY_VOLUME_UP",
        "comment": "Key: Android volume up button",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "KEY_W",
        "comment": "Key: W | w",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "KEY_X",
        "comment": "Key: X | x",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "KEY_Y",
        "comment": "Key: Y | y",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "KEY_Z",
        "comment": "Key: Z | z",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "KEY_ZERO",
        "comment": "Key: 0",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "LOG_ALL",
        "comment": "Display all logs",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "LOG_DEBUG",
        "comment": "Debug logging, used for internal debugging, it should be disabled on release builds",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "LOG_ERROR",
        "comment": "Error logging, used on unrecoverable failures",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "LOG_FATAL",
        "comment": "Fatal logging, used to abort program: exit(EXIT_FAILURE)",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "LOG_INFO",
        "comment": "Info logging, used for program execution info",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "LOG_NONE",
        "comment": "Disable logging",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "LOG_TRACE",
        "comment": "Trace logging, intended for internal use only",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "LOG_WARNING",
        "comment": "Warning logging, used on recoverable failures",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "MATERIAL_MAP_ALBEDO",
        "comment": "Albedo material (same as: MATERIAL_MAP_DIFFUSE)",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "MATERIAL_MAP_BRDF",
        "comment": "Brdf material",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "MATERIAL_MAP_CUBEMAP",
        "comment": "Cubemap material (NOTE: Uses GL_TEXTURE_CUBE_MAP)",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "MATERIAL_MAP_EMISSION",
        "comment": "Emission material",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "MATERIAL_MAP_HEIGHT",
        "comment": "Heightmap material",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "MATERIAL_MAP_IRRADIANCE",
        "comment": "Irradiance material (NOTE: Uses GL_TEXTURE_CUBE_MAP)",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "MATERIAL_MAP_METALNESS",
        "comment": "Metalness material (same as: MATERIAL_MAP_SPECULAR)",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "MATERIAL_MAP_NORMAL",
        "comment": "Normal material",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "MATERIAL_MAP_OCCLUSION",
        "comment": "Ambient occlusion material",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "MATERIAL_MAP_PREFILTER",
        "comment": "Prefilter material (NOTE: Uses GL_TEXTURE_CUBE_MAP)",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "MATERIAL_MAP_ROUGHNESS",
        "comment": "Roughness material",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "MOUSE_BUTTON_BACK",
        "comment": "Mouse button back (advanced mouse device)",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "MOUSE_BUTTON_EXTRA",
        "comment": "Mouse button extra (advanced mouse device)",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "MOUSE_BUTTON_FORWARD",
        "comment": "Mouse button fordward (advanced mouse device)",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "MOUSE_BUTTON_LEFT",
        "comment": "Mouse button left",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "MOUSE_BUTTON_MIDDLE",
        "comment": "Mouse button middle (pressed wheel)",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "MOUSE_BUTTON_RIGHT",
        "comment": "Mouse button right",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "MOUSE_BUTTON_SIDE",
        "comment": "Mouse button side (advanced mouse device)",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "MOUSE_CURSOR_ARROW",
        "comment": "Arrow shape",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "MOUSE_CURSOR_CROSSHAIR",
        "comment": "Cross shape",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "MOUSE_CURSOR_DEFAULT",
        "comment": "Default pointer shape",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "MOUSE_CURSOR_IBEAM",
        "comment": "Text writing cursor shape",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "MOUSE_CURSOR_NOT_ALLOWED",
        "comment": "The operation-not-allowed shape",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "MOUSE_CURSOR_POINTING_HAND",
        "comment": "Pointing hand cursor",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "MOUSE_CURSOR_RESIZE_ALL",
        "comment": "The omni-directional resize/move cursor shape",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "MOUSE_CURSOR_RESIZE_EW",
        "comment": "Horizontal resize/move arrow shape",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "MOUSE_CURSOR_RESIZE_NESW",
        "comment": "The top-right to bottom-left diagonal resize/move arrow shape",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "MOUSE_CURSOR_RESIZE_NS",
        "comment": "Vertical resize/move arrow shape",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "MOUSE_CURSOR_RESIZE_NWSE",
        "comment": "Top-left to bottom-right diagonal resize/move arrow shape",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "NPATCH_NINE_PATCH",
        "comment": "Npatch layout: 3x3 tiles",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "NPATCH_THREE_PATCH_HORIZONTAL",
        "comment": "Npatch layout: 3x1 tiles",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "NPATCH_THREE_PATCH_VERTICAL",
        "comment": "Npatch layout: 1x3 tiles",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "PIXELFORMAT_COMPRESSED_ASTC_4x4_RGBA",
        "comment": "8 bpp",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "PIXELFORMAT_COMPRESSED_ASTC_8x8_RGBA",
        "comment": "2 bpp",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "PIXELFORMAT_COMPRESSED_DXT1_RGB",
        "comment": "4 bpp (no alpha)",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "PIXELFORMAT_COMPRESSED_DXT1_RGBA",
        "comment": "4 bpp (1 bit alpha)",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "PIXELFORMAT_COMPRESSED_DXT3_RGBA",
        "comment": "8 bpp",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "PIXELFORMAT_COMPRESSED_DXT5_RGBA",
        "comment": "8 bpp",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "PIXELFORMAT_COMPRESSED_ETC1_RGB",
        "comment": "4 bpp",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "PIXELFORMAT_COMPRESSED_ETC2_EAC_RGBA",
        "comment": "8 bpp",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "PIXELFORMAT_COMPRESSED_ETC2_RGB",
        "comment": "4 bpp",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "PIXELFORMAT_COMPRESSED_PVRT_RGB",
        "comment": "4 bpp",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "PIXELFORMAT_COMPRESSED_PVRT_RGBA",
        "comment": "4 bpp",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "PIXELFORMAT_UNCOMPRESSED_GRAYSCALE",
        "comment": "8 bit per pixel (no alpha)",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "PIXELFORMAT_UNCOMPRESSED_GRAY_ALPHA",
        "comment": "8*2 bpp (2 channels)",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "PIXELFORMAT_UNCOMPRESSED_R32",
        "comment": "32 bpp (1 channel - float)",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "PIXELFORMAT_UNCOMPRESSED_R32G32B32",
        "comment": "32*3 bpp (3 channels - float)",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "PIXELFORMAT_UNCOMPRESSED_R32G32B32A32",
        "comment": "32*4 bpp (4 channels - float)",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "PIXELFORMAT_UNCOMPRESSED_R4G4B4A4",
        "comment": "16 bpp (4 bit alpha)",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "PIXELFORMAT_UNCOMPRESSED_R5G5B5A1",
        "comment": "16 bpp (1 bit alpha)",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "PIXELFORMAT_UNCOMPRESSED_R5G6B5",
        "comment": "16 bpp",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "PIXELFORMAT_UNCOMPRESSED_R8G8B8",
        "comment": "24 bpp",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "PIXELFORMAT_UNCOMPRESSED_R8G8B8A8",
        "comment": "32 bpp",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "SHADER_ATTRIB_FLOAT",
        "comment": "Shader attribute type: float",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "SHADER_ATTRIB_VEC2",
        "comment": "Shader attribute type: vec2 (2 float)",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "SHADER_ATTRIB_VEC3",
        "comment": "Shader attribute type: vec3 (3 float)",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "SHADER_ATTRIB_VEC4",
        "comment": "Shader attribute type: vec4 (4 float)",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "SHADER_LOC_COLOR_AMBIENT",
        "comment": "Shader location: vector uniform: ambient color",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "SHADER_LOC_COLOR_DIFFUSE",
        "comment": "Shader location: vector uniform: diffuse color",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "SHADER_LOC_COLOR_SPECULAR",
        "comment": "Shader location: vector uniform: specular color",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "SHADER_LOC_MAP_ALBEDO",
        "comment": "Shader location: sampler2d texture: albedo (same as: SHADER_LOC_MAP_DIFFUSE)",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "SHADER_LOC_MAP_BRDF",
        "comment": "Shader location: sampler2d texture: brdf",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "SHADER_LOC_MAP_CUBEMAP",
        "comment": "Shader location: samplerCube texture: cubemap",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "SHADER_LOC_MAP_EMISSION",
        "comment": "Shader location: sampler2d texture: emission",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "SHADER_LOC_MAP_HEIGHT",
        "comment": "Shader location: sampler2d texture: height",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "SHADER_LOC_MAP_IRRADIANCE",
        "comment": "Shader location: samplerCube texture: irradiance",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "SHADER_LOC_MAP_METALNESS",
        "comment": "Shader location: sampler2d texture: metalness (same as: SHADER_LOC_MAP_SPECULAR)",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "SHADER_LOC_MAP_NORMAL",
        "comment": "Shader location: sampler2d texture: normal",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "SHADER_LOC_MAP_OCCLUSION",
        "comment": "Shader location: sampler2d texture: occlusion",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "SHADER_LOC_MAP_PREFILTER",
        "comment": "Shader location: samplerCube texture: prefilter",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "SHADER_LOC_MAP_ROUGHNESS",
        "comment": "Shader location: sampler2d texture: roughness",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "SHADER_LOC_MATRIX_MODEL",
        "comment": "Shader location: matrix uniform: model (transform)",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "SHADER_LOC_MATRIX_MVP",
        "comment": "Shader location: matrix uniform: model-view-projection",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "SHADER_LOC_MATRIX_NORMAL",
        "comment": "Shader location: matrix uniform: normal",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "SHADER_LOC_MATRIX_PROJECTION",
        "comment": "Shader location: matrix uniform: projection",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "SHADER_LOC_MATRIX_VIEW",
        "comment": "Shader location: matrix uniform: view (camera transform)",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "SHADER_LOC_VECTOR_VIEW",
        "comment": "Shader location: vector uniform: view",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "SHADER_LOC_VERTEX_COLOR",
        "comment": "Shader location: vertex attribute: color",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "SHADER_LOC_VERTEX_NORMAL",
        "comment": "Shader location: vertex attribute: normal",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "SHADER_LOC_VERTEX_POSITION",
        "comment": "Shader location: vertex attribute: position",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "SHADER_LOC_VERTEX_TANGENT",
        "comment": "Shader location: vertex attribute: tangent",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "SHADER_LOC_VERTEX_TEXCOORD01",
        "comment": "Shader location: vertex attribute: texcoord01",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "SHADER_LOC_VERTEX_TEXCOORD02",
        "comment": "Shader location: vertex attribute: texcoord02",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "SHADER_UNIFORM_FLOAT",
        "comment": "Shader uniform type: float",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "SHADER_UNIFORM_INT",
        "comment": "Shader uniform type: int",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "SHADER_UNIFORM_IVEC2",
        "comment": "Shader uniform type: ivec2 (2 int)",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "SHADER_UNIFORM_IVEC3",
        "comment": "Shader uniform type: ivec3 (3 int)",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "SHADER_UNIFORM_IVEC4",
        "comment": "Shader uniform type: ivec4 (4 int)",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "SHADER_UNIFORM_SAMPLER2D",
        "comment": "Shader uniform type: sampler2d",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "SHADER_UNIFORM_VEC2",
        "comment": "Shader uniform type: vec2 (2 float)",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "SHADER_UNIFORM_VEC3",
        "comment": "Shader uniform type: vec3 (3 float)",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "SHADER_UNIFORM_VEC4",
        "comment": "Shader uniform type: vec4 (4 float)",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "TEXTURE_FILTER_ANISOTROPIC_16X",
        "comment": "Anisotropic filtering 16x",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "TEXTURE_FILTER_ANISOTROPIC_4X",
        "comment": "Anisotropic filtering 4x",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "TEXTURE_FILTER_ANISOTROPIC_8X",
        "comment": "Anisotropic filtering 8x",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "TEXTURE_FILTER_BILINEAR",
        "comment": "Linear filtering",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "TEXTURE_FILTER_POINT",
        "comment": "No filter, just pixel approximation",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "TEXTURE_FILTER_TRILINEAR",
        "comment": "Trilinear filtering (linear with mipmaps)",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "TEXTURE_WRAP_CLAMP",
        "comment": "Clamps texture to edge pixel in tiled mode",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "TEXTURE_WRAP_MIRROR_CLAMP",
        "comment": "Mirrors and clamps to border the texture in tiled mode",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "TEXTURE_WRAP_MIRROR_REPEAT",
        "comment": "Mirrors and repeats the texture in tiled mode",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "TEXTURE_WRAP_REPEAT",
        "comment": "Repeats texture in tiled mode",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      }
    ],
    "functions": [
      {
        "name": "begin_blend_mode",
        "comment": "Begin blending mode (alpha, additive, multiplied, subtract, custom)",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "mode",
            "datatype": {
              "type": "int"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "begin_drawing",
        "comment": "Setup canvas (framebuffer) to start drawing",
        "return_type": {
          "type": "None"
        },
        "parameters": [],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "begin_mode_2d",
        "comment": "Begin 2D mode with custom camera (2D)",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "p_camera",
            "datatype": {
              "type": "Camera2D"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "begin_mode_3d",
        "comment": "Begin 3D mode with custom camera (3D)",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "p_camera",
            "datatype": {
              "type": "Camera3D"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "begin_scissor_mode",
        "comment": "Begin scissor mode (define screen area for following drawing)",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "x",
            "datatype": {
              "type": "int"
            }
          },
          {
            "name": "y",
            "datatype": {
              "type": "int"
            }
          },
          {
            "name": "width",
            "datatype": {
              "type": "int"
            }
          },
          {
            "name": "height",
            "datatype": {
              "type": "int"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "begin_shader_mode",
        "comment": "Begin custom shader drawing",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "shader",
            "datatype": {
              "type": "Shader"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "begin_texture_mode",
        "comment": "Begin drawing to render texture",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "target",
            "datatype": {
              "type": "RenderTexture2D"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "begin_vr_stereo_mode",
        "comment": "Begin stereo rendering (requires VR simulator)",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "config",
            "datatype": {
              "type": "VrStereoConfig"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "bounding_box",
        "comment": "Factory function for: BoundingBox",
        "return_type": {
          "type": "BoundingBox"
        },
        "parameters": [
          {
            "name": "min",
            "datatype": {
              "type": "Vector3"
            }
          },
          {
            "name": "max",
            "datatype": {
              "type": "Vector3"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "camera",
        "comment": "Factory function for: Camera",
        "return_type": {
          "type": "Camera"
        },
        "parameters": [
          {
            "name": "position",
            "datatype": {
              "type": "Vector3"
            }
          },
          {
            "name": "target",
            "datatype": {
              "type": "Vector3"
            }
          },
          {
            "name": "up",
            "datatype": {
              "type": "Vector3"
            }
          },
          {
            "name": "fovy",
            "datatype": {
              "type": "float"
            }
          },
          {
            "name": "projection",
            "datatype": {
              "type": "int"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "camera_2d",
        "comment": "Factory function for: Camera2D",
        "return_type": {
          "type": "Camera2D"
        },
        "parameters": [
          {
            "name": "offset",
            "datatype": {
              "type": "Vector2"
            }
          },
          {
            "name": "target",
            "datatype": {
              "type": "Vector2"
            }
          },
          {
            "name": "rotation",
            "datatype": {
              "type": "float"
            }
          },
          {
            "name": "zoom",
            "datatype": {
              "type": "float"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "camera_3d",
        "comment": "Factory function for: Camera3D",
        "return_type": {
          "type": "Camera3D"
        },
        "parameters": [
          {
            "name": "position",
            "datatype": {
              "type": "Vector3"
            }
          },
          {
            "name": "target",
            "datatype": {
              "type": "Vector3"
            }
          },
          {
            "name": "up",
            "datatype": {
              "type": "Vector3"
            }
          },
          {
            "name": "fovy",
            "datatype": {
              "type": "float"
            }
          },
          {
            "name": "projection",
            "datatype": {
              "type": "int"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "change_directory",
        "comment": "Change working directory, return true on success",
        "return_type": {
          "type": "bool"
        },
        "parameters": [
          {
            "name": "dir",
            "datatype": {
              "type": "str"
            }
          }
        ],
        "annotations": [
          {
            "name": "@native",
            "argument": ""
          }
        ]
      },
      {
        "name": "check_collision_box_sphere",
        "comment": "Check collision between box and sphere",
        "return_type": {
          "type": "bool"
        },
        "parameters": [
          {
            "name": "box",
            "datatype": {
              "type": "BoundingBox"
            }
          },
          {
            "name": "center",
            "datatype": {
              "type": "Vector3"
            }
          },
          {
            "name": "radius",
            "datatype": {
              "type": "float"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "check_collision_boxes",
        "comment": "Check collision between two bounding boxes",
        "return_type": {
          "type": "bool"
        },
        "parameters": [
          {
            "name": "box1",
            "datatype": {
              "type": "BoundingBox"
            }
          },
          {
            "name": "box2",
            "datatype": {
              "type": "BoundingBox"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "check_collision_circle_rec",
        "comment": "Check collision between circle and rectangle",
        "return_type": {
          "type": "bool"
        },
        "parameters": [
          {
            "name": "center",
            "datatype": {
              "type": "Vector2"
            }
          },
          {
            "name": "radius",
            "datatype": {
              "type": "float"
            }
          },
          {
            "name": "rec",
            "datatype": {
              "type": "Rectangle"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "check_collision_circles",
        "comment": "Check collision between two circles",
        "return_type": {
          "type": "bool"
        },
        "parameters": [
          {
            "name": "center1",
            "datatype": {
              "type": "Vector2"
            }
          },
          {
            "name": "radius1",
            "datatype": {
              "type": "float"
            }
          },
          {
            "name": "center2",
            "datatype": {
              "type": "Vector2"
            }
          },
          {
            "name": "radius2",
            "datatype": {
              "type": "float"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "check_collision_lines",
        "comment": "Check the collision between two lines defined by two points each, returns collision point by reference",
        "return_type": {
          "type": "bool"
        },
        "parameters": [
          {
            "name": "start_pos1",
            "datatype": {
              "type": "Vector2"
            }
          },
          {
            "name": "end_pos1",
            "datatype": {
              "type": "Vector2"
            }
          },
          {
            "name": "start_pos2",
            "datatype": {
              "type": "Vector2"
            }
          },
          {
            "name": "end_pos2",
            "datatype": {
              "type": "Vector2"
            }
          },
          {
            "name": "collision_point",
            "datatype": {
              "type": "Ptr",
              "arguments": [
                {
                  "type": "Vector2"
                }
              ]
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "check_collision_point_circle",
        "comment": "Check if point is inside circle",
        "return_type": {
          "type": "bool"
        },
        "parameters": [
          {
            "name": "point",
            "datatype": {
              "type": "Vector2"
            }
          },
          {
            "name": "center",
            "datatype": {
              "type": "Vector2"
            }
          },
          {
            "name": "radius",
            "datatype": {
              "type": "float"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "check_collision_point_line",
        "comment": "Check if point belongs to line created between two points [p1] and [p2] with defined margin in pixels [threshold]",
        "return_type": {
          "type": "bool"
        },
        "parameters": [
          {
            "name": "point",
            "datatype": {
              "type": "Vector2"
            }
          },
          {
            "name": "p1",
            "datatype": {
              "type": "Vector2"
            }
          },
          {
            "name": "p2",
            "datatype": {
              "type": "Vector2"
            }
          },
          {
            "name": "threshold",
            "datatype": {
              "type": "int"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "check_collision_point_rec",
        "comment": "Check if point is inside rectangle",
        "return_type": {
          "type": "bool"
        },
        "parameters": [
          {
            "name": "point",
            "datatype": {
              "type": "Vector2"
            }
          },
          {
            "name": "rec",
            "datatype": {
              "type": "Rectangle"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "check_collision_point_triangle",
        "comment": "Check if point is inside a triangle",
        "return_type": {
          "type": "bool"
        },
        "parameters": [
          {
            "name": "point",
            "datatype": {
              "type": "Vector2"
            }
          },
          {
            "name": "p1",
            "datatype": {
              "type": "Vector2"
            }
          },
          {
            "name": "p2",
            "datatype": {
              "type": "Vector2"
            }
          },
          {
            "name": "p3",
            "datatype": {
              "type": "Vector2"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "check_collision_recs",
        "comment": "Check collision between two rectangles",
        "return_type": {
          "type": "bool"
        },
        "parameters": [
          {
            "name": "rec1",
            "datatype": {
              "type": "Rectangle"
            }
          },
          {
            "name": "rec2",
            "datatype": {
              "type": "Rectangle"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "check_collision_spheres",
        "comment": "Check collision between two spheres",
        "return_type": {
          "type": "bool"
        },
        "parameters": [
          {
            "name": "center1",
            "datatype": {
              "type": "Vector3"
            }
          },
          {
            "name": "radius1",
            "datatype": {
              "type": "float"
            }
          },
          {
            "name": "center2",
            "datatype": {
              "type": "Vector3"
            }
          },
          {
            "name": "radius2",
            "datatype": {
              "type": "float"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "clear_background",
        "comment": "Set background color (framebuffer clear color)",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "p_color",
            "datatype": {
              "type": "Color"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "clear_window_state",
        "comment": "Clear window configuration state flags",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "flags",
            "datatype": {
              "type": "u32"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "close_audio_device",
        "comment": "Close the audio device and context",
        "return_type": {
          "type": "None"
        },
        "parameters": [],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "close_window",
        "comment": "Close window and unload OpenGL context",
        "return_type": {
          "type": "None"
        },
        "parameters": [],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "codepoint_to_utf8",
        "comment": "Encode one codepoint into UTF-8 byte array (array length returned as parameter)",
        "return_type": {
          "type": "Const",
          "arguments": [
            {
              "type": "CStr",
              "module": "libs.c"
            }
          ]
        },
        "parameters": [
          {
            "name": "codepoint",
            "datatype": {
              "type": "int"
            }
          },
          {
            "name": "byte_size",
            "datatype": {
              "type": "Ptr",
              "arguments": [
                {
                  "type": "CInt",
                  "module": "libs.c"
                }
              ]
            }
          }
        ],
        "annotations": [
          {
            "name": "@native",
            "argument": ""
          }
        ]
      },
      {
        "name": "color",
        "comment": "Factory function for: Color",
        "return_type": {
          "type": "Color"
        },
        "parameters": [
          {
            "name": "r",
            "datatype": {
              "type": "int"
            }
          },
          {
            "name": "g",
            "datatype": {
              "type": "int"
            }
          },
          {
            "name": "b",
            "datatype": {
              "type": "int"
            }
          },
          {
            "name": "a",
            "datatype": {
              "type": "int"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "color_alpha",
        "comment": "Get color with alpha applied, alpha goes from 0.0f to 1.0f",
        "return_type": {
          "type": "Color"
        },
        "parameters": [
          {
            "name": "p_color",
            "datatype": {
              "type": "Color"
            }
          },
          {
            "name": "alpha",
            "datatype": {
              "type": "float"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "color_alpha_blend",
        "comment": "Get src alpha-blended into dst color with tint",
        "return_type": {
          "type": "Color"
        },
        "parameters": [
          {
            "name": "dst",
            "datatype": {
              "type": "Color"
            }
          },
          {
            "name": "src",
            "datatype": {
              "type": "Color"
            }
          },
          {
            "name": "tint",
            "datatype": {
              "type": "Color"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "color_from_hsv",
        "comment": "Get a Color from HSV values, hue [0..360], saturation/value [0..1]",
        "return_type": {
          "type": "Color"
        },
        "parameters": [
          {
            "name": "hue",
            "datatype": {
              "type": "float"
            }
          },
          {
            "name": "saturation",
            "datatype": {
              "type": "float"
            }
          },
          {
            "name": "value",
            "datatype": {
              "type": "float"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "color_from_normalized",
        "comment": "Get Color from normalized values [0..1]",
        "return_type": {
          "type": "Color"
        },
        "parameters": [
          {
            "name": "normalized",
            "datatype": {
              "type": "Vector4"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "color_normalize",
        "comment": "Get Color normalized as float [0..1]",
        "return_type": {
          "type": "Vector4"
        },
        "parameters": [
          {
            "name": "p_color",
            "datatype": {
              "type": "Color"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "color_to_hsv",
        "comment": "Get HSV values for a Color, hue [0..360], saturation/value [0..1]",
        "return_type": {
          "type": "Vector3"
        },
        "parameters": [
          {
            "name": "p_color",
            "datatype": {
              "type": "Color"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "color_to_int",
        "comment": "Get hexadecimal value for a Color",
        "return_type": {
          "type": "int"
        },
        "parameters": [
          {
            "name": "p_color",
            "datatype": {
              "type": "Color"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "compress_data",
        "comment": "Compress data (DEFLATE algorithm), memory must be MemFree()",
        "return_type": {
          "type": "Ptr",
          "arguments": [
            {
              "type": "CUChar",
              "module": "libs.c"
            }
          ]
        },
        "parameters": [
          {
            "name": "data",
            "datatype": {
              "type": "Const",
              "arguments": [
                {
                  "type": "Ptr",
                  "arguments": [
                    {
                      "type": "CUChar",
                      "module": "libs.c"
                    }
                  ]
                }
              ]
            }
          },
          {
            "name": "data_size",
            "datatype": {
              "type": "int"
            }
          },
          {
            "name": "comp_data_size",
            "datatype": {
              "type": "Ptr",
              "arguments": [
                {
                  "type": "CInt",
                  "module": "libs.c"
                }
              ]
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "decode_data_base64",
        "comment": "Decode Base64 string data, memory must be MemFree()",
        "return_type": {
          "type": "Ptr",
          "arguments": [
            {
              "type": "CUChar",
              "module": "libs.c"
            }
          ]
        },
        "parameters": [
          {
            "name": "data",
            "datatype": {
              "type": "Const",
              "arguments": [
                {
                  "type": "Ptr",
                  "arguments": [
                    {
                      "type": "CUChar",
                      "module": "libs.c"
                    }
                  ]
                }
              ]
            }
          },
          {
            "name": "output_size",
            "datatype": {
              "type": "Ptr",
              "arguments": [
                {
                  "type": "CInt",
                  "module": "libs.c"
                }
              ]
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "decompress_data",
        "comment": "Decompress data (DEFLATE algorithm), memory must be MemFree()",
        "return_type": {
          "type": "Ptr",
          "arguments": [
            {
              "type": "CUChar",
              "module": "libs.c"
            }
          ]
        },
        "parameters": [
          {
            "name": "comp_data",
            "datatype": {
              "type": "Const",
              "arguments": [
                {
                  "type": "Ptr",
                  "arguments": [
                    {
                      "type": "CUChar",
                      "module": "libs.c"
                    }
                  ]
                }
              ]
            }
          },
          {
            "name": "comp_data_size",
            "datatype": {
              "type": "int"
            }
          },
          {
            "name": "data_size",
            "datatype": {
              "type": "Ptr",
              "arguments": [
                {
                  "type": "CInt",
                  "module": "libs.c"
                }
              ]
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "directory_exists",
        "comment": "Check if a directory path exists",
        "return_type": {
          "type": "bool"
        },
        "parameters": [
          {
            "name": "dir_path",
            "datatype": {
              "type": "str"
            }
          }
        ],
        "annotations": [
          {
            "name": "@native",
            "argument": ""
          }
        ]
      },
      {
        "name": "disable_cursor",
        "comment": "Disables cursor (lock cursor)",
        "return_type": {
          "type": "None"
        },
        "parameters": [],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "disable_event_waiting",
        "comment": "Disable waiting for events on EndDrawing(), automatic events polling",
        "return_type": {
          "type": "None"
        },
        "parameters": [],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "draw_billboard",
        "comment": "Draw a billboard texture",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "p_camera",
            "datatype": {
              "type": "Camera"
            }
          },
          {
            "name": "p_texture",
            "datatype": {
              "type": "Texture2D"
            }
          },
          {
            "name": "position",
            "datatype": {
              "type": "Vector3"
            }
          },
          {
            "name": "size",
            "datatype": {
              "type": "float"
            }
          },
          {
            "name": "tint",
            "datatype": {
              "type": "Color"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "draw_billboard_pro",
        "comment": "Draw a billboard texture defined by source and rotation",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "p_camera",
            "datatype": {
              "type": "Camera"
            }
          },
          {
            "name": "p_texture",
            "datatype": {
              "type": "Texture2D"
            }
          },
          {
            "name": "source",
            "datatype": {
              "type": "Rectangle"
            }
          },
          {
            "name": "position",
            "datatype": {
              "type": "Vector3"
            }
          },
          {
            "name": "up",
            "datatype": {
              "type": "Vector3"
            }
          },
          {
            "name": "size",
            "datatype": {
              "type": "Vector2"
            }
          },
          {
            "name": "origin",
            "datatype": {
              "type": "Vector2"
            }
          },
          {
            "name": "rotation",
            "datatype": {
              "type": "float"
            }
          },
          {
            "name": "tint",
            "datatype": {
              "type": "Color"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "draw_billboard_rec",
        "comment": "Draw a billboard texture defined by source",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "p_camera",
            "datatype": {
              "type": "Camera"
            }
          },
          {
            "name": "p_texture",
            "datatype": {
              "type": "Texture2D"
            }
          },
          {
            "name": "source",
            "datatype": {
              "type": "Rectangle"
            }
          },
          {
            "name": "position",
            "datatype": {
              "type": "Vector3"
            }
          },
          {
            "name": "size",
            "datatype": {
              "type": "Vector2"
            }
          },
          {
            "name": "tint",
            "datatype": {
              "type": "Color"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "draw_bounding_box",
        "comment": "Draw bounding box (wires)",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "box",
            "datatype": {
              "type": "BoundingBox"
            }
          },
          {
            "name": "p_color",
            "datatype": {
              "type": "Color"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "draw_circle",
        "comment": "Draw a color-filled circle",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "center_x",
            "datatype": {
              "type": "int"
            }
          },
          {
            "name": "center_y",
            "datatype": {
              "type": "int"
            }
          },
          {
            "name": "radius",
            "datatype": {
              "type": "float"
            }
          },
          {
            "name": "p_color",
            "datatype": {
              "type": "Color"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "draw_circle_3d",
        "comment": "Draw a circle in 3D world space",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "center",
            "datatype": {
              "type": "Vector3"
            }
          },
          {
            "name": "radius",
            "datatype": {
              "type": "float"
            }
          },
          {
            "name": "rotation_axis",
            "datatype": {
              "type": "Vector3"
            }
          },
          {
            "name": "rotation_angle",
            "datatype": {
              "type": "float"
            }
          },
          {
            "name": "p_color",
            "datatype": {
              "type": "Color"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "draw_circle_gradient",
        "comment": "Draw a gradient-filled circle",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "center_x",
            "datatype": {
              "type": "int"
            }
          },
          {
            "name": "center_y",
            "datatype": {
              "type": "int"
            }
          },
          {
            "name": "radius",
            "datatype": {
              "type": "float"
            }
          },
          {
            "name": "color1",
            "datatype": {
              "type": "Color"
            }
          },
          {
            "name": "color2",
            "datatype": {
              "type": "Color"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "draw_circle_lines",
        "comment": "Draw circle outline",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "center_x",
            "datatype": {
              "type": "int"
            }
          },
          {
            "name": "center_y",
            "datatype": {
              "type": "int"
            }
          },
          {
            "name": "radius",
            "datatype": {
              "type": "float"
            }
          },
          {
            "name": "p_color",
            "datatype": {
              "type": "Color"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "draw_circle_sector",
        "comment": "Draw a piece of a circle",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "center",
            "datatype": {
              "type": "Vector2"
            }
          },
          {
            "name": "radius",
            "datatype": {
              "type": "float"
            }
          },
          {
            "name": "start_angle",
            "datatype": {
              "type": "float"
            }
          },
          {
            "name": "end_angle",
            "datatype": {
              "type": "float"
            }
          },
          {
            "name": "segments",
            "datatype": {
              "type": "int"
            }
          },
          {
            "name": "p_color",
            "datatype": {
              "type": "Color"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "draw_circle_sector_lines",
        "comment": "Draw circle sector outline",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "center",
            "datatype": {
              "type": "Vector2"
            }
          },
          {
            "name": "radius",
            "datatype": {
              "type": "float"
            }
          },
          {
            "name": "start_angle",
            "datatype": {
              "type": "float"
            }
          },
          {
            "name": "end_angle",
            "datatype": {
              "type": "float"
            }
          },
          {
            "name": "segments",
            "datatype": {
              "type": "int"
            }
          },
          {
            "name": "p_color",
            "datatype": {
              "type": "Color"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "draw_circle_v",
        "comment": "Draw a color-filled circle (Vector version)",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "center",
            "datatype": {
              "type": "Vector2"
            }
          },
          {
            "name": "radius",
            "datatype": {
              "type": "float"
            }
          },
          {
            "name": "p_color",
            "datatype": {
              "type": "Color"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "draw_cube",
        "comment": "Draw cube",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "position",
            "datatype": {
              "type": "Vector3"
            }
          },
          {
            "name": "width",
            "datatype": {
              "type": "float"
            }
          },
          {
            "name": "height",
            "datatype": {
              "type": "float"
            }
          },
          {
            "name": "length",
            "datatype": {
              "type": "float"
            }
          },
          {
            "name": "p_color",
            "datatype": {
              "type": "Color"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "draw_cube_texture",
        "comment": "Draw cube textured",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "p_texture",
            "datatype": {
              "type": "Texture2D"
            }
          },
          {
            "name": "position",
            "datatype": {
              "type": "Vector3"
            }
          },
          {
            "name": "width",
            "datatype": {
              "type": "float"
            }
          },
          {
            "name": "height",
            "datatype": {
              "type": "float"
            }
          },
          {
            "name": "length",
            "datatype": {
              "type": "float"
            }
          },
          {
            "name": "p_color",
            "datatype": {
              "type": "Color"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "draw_cube_texture_rec",
        "comment": "Draw cube with a region of a texture",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "p_texture",
            "datatype": {
              "type": "Texture2D"
            }
          },
          {
            "name": "source",
            "datatype": {
              "type": "Rectangle"
            }
          },
          {
            "name": "position",
            "datatype": {
              "type": "Vector3"
            }
          },
          {
            "name": "width",
            "datatype": {
              "type": "float"
            }
          },
          {
            "name": "height",
            "datatype": {
              "type": "float"
            }
          },
          {
            "name": "length",
            "datatype": {
              "type": "float"
            }
          },
          {
            "name": "p_color",
            "datatype": {
              "type": "Color"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "draw_cube_v",
        "comment": "Draw cube (Vector version)",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "position",
            "datatype": {
              "type": "Vector3"
            }
          },
          {
            "name": "size",
            "datatype": {
              "type": "Vector3"
            }
          },
          {
            "name": "p_color",
            "datatype": {
              "type": "Color"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "draw_cube_wires",
        "comment": "Draw cube wires",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "position",
            "datatype": {
              "type": "Vector3"
            }
          },
          {
            "name": "width",
            "datatype": {
              "type": "float"
            }
          },
          {
            "name": "height",
            "datatype": {
              "type": "float"
            }
          },
          {
            "name": "length",
            "datatype": {
              "type": "float"
            }
          },
          {
            "name": "p_color",
            "datatype": {
              "type": "Color"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "draw_cube_wires_v",
        "comment": "Draw cube wires (Vector version)",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "position",
            "datatype": {
              "type": "Vector3"
            }
          },
          {
            "name": "size",
            "datatype": {
              "type": "Vector3"
            }
          },
          {
            "name": "p_color",
            "datatype": {
              "type": "Color"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "draw_cylinder",
        "comment": "Draw a cylinder/cone",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "position",
            "datatype": {
              "type": "Vector3"
            }
          },
          {
            "name": "radius_top",
            "datatype": {
              "type": "float"
            }
          },
          {
            "name": "radius_bottom",
            "datatype": {
              "type": "float"
            }
          },
          {
            "name": "height",
            "datatype": {
              "type": "float"
            }
          },
          {
            "name": "slices",
            "datatype": {
              "type": "int"
            }
          },
          {
            "name": "p_color",
            "datatype": {
              "type": "Color"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "draw_cylinder_ex",
        "comment": "Draw a cylinder with base at startPos and top at endPos",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "start_pos",
            "datatype": {
              "type": "Vector3"
            }
          },
          {
            "name": "end_pos",
            "datatype": {
              "type": "Vector3"
            }
          },
          {
            "name": "start_radius",
            "datatype": {
              "type": "float"
            }
          },
          {
            "name": "end_radius",
            "datatype": {
              "type": "float"
            }
          },
          {
            "name": "sides",
            "datatype": {
              "type": "int"
            }
          },
          {
            "name": "p_color",
            "datatype": {
              "type": "Color"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "draw_cylinder_wires",
        "comment": "Draw a cylinder/cone wires",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "position",
            "datatype": {
              "type": "Vector3"
            }
          },
          {
            "name": "radius_top",
            "datatype": {
              "type": "float"
            }
          },
          {
            "name": "radius_bottom",
            "datatype": {
              "type": "float"
            }
          },
          {
            "name": "height",
            "datatype": {
              "type": "float"
            }
          },
          {
            "name": "slices",
            "datatype": {
              "type": "int"
            }
          },
          {
            "name": "p_color",
            "datatype": {
              "type": "Color"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "draw_cylinder_wires_ex",
        "comment": "Draw a cylinder wires with base at startPos and top at endPos",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "start_pos",
            "datatype": {
              "type": "Vector3"
            }
          },
          {
            "name": "end_pos",
            "datatype": {
              "type": "Vector3"
            }
          },
          {
            "name": "start_radius",
            "datatype": {
              "type": "float"
            }
          },
          {
            "name": "end_radius",
            "datatype": {
              "type": "float"
            }
          },
          {
            "name": "sides",
            "datatype": {
              "type": "int"
            }
          },
          {
            "name": "p_color",
            "datatype": {
              "type": "Color"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "draw_ellipse",
        "comment": "Draw ellipse",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "center_x",
            "datatype": {
              "type": "int"
            }
          },
          {
            "name": "center_y",
            "datatype": {
              "type": "int"
            }
          },
          {
            "name": "radius_h",
            "datatype": {
              "type": "float"
            }
          },
          {
            "name": "radius_v",
            "datatype": {
              "type": "float"
            }
          },
          {
            "name": "p_color",
            "datatype": {
              "type": "Color"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "draw_ellipse_lines",
        "comment": "Draw ellipse outline",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "center_x",
            "datatype": {
              "type": "int"
            }
          },
          {
            "name": "center_y",
            "datatype": {
              "type": "int"
            }
          },
          {
            "name": "radius_h",
            "datatype": {
              "type": "float"
            }
          },
          {
            "name": "radius_v",
            "datatype": {
              "type": "float"
            }
          },
          {
            "name": "p_color",
            "datatype": {
              "type": "Color"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "draw_fps",
        "comment": "Draw current FPS",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "pos_x",
            "datatype": {
              "type": "int"
            }
          },
          {
            "name": "pos_y",
            "datatype": {
              "type": "int"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "draw_grid",
        "comment": "Draw a grid (centered at (0, 0, 0))",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "slices",
            "datatype": {
              "type": "int"
            }
          },
          {
            "name": "spacing",
            "datatype": {
              "type": "float"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "draw_line",
        "comment": "Draw a line",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "start_pos_x",
            "datatype": {
              "type": "int"
            }
          },
          {
            "name": "start_pos_y",
            "datatype": {
              "type": "int"
            }
          },
          {
            "name": "end_pos_x",
            "datatype": {
              "type": "int"
            }
          },
          {
            "name": "end_pos_y",
            "datatype": {
              "type": "int"
            }
          },
          {
            "name": "p_color",
            "datatype": {
              "type": "Color"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "draw_line_3d",
        "comment": "Draw a line in 3D world space",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "start_pos",
            "datatype": {
              "type": "Vector3"
            }
          },
          {
            "name": "end_pos",
            "datatype": {
              "type": "Vector3"
            }
          },
          {
            "name": "p_color",
            "datatype": {
              "type": "Color"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "draw_line_bezier",
        "comment": "Draw a line using cubic-bezier curves in-out",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "start_pos",
            "datatype": {
              "type": "Vector2"
            }
          },
          {
            "name": "end_pos",
            "datatype": {
              "type": "Vector2"
            }
          },
          {
            "name": "thick",
            "datatype": {
              "type": "float"
            }
          },
          {
            "name": "p_color",
            "datatype": {
              "type": "Color"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "draw_line_bezier_cubic",
        "comment": "Draw line using cubic bezier curves with 2 control points",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "start_pos",
            "datatype": {
              "type": "Vector2"
            }
          },
          {
            "name": "end_pos",
            "datatype": {
              "type": "Vector2"
            }
          },
          {
            "name": "start_control_pos",
            "datatype": {
              "type": "Vector2"
            }
          },
          {
            "name": "end_control_pos",
            "datatype": {
              "type": "Vector2"
            }
          },
          {
            "name": "thick",
            "datatype": {
              "type": "float"
            }
          },
          {
            "name": "p_color",
            "datatype": {
              "type": "Color"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "draw_line_bezier_quad",
        "comment": "Draw line using quadratic bezier curves with a control point",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "start_pos",
            "datatype": {
              "type": "Vector2"
            }
          },
          {
            "name": "end_pos",
            "datatype": {
              "type": "Vector2"
            }
          },
          {
            "name": "control_pos",
            "datatype": {
              "type": "Vector2"
            }
          },
          {
            "name": "thick",
            "datatype": {
              "type": "float"
            }
          },
          {
            "name": "p_color",
            "datatype": {
              "type": "Color"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "draw_line_ex",
        "comment": "Draw a line defining thickness",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "start_pos",
            "datatype": {
              "type": "Vector2"
            }
          },
          {
            "name": "end_pos",
            "datatype": {
              "type": "Vector2"
            }
          },
          {
            "name": "thick",
            "datatype": {
              "type": "float"
            }
          },
          {
            "name": "p_color",
            "datatype": {
              "type": "Color"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "draw_line_strip",
        "comment": "Draw lines sequence",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "points",
            "datatype": {
              "type": "Ptr",
              "arguments": [
                {
                  "type": "Vector2"
                }
              ]
            }
          },
          {
            "name": "point_count",
            "datatype": {
              "type": "int"
            }
          },
          {
            "name": "p_color",
            "datatype": {
              "type": "Color"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "draw_line_v",
        "comment": "Draw a line (Vector version)",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "start_pos",
            "datatype": {
              "type": "Vector2"
            }
          },
          {
            "name": "end_pos",
            "datatype": {
              "type": "Vector2"
            }
          },
          {
            "name": "p_color",
            "datatype": {
              "type": "Color"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "draw_mesh",
        "comment": "Draw a 3d mesh with material and transform",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "mesh",
            "datatype": {
              "type": "Mesh"
            }
          },
          {
            "name": "material",
            "datatype": {
              "type": "Material"
            }
          },
          {
            "name": "p_transform",
            "datatype": {
              "type": "Matrix"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "draw_mesh_instanced",
        "comment": "Draw multiple mesh instances with material and different transforms",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "mesh",
            "datatype": {
              "type": "Mesh"
            }
          },
          {
            "name": "material",
            "datatype": {
              "type": "Material"
            }
          },
          {
            "name": "transforms",
            "datatype": {
              "type": "Const",
              "arguments": [
                {
                  "type": "Ptr",
                  "arguments": [
                    {
                      "type": "Matrix"
                    }
                  ]
                }
              ]
            }
          },
          {
            "name": "instances",
            "datatype": {
              "type": "int"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "draw_model",
        "comment": "Draw a model (with texture if set)",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "model",
            "datatype": {
              "type": "Model"
            }
          },
          {
            "name": "position",
            "datatype": {
              "type": "Vector3"
            }
          },
          {
            "name": "scale",
            "datatype": {
              "type": "float"
            }
          },
          {
            "name": "tint",
            "datatype": {
              "type": "Color"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "draw_model_ex",
        "comment": "Draw a model with extended parameters",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "model",
            "datatype": {
              "type": "Model"
            }
          },
          {
            "name": "position",
            "datatype": {
              "type": "Vector3"
            }
          },
          {
            "name": "rotation_axis",
            "datatype": {
              "type": "Vector3"
            }
          },
          {
            "name": "rotation_angle",
            "datatype": {
              "type": "float"
            }
          },
          {
            "name": "scale",
            "datatype": {
              "type": "Vector3"
            }
          },
          {
            "name": "tint",
            "datatype": {
              "type": "Color"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "draw_model_wires",
        "comment": "Draw a model wires (with texture if set)",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "model",
            "datatype": {
              "type": "Model"
            }
          },
          {
            "name": "position",
            "datatype": {
              "type": "Vector3"
            }
          },
          {
            "name": "scale",
            "datatype": {
              "type": "float"
            }
          },
          {
            "name": "tint",
            "datatype": {
              "type": "Color"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "draw_model_wires_ex",
        "comment": "Draw a model wires (with texture if set) with extended parameters",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "model",
            "datatype": {
              "type": "Model"
            }
          },
          {
            "name": "position",
            "datatype": {
              "type": "Vector3"
            }
          },
          {
            "name": "rotation_axis",
            "datatype": {
              "type": "Vector3"
            }
          },
          {
            "name": "rotation_angle",
            "datatype": {
              "type": "float"
            }
          },
          {
            "name": "scale",
            "datatype": {
              "type": "Vector3"
            }
          },
          {
            "name": "tint",
            "datatype": {
              "type": "Color"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "draw_pixel",
        "comment": "Draw a pixel",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "pos_x",
            "datatype": {
              "type": "int"
            }
          },
          {
            "name": "pos_y",
            "datatype": {
              "type": "int"
            }
          },
          {
            "name": "p_color",
            "datatype": {
              "type": "Color"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "draw_pixel_v",
        "comment": "Draw a pixel (Vector version)",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "position",
            "datatype": {
              "type": "Vector2"
            }
          },
          {
            "name": "p_color",
            "datatype": {
              "type": "Color"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "draw_plane",
        "comment": "Draw a plane XZ",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "center_pos",
            "datatype": {
              "type": "Vector3"
            }
          },
          {
            "name": "size",
            "datatype": {
              "type": "Vector2"
            }
          },
          {
            "name": "p_color",
            "datatype": {
              "type": "Color"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "draw_point_3d",
        "comment": "Draw a point in 3D space, actually a small line",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "position",
            "datatype": {
              "type": "Vector3"
            }
          },
          {
            "name": "p_color",
            "datatype": {
              "type": "Color"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "draw_poly",
        "comment": "Draw a regular polygon (Vector version)",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "center",
            "datatype": {
              "type": "Vector2"
            }
          },
          {
            "name": "sides",
            "datatype": {
              "type": "int"
            }
          },
          {
            "name": "radius",
            "datatype": {
              "type": "float"
            }
          },
          {
            "name": "rotation",
            "datatype": {
              "type": "float"
            }
          },
          {
            "name": "p_color",
            "datatype": {
              "type": "Color"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "draw_poly_lines",
        "comment": "Draw a polygon outline of n sides",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "center",
            "datatype": {
              "type": "Vector2"
            }
          },
          {
            "name": "sides",
            "datatype": {
              "type": "int"
            }
          },
          {
            "name": "radius",
            "datatype": {
              "type": "float"
            }
          },
          {
            "name": "rotation",
            "datatype": {
              "type": "float"
            }
          },
          {
            "name": "p_color",
            "datatype": {
              "type": "Color"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "draw_poly_lines_ex",
        "comment": "Draw a polygon outline of n sides with extended parameters",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "center",
            "datatype": {
              "type": "Vector2"
            }
          },
          {
            "name": "sides",
            "datatype": {
              "type": "int"
            }
          },
          {
            "name": "radius",
            "datatype": {
              "type": "float"
            }
          },
          {
            "name": "rotation",
            "datatype": {
              "type": "float"
            }
          },
          {
            "name": "line_thick",
            "datatype": {
              "type": "float"
            }
          },
          {
            "name": "p_color",
            "datatype": {
              "type": "Color"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "draw_ray",
        "comment": "Draw a ray line",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "p_ray",
            "datatype": {
              "type": "Ray"
            }
          },
          {
            "name": "p_color",
            "datatype": {
              "type": "Color"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "draw_rectangle",
        "comment": "Draw a color-filled rectangle",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "pos_x",
            "datatype": {
              "type": "int"
            }
          },
          {
            "name": "pos_y",
            "datatype": {
              "type": "int"
            }
          },
          {
            "name": "width",
            "datatype": {
              "type": "int"
            }
          },
          {
            "name": "height",
            "datatype": {
              "type": "int"
            }
          },
          {
            "name": "p_color",
            "datatype": {
              "type": "Color"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "draw_rectangle_gradient_ex",
        "comment": "Draw a gradient-filled rectangle with custom vertex colors",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "rec",
            "datatype": {
              "type": "Rectangle"
            }
          },
          {
            "name": "col1",
            "datatype": {
              "type": "Color"
            }
          },
          {
            "name": "col2",
            "datatype": {
              "type": "Color"
            }
          },
          {
            "name": "col3",
            "datatype": {
              "type": "Color"
            }
          },
          {
            "name": "col4",
            "datatype": {
              "type": "Color"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "draw_rectangle_gradient_h",
        "comment": "Draw a horizontal-gradient-filled rectangle",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "pos_x",
            "datatype": {
              "type": "int"
            }
          },
          {
            "name": "pos_y",
            "datatype": {
              "type": "int"
            }
          },
          {
            "name": "width",
            "datatype": {
              "type": "int"
            }
          },
          {
            "name": "height",
            "datatype": {
              "type": "int"
            }
          },
          {
            "name": "color1",
            "datatype": {
              "type": "Color"
            }
          },
          {
            "name": "color2",
            "datatype": {
              "type": "Color"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "draw_rectangle_gradient_v",
        "comment": "Draw a vertical-gradient-filled rectangle",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "pos_x",
            "datatype": {
              "type": "int"
            }
          },
          {
            "name": "pos_y",
            "datatype": {
              "type": "int"
            }
          },
          {
            "name": "width",
            "datatype": {
              "type": "int"
            }
          },
          {
            "name": "height",
            "datatype": {
              "type": "int"
            }
          },
          {
            "name": "color1",
            "datatype": {
              "type": "Color"
            }
          },
          {
            "name": "color2",
            "datatype": {
              "type": "Color"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "draw_rectangle_lines",
        "comment": "Draw rectangle outline",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "pos_x",
            "datatype": {
              "type": "int"
            }
          },
          {
            "name": "pos_y",
            "datatype": {
              "type": "int"
            }
          },
          {
            "name": "width",
            "datatype": {
              "type": "int"
            }
          },
          {
            "name": "height",
            "datatype": {
              "type": "int"
            }
          },
          {
            "name": "p_color",
            "datatype": {
              "type": "Color"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "draw_rectangle_lines_ex",
        "comment": "Draw rectangle outline with extended parameters",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "rec",
            "datatype": {
              "type": "Rectangle"
            }
          },
          {
            "name": "line_thick",
            "datatype": {
              "type": "float"
            }
          },
          {
            "name": "p_color",
            "datatype": {
              "type": "Color"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "draw_rectangle_pro",
        "comment": "Draw a color-filled rectangle with pro parameters",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "rec",
            "datatype": {
              "type": "Rectangle"
            }
          },
          {
            "name": "origin",
            "datatype": {
              "type": "Vector2"
            }
          },
          {
            "name": "rotation",
            "datatype": {
              "type": "float"
            }
          },
          {
            "name": "p_color",
            "datatype": {
              "type": "Color"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "draw_rectangle_rec",
        "comment": "Draw a color-filled rectangle",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "rec",
            "datatype": {
              "type": "Rectangle"
            }
          },
          {
            "name": "p_color",
            "datatype": {
              "type": "Color"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "draw_rectangle_rounded",
        "comment": "Draw rectangle with rounded edges",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "rec",
            "datatype": {
              "type": "Rectangle"
            }
          },
          {
            "name": "roundness",
            "datatype": {
              "type": "float"
            }
          },
          {
            "name": "segments",
            "datatype": {
              "type": "int"
            }
          },
          {
            "name": "p_color",
            "datatype": {
              "type": "Color"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "draw_rectangle_rounded_lines",
        "comment": "Draw rectangle with rounded edges outline",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "rec",
            "datatype": {
              "type": "Rectangle"
            }
          },
          {
            "name": "roundness",
            "datatype": {
              "type": "float"
            }
          },
          {
            "name": "segments",
            "datatype": {
              "type": "int"
            }
          },
          {
            "name": "line_thick",
            "datatype": {
              "type": "float"
            }
          },
          {
            "name": "p_color",
            "datatype": {
              "type": "Color"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "draw_rectangle_v",
        "comment": "Draw a color-filled rectangle (Vector version)",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "position",
            "datatype": {
              "type": "Vector2"
            }
          },
          {
            "name": "size",
            "datatype": {
              "type": "Vector2"
            }
          },
          {
            "name": "p_color",
            "datatype": {
              "type": "Color"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "draw_ring",
        "comment": "Draw ring",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "center",
            "datatype": {
              "type": "Vector2"
            }
          },
          {
            "name": "inner_radius",
            "datatype": {
              "type": "float"
            }
          },
          {
            "name": "outer_radius",
            "datatype": {
              "type": "float"
            }
          },
          {
            "name": "start_angle",
            "datatype": {
              "type": "float"
            }
          },
          {
            "name": "end_angle",
            "datatype": {
              "type": "float"
            }
          },
          {
            "name": "segments",
            "datatype": {
              "type": "int"
            }
          },
          {
            "name": "p_color",
            "datatype": {
              "type": "Color"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "draw_ring_lines",
        "comment": "Draw ring outline",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "center",
            "datatype": {
              "type": "Vector2"
            }
          },
          {
            "name": "inner_radius",
            "datatype": {
              "type": "float"
            }
          },
          {
            "name": "outer_radius",
            "datatype": {
              "type": "float"
            }
          },
          {
            "name": "start_angle",
            "datatype": {
              "type": "float"
            }
          },
          {
            "name": "end_angle",
            "datatype": {
              "type": "float"
            }
          },
          {
            "name": "segments",
            "datatype": {
              "type": "int"
            }
          },
          {
            "name": "p_color",
            "datatype": {
              "type": "Color"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "draw_sphere",
        "comment": "Draw sphere",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "center_pos",
            "datatype": {
              "type": "Vector3"
            }
          },
          {
            "name": "radius",
            "datatype": {
              "type": "float"
            }
          },
          {
            "name": "p_color",
            "datatype": {
              "type": "Color"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "draw_sphere_ex",
        "comment": "Draw sphere with extended parameters",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "center_pos",
            "datatype": {
              "type": "Vector3"
            }
          },
          {
            "name": "radius",
            "datatype": {
              "type": "float"
            }
          },
          {
            "name": "rings",
            "datatype": {
              "type": "int"
            }
          },
          {
            "name": "slices",
            "datatype": {
              "type": "int"
            }
          },
          {
            "name": "p_color",
            "datatype": {
              "type": "Color"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "draw_sphere_wires",
        "comment": "Draw sphere wires",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "center_pos",
            "datatype": {
              "type": "Vector3"
            }
          },
          {
            "name": "radius",
            "datatype": {
              "type": "float"
            }
          },
          {
            "name": "rings",
            "datatype": {
              "type": "int"
            }
          },
          {
            "name": "slices",
            "datatype": {
              "type": "int"
            }
          },
          {
            "name": "p_color",
            "datatype": {
              "type": "Color"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "draw_text",
        "comment": "Draw text (using default font)",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "text",
            "datatype": {
              "type": "str"
            }
          },
          {
            "name": "pos_x",
            "datatype": {
              "type": "int"
            }
          },
          {
            "name": "pos_y",
            "datatype": {
              "type": "int"
            }
          },
          {
            "name": "font_size",
            "datatype": {
              "type": "int"
            }
          },
          {
            "name": "p_color",
            "datatype": {
              "type": "Color"
            }
          }
        ],
        "annotations": [
          {
            "name": "@native",
            "argument": ""
          }
        ]
      },
      {
        "name": "draw_text_codepoint",
        "comment": "Draw one character (codepoint)",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "p_font",
            "datatype": {
              "type": "Font"
            }
          },
          {
            "name": "codepoint",
            "datatype": {
              "type": "int"
            }
          },
          {
            "name": "position",
            "datatype": {
              "type": "Vector2"
            }
          },
          {
            "name": "font_size",
            "datatype": {
              "type": "float"
            }
          },
          {
            "name": "tint",
            "datatype": {
              "type": "Color"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "draw_text_codepoints",
        "comment": "Draw multiple character (codepoint)",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "p_font",
            "datatype": {
              "type": "Font"
            }
          },
          {
            "name": "codepoints",
            "datatype": {
              "type": "Const",
              "arguments": [
                {
                  "type": "Ptr",
                  "arguments": [
                    {
                      "type": "CInt",
                      "module": "libs.c"
                    }
                  ]
                }
              ]
            }
          },
          {
            "name": "count",
            "datatype": {
              "type": "int"
            }
          },
          {
            "name": "position",
            "datatype": {
              "type": "Vector2"
            }
          },
          {
            "name": "font_size",
            "datatype": {
              "type": "float"
            }
          },
          {
            "name": "spacing",
            "datatype": {
              "type": "float"
            }
          },
          {
            "name": "tint",
            "datatype": {
              "type": "Color"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "draw_text_ex",
        "comment": "Draw text using font and additional parameters",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "p_font",
            "datatype": {
              "type": "Font"
            }
          },
          {
            "name": "text",
            "datatype": {
              "type": "str"
            }
          },
          {
            "name": "position",
            "datatype": {
              "type": "Vector2"
            }
          },
          {
            "name": "font_size",
            "datatype": {
              "type": "float"
            }
          },
          {
            "name": "spacing",
            "datatype": {
              "type": "float"
            }
          },
          {
            "name": "tint",
            "datatype": {
              "type": "Color"
            }
          }
        ],
        "annotations": [
          {
            "name": "@native",
            "argument": ""
          }
        ]
      },
      {
        "name": "draw_text_pro",
        "comment": "Draw text using Font and pro parameters (rotation)",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "p_font",
            "datatype": {
              "type": "Font"
            }
          },
          {
            "name": "text",
            "datatype": {
              "type": "str"
            }
          },
          {
            "name": "position",
            "datatype": {
              "type": "Vector2"
            }
          },
          {
            "name": "origin",
            "datatype": {
              "type": "Vector2"
            }
          },
          {
            "name": "rotation",
            "datatype": {
              "type": "float"
            }
          },
          {
            "name": "font_size",
            "datatype": {
              "type": "float"
            }
          },
          {
            "name": "spacing",
            "datatype": {
              "type": "float"
            }
          },
          {
            "name": "tint",
            "datatype": {
              "type": "Color"
            }
          }
        ],
        "annotations": [
          {
            "name": "@native",
            "argument": ""
          }
        ]
      },
      {
        "name": "draw_texture",
        "comment": "Draw a Texture2D",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "p_texture",
            "datatype": {
              "type": "Texture2D"
            }
          },
          {
            "name": "pos_x",
            "datatype": {
              "type": "int"
            }
          },
          {
            "name": "pos_y",
            "datatype": {
              "type": "int"
            }
          },
          {
            "name": "tint",
            "datatype": {
              "type": "Color"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "draw_texture_ex",
        "comment": "Draw a Texture2D with extended parameters",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "p_texture",
            "datatype": {
              "type": "Texture2D"
            }
          },
          {
            "name": "position",
            "datatype": {
              "type": "Vector2"
            }
          },
          {
            "name": "rotation",
            "datatype": {
              "type": "float"
            }
          },
          {
            "name": "scale",
            "datatype": {
              "type": "float"
            }
          },
          {
            "name": "tint",
            "datatype": {
              "type": "Color"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "draw_texture_n_patch",
        "comment": "Draws a texture (or part of it) that stretches or shrinks nicely",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "p_texture",
            "datatype": {
              "type": "Texture2D"
            }
          },
          {
            "name": "p_n_patch_info",
            "datatype": {
              "type": "NPatchInfo"
            }
          },
          {
            "name": "dest",
            "datatype": {
              "type": "Rectangle"
            }
          },
          {
            "name": "origin",
            "datatype": {
              "type": "Vector2"
            }
          },
          {
            "name": "rotation",
            "datatype": {
              "type": "float"
            }
          },
          {
            "name": "tint",
            "datatype": {
              "type": "Color"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "draw_texture_poly",
        "comment": "Draw a textured polygon",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "p_texture",
            "datatype": {
              "type": "Texture2D"
            }
          },
          {
            "name": "center",
            "datatype": {
              "type": "Vector2"
            }
          },
          {
            "name": "points",
            "datatype": {
              "type": "Ptr",
              "arguments": [
                {
                  "type": "Vector2"
                }
              ]
            }
          },
          {
            "name": "texcoords",
            "datatype": {
              "type": "Ptr",
              "arguments": [
                {
                  "type": "Vector2"
                }
              ]
            }
          },
          {
            "name": "point_count",
            "datatype": {
              "type": "int"
            }
          },
          {
            "name": "tint",
            "datatype": {
              "type": "Color"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "draw_texture_pro",
        "comment": "Draw a part of a texture defined by a rectangle with 'pro' parameters",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "p_texture",
            "datatype": {
              "type": "Texture2D"
            }
          },
          {
            "name": "source",
            "datatype": {
              "type": "Rectangle"
            }
          },
          {
            "name": "dest",
            "datatype": {
              "type": "Rectangle"
            }
          },
          {
            "name": "origin",
            "datatype": {
              "type": "Vector2"
            }
          },
          {
            "name": "rotation",
            "datatype": {
              "type": "float"
            }
          },
          {
            "name": "tint",
            "datatype": {
              "type": "Color"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "draw_texture_quad",
        "comment": "Draw texture quad with tiling and offset parameters",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "p_texture",
            "datatype": {
              "type": "Texture2D"
            }
          },
          {
            "name": "tiling",
            "datatype": {
              "type": "Vector2"
            }
          },
          {
            "name": "offset",
            "datatype": {
              "type": "Vector2"
            }
          },
          {
            "name": "quad",
            "datatype": {
              "type": "Rectangle"
            }
          },
          {
            "name": "tint",
            "datatype": {
              "type": "Color"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "draw_texture_rec",
        "comment": "Draw a part of a texture defined by a rectangle",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "p_texture",
            "datatype": {
              "type": "Texture2D"
            }
          },
          {
            "name": "source",
            "datatype": {
              "type": "Rectangle"
            }
          },
          {
            "name": "position",
            "datatype": {
              "type": "Vector2"
            }
          },
          {
            "name": "tint",
            "datatype": {
              "type": "Color"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "draw_texture_tiled",
        "comment": "Draw part of a texture (defined by a rectangle) with rotation and scale tiled into dest.",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "p_texture",
            "datatype": {
              "type": "Texture2D"
            }
          },
          {
            "name": "source",
            "datatype": {
              "type": "Rectangle"
            }
          },
          {
            "name": "dest",
            "datatype": {
              "type": "Rectangle"
            }
          },
          {
            "name": "origin",
            "datatype": {
              "type": "Vector2"
            }
          },
          {
            "name": "rotation",
            "datatype": {
              "type": "float"
            }
          },
          {
            "name": "scale",
            "datatype": {
              "type": "float"
            }
          },
          {
            "name": "tint",
            "datatype": {
              "type": "Color"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "draw_texture_v",
        "comment": "Draw a Texture2D with position defined as Vector2",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "p_texture",
            "datatype": {
              "type": "Texture2D"
            }
          },
          {
            "name": "position",
            "datatype": {
              "type": "Vector2"
            }
          },
          {
            "name": "tint",
            "datatype": {
              "type": "Color"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "draw_triangle",
        "comment": "Draw a color-filled triangle (vertex in counter-clockwise order!)",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "v1",
            "datatype": {
              "type": "Vector2"
            }
          },
          {
            "name": "v2",
            "datatype": {
              "type": "Vector2"
            }
          },
          {
            "name": "v3",
            "datatype": {
              "type": "Vector2"
            }
          },
          {
            "name": "p_color",
            "datatype": {
              "type": "Color"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "draw_triangle_3d",
        "comment": "Draw a color-filled triangle (vertex in counter-clockwise order!)",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "v1",
            "datatype": {
              "type": "Vector3"
            }
          },
          {
            "name": "v2",
            "datatype": {
              "type": "Vector3"
            }
          },
          {
            "name": "v3",
            "datatype": {
              "type": "Vector3"
            }
          },
          {
            "name": "p_color",
            "datatype": {
              "type": "Color"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "draw_triangle_fan",
        "comment": "Draw a triangle fan defined by points (first vertex is the center)",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "points",
            "datatype": {
              "type": "Ptr",
              "arguments": [
                {
                  "type": "Vector2"
                }
              ]
            }
          },
          {
            "name": "point_count",
            "datatype": {
              "type": "int"
            }
          },
          {
            "name": "p_color",
            "datatype": {
              "type": "Color"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "draw_triangle_lines",
        "comment": "Draw triangle outline (vertex in counter-clockwise order!)",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "v1",
            "datatype": {
              "type": "Vector2"
            }
          },
          {
            "name": "v2",
            "datatype": {
              "type": "Vector2"
            }
          },
          {
            "name": "v3",
            "datatype": {
              "type": "Vector2"
            }
          },
          {
            "name": "p_color",
            "datatype": {
              "type": "Color"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "draw_triangle_strip",
        "comment": "Draw a triangle strip defined by points",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "points",
            "datatype": {
              "type": "Ptr",
              "arguments": [
                {
                  "type": "Vector2"
                }
              ]
            }
          },
          {
            "name": "point_count",
            "datatype": {
              "type": "int"
            }
          },
          {
            "name": "p_color",
            "datatype": {
              "type": "Color"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "draw_triangle_strip_3d",
        "comment": "Draw a triangle strip defined by points",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "points",
            "datatype": {
              "type": "Ptr",
              "arguments": [
                {
                  "type": "Vector3"
                }
              ]
            }
          },
          {
            "name": "point_count",
            "datatype": {
              "type": "int"
            }
          },
          {
            "name": "p_color",
            "datatype": {
              "type": "Color"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "enable_cursor",
        "comment": "Enables cursor (unlock cursor)",
        "return_type": {
          "type": "None"
        },
        "parameters": [],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "enable_event_waiting",
        "comment": "Enable waiting for events on EndDrawing(), no automatic event polling",
        "return_type": {
          "type": "None"
        },
        "parameters": [],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "encode_data_base64",
        "comment": "Encode data to Base64 string, memory must be MemFree()",
        "return_type": {
          "type": "CStr",
          "module": "libs.c"
        },
        "parameters": [
          {
            "name": "data",
            "datatype": {
              "type": "Const",
              "arguments": [
                {
                  "type": "Ptr",
                  "arguments": [
                    {
                      "type": "CUChar",
                      "module": "libs.c"
                    }
                  ]
                }
              ]
            }
          },
          {
            "name": "data_size",
            "datatype": {
              "type": "int"
            }
          },
          {
            "name": "output_size",
            "datatype": {
              "type": "Ptr",
              "arguments": [
                {
                  "type": "CInt",
                  "module": "libs.c"
                }
              ]
            }
          }
        ],
        "annotations": [
          {
            "name": "@native",
            "argument": ""
          }
        ]
      },
      {
        "name": "end_blend_mode",
        "comment": "End blending mode (reset to default: alpha blending)",
        "return_type": {
          "type": "None"
        },
        "parameters": [],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "end_drawing",
        "comment": "End canvas drawing and swap buffers (double buffering)",
        "return_type": {
          "type": "None"
        },
        "parameters": [],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "end_mode_2d",
        "comment": "Ends 2D mode with custom camera",
        "return_type": {
          "type": "None"
        },
        "parameters": [],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "end_mode_3d",
        "comment": "Ends 3D mode and returns to default 2D orthographic mode",
        "return_type": {
          "type": "None"
        },
        "parameters": [],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "end_scissor_mode",
        "comment": "End scissor mode",
        "return_type": {
          "type": "None"
        },
        "parameters": [],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "end_shader_mode",
        "comment": "End custom shader drawing (use default shader)",
        "return_type": {
          "type": "None"
        },
        "parameters": [],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "end_texture_mode",
        "comment": "Ends drawing to render texture",
        "return_type": {
          "type": "None"
        },
        "parameters": [],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "end_vr_stereo_mode",
        "comment": "End stereo rendering (requires VR simulator)",
        "return_type": {
          "type": "None"
        },
        "parameters": [],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "export_data_as_code",
        "comment": "Export data to code (.h), returns true on success",
        "return_type": {
          "type": "bool"
        },
        "parameters": [
          {
            "name": "data",
            "datatype": {
              "type": "str"
            }
          },
          {
            "name": "size",
            "datatype": {
              "type": "u32"
            }
          },
          {
            "name": "file_name",
            "datatype": {
              "type": "str"
            }
          }
        ],
        "annotations": [
          {
            "name": "@native",
            "argument": ""
          }
        ]
      },
      {
        "name": "export_font_as_code",
        "comment": "Export font as code file, returns true on success",
        "return_type": {
          "type": "bool"
        },
        "parameters": [
          {
            "name": "p_font",
            "datatype": {
              "type": "Font"
            }
          },
          {
            "name": "file_name",
            "datatype": {
              "type": "str"
            }
          }
        ],
        "annotations": [
          {
            "name": "@native",
            "argument": ""
          }
        ]
      },
      {
        "name": "export_image",
        "comment": "Export image data to file, returns true on success",
        "return_type": {
          "type": "bool"
        },
        "parameters": [
          {
            "name": "p_image",
            "datatype": {
              "type": "Image"
            }
          },
          {
            "name": "file_name",
            "datatype": {
              "type": "str"
            }
          }
        ],
        "annotations": [
          {
            "name": "@native",
            "argument": ""
          }
        ]
      },
      {
        "name": "export_image_as_code",
        "comment": "Export image as code file defining an array of bytes, returns true on success",
        "return_type": {
          "type": "bool"
        },
        "parameters": [
          {
            "name": "p_image",
            "datatype": {
              "type": "Image"
            }
          },
          {
            "name": "file_name",
            "datatype": {
              "type": "str"
            }
          }
        ],
        "annotations": [
          {
            "name": "@native",
            "argument": ""
          }
        ]
      },
      {
        "name": "export_mesh",
        "comment": "Export mesh data to file, returns true on success",
        "return_type": {
          "type": "bool"
        },
        "parameters": [
          {
            "name": "mesh",
            "datatype": {
              "type": "Mesh"
            }
          },
          {
            "name": "file_name",
            "datatype": {
              "type": "str"
            }
          }
        ],
        "annotations": [
          {
            "name": "@native",
            "argument": ""
          }
        ]
      },
      {
        "name": "export_wave",
        "comment": "Export wave data to file, returns true on success",
        "return_type": {
          "type": "bool"
        },
        "parameters": [
          {
            "name": "p_wave",
            "datatype": {
              "type": "Wave"
            }
          },
          {
            "name": "file_name",
            "datatype": {
              "type": "str"
            }
          }
        ],
        "annotations": [
          {
            "name": "@native",
            "argument": ""
          }
        ]
      },
      {
        "name": "export_wave_as_code",
        "comment": "Export wave sample data to code (.h), returns true on success",
        "return_type": {
          "type": "bool"
        },
        "parameters": [
          {
            "name": "p_wave",
            "datatype": {
              "type": "Wave"
            }
          },
          {
            "name": "file_name",
            "datatype": {
              "type": "str"
            }
          }
        ],
        "annotations": [
          {
            "name": "@native",
            "argument": ""
          }
        ]
      },
      {
        "name": "fade",
        "comment": "Get color with alpha applied, alpha goes from 0.0f to 1.0f",
        "return_type": {
          "type": "Color"
        },
        "parameters": [
          {
            "name": "p_color",
            "datatype": {
              "type": "Color"
            }
          },
          {
            "name": "alpha",
            "datatype": {
              "type": "float"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "file_exists",
        "comment": "Check if file exists",
        "return_type": {
          "type": "bool"
        },
        "parameters": [
          {
            "name": "file_name",
            "datatype": {
              "type": "str"
            }
          }
        ],
        "annotations": [
          {
            "name": "@native",
            "argument": ""
          }
        ]
      },
      {
        "name": "font",
        "comment": "Factory function for: Font",
        "return_type": {
          "type": "Font"
        },
        "parameters": [
          {
            "name": "base_size",
            "datatype": {
              "type": "int"
            }
          },
          {
            "name": "glyph_count",
            "datatype": {
              "type": "int"
            }
          },
          {
            "name": "glyph_padding",
            "datatype": {
              "type": "int"
            }
          },
          {
            "name": "p_texture",
            "datatype": {
              "type": "Texture2D"
            }
          },
          {
            "name": "recs",
            "datatype": {
              "type": "Ptr",
              "arguments": [
                {
                  "type": "Rectangle"
                }
              ]
            }
          },
          {
            "name": "glyphs",
            "datatype": {
              "type": "Ptr",
              "arguments": [
                {
                  "type": "GlyphInfo"
                }
              ]
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "gen_image_cellular",
        "comment": "Generate image: cellular algorithm, bigger tileSize means bigger cells",
        "return_type": {
          "type": "Image"
        },
        "parameters": [
          {
            "name": "width",
            "datatype": {
              "type": "int"
            }
          },
          {
            "name": "height",
            "datatype": {
              "type": "int"
            }
          },
          {
            "name": "tile_size",
            "datatype": {
              "type": "int"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "gen_image_checked",
        "comment": "Generate image: checked",
        "return_type": {
          "type": "Image"
        },
        "parameters": [
          {
            "name": "width",
            "datatype": {
              "type": "int"
            }
          },
          {
            "name": "height",
            "datatype": {
              "type": "int"
            }
          },
          {
            "name": "checks_x",
            "datatype": {
              "type": "int"
            }
          },
          {
            "name": "checks_y",
            "datatype": {
              "type": "int"
            }
          },
          {
            "name": "col1",
            "datatype": {
              "type": "Color"
            }
          },
          {
            "name": "col2",
            "datatype": {
              "type": "Color"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "gen_image_color",
        "comment": "Generate image: plain color",
        "return_type": {
          "type": "Image"
        },
        "parameters": [
          {
            "name": "width",
            "datatype": {
              "type": "int"
            }
          },
          {
            "name": "height",
            "datatype": {
              "type": "int"
            }
          },
          {
            "name": "p_color",
            "datatype": {
              "type": "Color"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "gen_image_font_atlas",
        "comment": "Generate image font atlas using chars info",
        "return_type": {
          "type": "Image"
        },
        "parameters": [
          {
            "name": "chars",
            "datatype": {
              "type": "Const",
              "arguments": [
                {
                  "type": "Ptr",
                  "arguments": [
                    {
                      "type": "GlyphInfo"
                    }
                  ]
                }
              ]
            }
          },
          {
            "name": "recs",
            "datatype": {
              "type": "Ptr",
              "arguments": [
                {
                  "type": "Ptr",
                  "arguments": [
                    {
                      "type": "Rectangle"
                    }
                  ]
                }
              ]
            }
          },
          {
            "name": "glyph_count",
            "datatype": {
              "type": "int"
            }
          },
          {
            "name": "font_size",
            "datatype": {
              "type": "int"
            }
          },
          {
            "name": "padding",
            "datatype": {
              "type": "int"
            }
          },
          {
            "name": "pack_method",
            "datatype": {
              "type": "int"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "gen_image_gradient_h",
        "comment": "Generate image: horizontal gradient",
        "return_type": {
          "type": "Image"
        },
        "parameters": [
          {
            "name": "width",
            "datatype": {
              "type": "int"
            }
          },
          {
            "name": "height",
            "datatype": {
              "type": "int"
            }
          },
          {
            "name": "left",
            "datatype": {
              "type": "Color"
            }
          },
          {
            "name": "right",
            "datatype": {
              "type": "Color"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "gen_image_gradient_radial",
        "comment": "Generate image: radial gradient",
        "return_type": {
          "type": "Image"
        },
        "parameters": [
          {
            "name": "width",
            "datatype": {
              "type": "int"
            }
          },
          {
            "name": "height",
            "datatype": {
              "type": "int"
            }
          },
          {
            "name": "density",
            "datatype": {
              "type": "float"
            }
          },
          {
            "name": "inner",
            "datatype": {
              "type": "Color"
            }
          },
          {
            "name": "outer",
            "datatype": {
              "type": "Color"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "gen_image_gradient_v",
        "comment": "Generate image: vertical gradient",
        "return_type": {
          "type": "Image"
        },
        "parameters": [
          {
            "name": "width",
            "datatype": {
              "type": "int"
            }
          },
          {
            "name": "height",
            "datatype": {
              "type": "int"
            }
          },
          {
            "name": "top",
            "datatype": {
              "type": "Color"
            }
          },
          {
            "name": "bottom",
            "datatype": {
              "type": "Color"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "gen_image_white_noise",
        "comment": "Generate image: white noise",
        "return_type": {
          "type": "Image"
        },
        "parameters": [
          {
            "name": "width",
            "datatype": {
              "type": "int"
            }
          },
          {
            "name": "height",
            "datatype": {
              "type": "int"
            }
          },
          {
            "name": "factor",
            "datatype": {
              "type": "float"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "gen_mesh_cone",
        "comment": "Generate cone/pyramid mesh",
        "return_type": {
          "type": "Mesh"
        },
        "parameters": [
          {
            "name": "radius",
            "datatype": {
              "type": "float"
            }
          },
          {
            "name": "height",
            "datatype": {
              "type": "float"
            }
          },
          {
            "name": "slices",
            "datatype": {
              "type": "int"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "gen_mesh_cube",
        "comment": "Generate cuboid mesh",
        "return_type": {
          "type": "Mesh"
        },
        "parameters": [
          {
            "name": "width",
            "datatype": {
              "type": "float"
            }
          },
          {
            "name": "height",
            "datatype": {
              "type": "float"
            }
          },
          {
            "name": "length",
            "datatype": {
              "type": "float"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "gen_mesh_cubicmap",
        "comment": "Generate cubes-based map mesh from image data",
        "return_type": {
          "type": "Mesh"
        },
        "parameters": [
          {
            "name": "cubicmap",
            "datatype": {
              "type": "Image"
            }
          },
          {
            "name": "cube_size",
            "datatype": {
              "type": "Vector3"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "gen_mesh_cylinder",
        "comment": "Generate cylinder mesh",
        "return_type": {
          "type": "Mesh"
        },
        "parameters": [
          {
            "name": "radius",
            "datatype": {
              "type": "float"
            }
          },
          {
            "name": "height",
            "datatype": {
              "type": "float"
            }
          },
          {
            "name": "slices",
            "datatype": {
              "type": "int"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "gen_mesh_heightmap",
        "comment": "Generate heightmap mesh from image data",
        "return_type": {
          "type": "Mesh"
        },
        "parameters": [
          {
            "name": "heightmap",
            "datatype": {
              "type": "Image"
            }
          },
          {
            "name": "size",
            "datatype": {
              "type": "Vector3"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "gen_mesh_hemi_sphere",
        "comment": "Generate half-sphere mesh (no bottom cap)",
        "return_type": {
          "type": "Mesh"
        },
        "parameters": [
          {
            "name": "radius",
            "datatype": {
              "type": "float"
            }
          },
          {
            "name": "rings",
            "datatype": {
              "type": "int"
            }
          },
          {
            "name": "slices",
            "datatype": {
              "type": "int"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "gen_mesh_knot",
        "comment": "Generate trefoil knot mesh",
        "return_type": {
          "type": "Mesh"
        },
        "parameters": [
          {
            "name": "radius",
            "datatype": {
              "type": "float"
            }
          },
          {
            "name": "size",
            "datatype": {
              "type": "float"
            }
          },
          {
            "name": "rad_seg",
            "datatype": {
              "type": "int"
            }
          },
          {
            "name": "sides",
            "datatype": {
              "type": "int"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "gen_mesh_plane",
        "comment": "Generate plane mesh (with subdivisions)",
        "return_type": {
          "type": "Mesh"
        },
        "parameters": [
          {
            "name": "width",
            "datatype": {
              "type": "float"
            }
          },
          {
            "name": "length",
            "datatype": {
              "type": "float"
            }
          },
          {
            "name": "res_x",
            "datatype": {
              "type": "int"
            }
          },
          {
            "name": "res_z",
            "datatype": {
              "type": "int"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "gen_mesh_poly",
        "comment": "Generate polygonal mesh",
        "return_type": {
          "type": "Mesh"
        },
        "parameters": [
          {
            "name": "sides",
            "datatype": {
              "type": "int"
            }
          },
          {
            "name": "radius",
            "datatype": {
              "type": "float"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "gen_mesh_sphere",
        "comment": "Generate sphere mesh (standard sphere)",
        "return_type": {
          "type": "Mesh"
        },
        "parameters": [
          {
            "name": "radius",
            "datatype": {
              "type": "float"
            }
          },
          {
            "name": "rings",
            "datatype": {
              "type": "int"
            }
          },
          {
            "name": "slices",
            "datatype": {
              "type": "int"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "gen_mesh_tangents",
        "comment": "Compute mesh tangents",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "mesh",
            "datatype": {
              "type": "Ptr",
              "arguments": [
                {
                  "type": "Mesh"
                }
              ]
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "gen_mesh_torus",
        "comment": "Generate torus mesh",
        "return_type": {
          "type": "Mesh"
        },
        "parameters": [
          {
            "name": "radius",
            "datatype": {
              "type": "float"
            }
          },
          {
            "name": "size",
            "datatype": {
              "type": "float"
            }
          },
          {
            "name": "rad_seg",
            "datatype": {
              "type": "int"
            }
          },
          {
            "name": "sides",
            "datatype": {
              "type": "int"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "gen_texture_mipmaps",
        "comment": "Generate GPU mipmaps for a texture",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "p_texture",
            "datatype": {
              "type": "Ptr",
              "arguments": [
                {
                  "type": "Texture2D"
                }
              ]
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "get_application_directory",
        "comment": "Get the directory if the running application (uses static string)",
        "return_type": {
          "type": "Const",
          "arguments": [
            {
              "type": "CStr",
              "module": "libs.c"
            }
          ]
        },
        "parameters": [],
        "annotations": [
          {
            "name": "@native",
            "argument": ""
          }
        ]
      },
      {
        "name": "get_camera_matrix",
        "comment": "Get camera transform matrix (view matrix)",
        "return_type": {
          "type": "Matrix"
        },
        "parameters": [
          {
            "name": "p_camera",
            "datatype": {
              "type": "Camera"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "get_camera_matrix_2d",
        "comment": "Get camera 2d transform matrix",
        "return_type": {
          "type": "Matrix"
        },
        "parameters": [
          {
            "name": "p_camera",
            "datatype": {
              "type": "Camera2D"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "get_char_pressed",
        "comment": "Get char pressed (unicode), call it multiple times for chars queued, returns 0 when the queue is empty",
        "return_type": {
          "type": "int"
        },
        "parameters": [],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "get_clipboard_text",
        "comment": "Get clipboard text content",
        "return_type": {
          "type": "Const",
          "arguments": [
            {
              "type": "CStr",
              "module": "libs.c"
            }
          ]
        },
        "parameters": [],
        "annotations": [
          {
            "name": "@native",
            "argument": ""
          }
        ]
      },
      {
        "name": "get_codepoint",
        "comment": "Get next codepoint in a UTF-8 encoded string, 0x3f('?') is returned on failure",
        "return_type": {
          "type": "int"
        },
        "parameters": [
          {
            "name": "text",
            "datatype": {
              "type": "str"
            }
          },
          {
            "name": "bytes_processed",
            "datatype": {
              "type": "Ptr",
              "arguments": [
                {
                  "type": "CInt",
                  "module": "libs.c"
                }
              ]
            }
          }
        ],
        "annotations": [
          {
            "name": "@native",
            "argument": ""
          }
        ]
      },
      {
        "name": "get_codepoint_count",
        "comment": "Get total number of codepoints in a UTF-8 encoded string",
        "return_type": {
          "type": "int"
        },
        "parameters": [
          {
            "name": "text",
            "datatype": {
              "type": "str"
            }
          }
        ],
        "annotations": [
          {
            "name": "@native",
            "argument": ""
          }
        ]
      },
      {
        "name": "get_collision_rec",
        "comment": "Get collision rectangle for two rectangles collision",
        "return_type": {
          "type": "Rectangle"
        },
        "parameters": [
          {
            "name": "rec1",
            "datatype": {
              "type": "Rectangle"
            }
          },
          {
            "name": "rec2",
            "datatype": {
              "type": "Rectangle"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "get_color",
        "comment": "Get Color structure from hexadecimal value",
        "return_type": {
          "type": "Color"
        },
        "parameters": [
          {
            "name": "hex_value",
            "datatype": {
              "type": "u32"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "get_current_monitor",
        "comment": "Get current connected monitor",
        "return_type": {
          "type": "int"
        },
        "parameters": [],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "get_directory_path",
        "comment": "Get full path for a given fileName with path (uses static string)",
        "return_type": {
          "type": "Const",
          "arguments": [
            {
              "type": "CStr",
              "module": "libs.c"
            }
          ]
        },
        "parameters": [
          {
            "name": "file_path",
            "datatype": {
              "type": "str"
            }
          }
        ],
        "annotations": [
          {
            "name": "@native",
            "argument": ""
          }
        ]
      },
      {
        "name": "get_file_extension",
        "comment": "Get pointer to extension for a filename string (includes dot: '.png')",
        "return_type": {
          "type": "Const",
          "arguments": [
            {
              "type": "CStr",
              "module": "libs.c"
            }
          ]
        },
        "parameters": [
          {
            "name": "file_name",
            "datatype": {
              "type": "str"
            }
          }
        ],
        "annotations": [
          {
            "name": "@native",
            "argument": ""
          }
        ]
      },
      {
        "name": "get_file_length",
        "comment": "Get file length in bytes (NOTE: GetFileSize() conflicts with windows.h)",
        "return_type": {
          "type": "int"
        },
        "parameters": [
          {
            "name": "file_name",
            "datatype": {
              "type": "str"
            }
          }
        ],
        "annotations": [
          {
            "name": "@native",
            "argument": ""
          }
        ]
      },
      {
        "name": "get_file_mod_time",
        "comment": "Get file modification time (last write time)",
        "return_type": {
          "type": "i64"
        },
        "parameters": [
          {
            "name": "file_name",
            "datatype": {
              "type": "str"
            }
          }
        ],
        "annotations": [
          {
            "name": "@native",
            "argument": ""
          }
        ]
      },
      {
        "name": "get_file_name",
        "comment": "Get pointer to filename for a path string",
        "return_type": {
          "type": "Const",
          "arguments": [
            {
              "type": "CStr",
              "module": "libs.c"
            }
          ]
        },
        "parameters": [
          {
            "name": "file_path",
            "datatype": {
              "type": "str"
            }
          }
        ],
        "annotations": [
          {
            "name": "@native",
            "argument": ""
          }
        ]
      },
      {
        "name": "get_file_name_without_ext",
        "comment": "Get filename string without extension (uses static string)",
        "return_type": {
          "type": "Const",
          "arguments": [
            {
              "type": "CStr",
              "module": "libs.c"
            }
          ]
        },
        "parameters": [
          {
            "name": "file_path",
            "datatype": {
              "type": "str"
            }
          }
        ],
        "annotations": [
          {
            "name": "@native",
            "argument": ""
          }
        ]
      },
      {
        "name": "get_font_default",
        "comment": "Get the default Font",
        "return_type": {
          "type": "Font"
        },
        "parameters": [],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "get_fps",
        "comment": "Get current FPS",
        "return_type": {
          "type": "int"
        },
        "parameters": [],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "get_frame_time",
        "comment": "Get time in seconds for last frame drawn (delta time)",
        "return_type": {
          "type": "float"
        },
        "parameters": [],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "get_gamepad_axis_count",
        "comment": "Get gamepad axis count for a gamepad",
        "return_type": {
          "type": "int"
        },
        "parameters": [
          {
            "name": "gamepad",
            "datatype": {
              "type": "int"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "get_gamepad_axis_movement",
        "comment": "Get axis movement value for a gamepad axis",
        "return_type": {
          "type": "float"
        },
        "parameters": [
          {
            "name": "gamepad",
            "datatype": {
              "type": "int"
            }
          },
          {
            "name": "axis",
            "datatype": {
              "type": "int"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "get_gamepad_button_pressed",
        "comment": "Get the last gamepad button pressed",
        "return_type": {
          "type": "int"
        },
        "parameters": [],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "get_gamepad_name",
        "comment": "Get gamepad internal name id",
        "return_type": {
          "type": "Const",
          "arguments": [
            {
              "type": "CStr",
              "module": "libs.c"
            }
          ]
        },
        "parameters": [
          {
            "name": "gamepad",
            "datatype": {
              "type": "int"
            }
          }
        ],
        "annotations": [
          {
            "name": "@native",
            "argument": ""
          }
        ]
      },
      {
        "name": "get_gesture_detected",
        "comment": "Get latest detected gesture",
        "return_type": {
          "type": "int"
        },
        "parameters": [],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "get_gesture_drag_angle",
        "comment": "Get gesture drag angle",
        "return_type": {
          "type": "float"
        },
        "parameters": [],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "get_gesture_drag_vector",
        "comment": "Get gesture drag vector",
        "return_type": {
          "type": "Vector2"
        },
        "parameters": [],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "get_gesture_hold_duration",
        "comment": "Get gesture hold time in milliseconds",
        "return_type": {
          "type": "float"
        },
        "parameters": [],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "get_gesture_pinch_angle",
        "comment": "Get gesture pinch angle",
        "return_type": {
          "type": "float"
        },
        "parameters": [],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "get_gesture_pinch_vector",
        "comment": "Get gesture pinch delta",
        "return_type": {
          "type": "Vector2"
        },
        "parameters": [],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "get_glyph_atlas_rec",
        "comment": "Get glyph rectangle in font atlas for a codepoint (unicode character), fallback to '?' if not found",
        "return_type": {
          "type": "Rectangle"
        },
        "parameters": [
          {
            "name": "p_font",
            "datatype": {
              "type": "Font"
            }
          },
          {
            "name": "codepoint",
            "datatype": {
              "type": "int"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "get_glyph_index",
        "comment": "Get glyph index position in font for a codepoint (unicode character), fallback to '?' if not found",
        "return_type": {
          "type": "int"
        },
        "parameters": [
          {
            "name": "p_font",
            "datatype": {
              "type": "Font"
            }
          },
          {
            "name": "codepoint",
            "datatype": {
              "type": "int"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "get_glyph_info",
        "comment": "Get glyph font info data for a codepoint (unicode character), fallback to '?' if not found",
        "return_type": {
          "type": "GlyphInfo"
        },
        "parameters": [
          {
            "name": "p_font",
            "datatype": {
              "type": "Font"
            }
          },
          {
            "name": "codepoint",
            "datatype": {
              "type": "int"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "get_image_alpha_border",
        "comment": "Get image alpha border rectangle",
        "return_type": {
          "type": "Rectangle"
        },
        "parameters": [
          {
            "name": "p_image",
            "datatype": {
              "type": "Image"
            }
          },
          {
            "name": "threshold",
            "datatype": {
              "type": "float"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "get_image_color",
        "comment": "Get image pixel color at (x, y) position",
        "return_type": {
          "type": "Color"
        },
        "parameters": [
          {
            "name": "p_image",
            "datatype": {
              "type": "Image"
            }
          },
          {
            "name": "x",
            "datatype": {
              "type": "int"
            }
          },
          {
            "name": "y",
            "datatype": {
              "type": "int"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "get_key_pressed",
        "comment": "Get key pressed (keycode), call it multiple times for keys queued, returns 0 when the queue is empty",
        "return_type": {
          "type": "int"
        },
        "parameters": [],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "get_mesh_bounding_box",
        "comment": "Compute mesh bounding box limits",
        "return_type": {
          "type": "BoundingBox"
        },
        "parameters": [
          {
            "name": "mesh",
            "datatype": {
              "type": "Mesh"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "get_model_bounding_box",
        "comment": "Compute model bounding box limits (considers all meshes)",
        "return_type": {
          "type": "BoundingBox"
        },
        "parameters": [
          {
            "name": "model",
            "datatype": {
              "type": "Model"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "get_monitor_count",
        "comment": "Get number of connected monitors",
        "return_type": {
          "type": "int"
        },
        "parameters": [],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "get_monitor_height",
        "comment": "Get specified monitor height (current video mode used by monitor)",
        "return_type": {
          "type": "int"
        },
        "parameters": [
          {
            "name": "monitor",
            "datatype": {
              "type": "int"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "get_monitor_name",
        "comment": "Get the human-readable, UTF-8 encoded name of the primary monitor",
        "return_type": {
          "type": "Const",
          "arguments": [
            {
              "type": "CStr",
              "module": "libs.c"
            }
          ]
        },
        "parameters": [
          {
            "name": "monitor",
            "datatype": {
              "type": "int"
            }
          }
        ],
        "annotations": [
          {
            "name": "@native",
            "argument": ""
          }
        ]
      },
      {
        "name": "get_monitor_physical_height",
        "comment": "Get specified monitor physical height in millimetres",
        "return_type": {
          "type": "int"
        },
        "parameters": [
          {
            "name": "monitor",
            "datatype": {
              "type": "int"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "get_monitor_physical_width",
        "comment": "Get specified monitor physical width in millimetres",
        "return_type": {
          "type": "int"
        },
        "parameters": [
          {
            "name": "monitor",
            "datatype": {
              "type": "int"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "get_monitor_position",
        "comment": "Get specified monitor position",
        "return_type": {
          "type": "Vector2"
        },
        "parameters": [
          {
            "name": "monitor",
            "datatype": {
              "type": "int"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "get_monitor_refresh_rate",
        "comment": "Get specified monitor refresh rate",
        "return_type": {
          "type": "int"
        },
        "parameters": [
          {
            "name": "monitor",
            "datatype": {
              "type": "int"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "get_monitor_width",
        "comment": "Get specified monitor width (current video mode used by monitor)",
        "return_type": {
          "type": "int"
        },
        "parameters": [
          {
            "name": "monitor",
            "datatype": {
              "type": "int"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "get_mouse_delta",
        "comment": "Get mouse delta between frames",
        "return_type": {
          "type": "Vector2"
        },
        "parameters": [],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "get_mouse_position",
        "comment": "Get mouse position XY",
        "return_type": {
          "type": "Vector2"
        },
        "parameters": [],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "get_mouse_ray",
        "comment": "Get a ray trace from mouse position",
        "return_type": {
          "type": "Ray"
        },
        "parameters": [
          {
            "name": "mouse_position",
            "datatype": {
              "type": "Vector2"
            }
          },
          {
            "name": "p_camera",
            "datatype": {
              "type": "Camera"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "get_mouse_wheel_move",
        "comment": "Get mouse wheel movement for X or Y, whichever is larger",
        "return_type": {
          "type": "float"
        },
        "parameters": [],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "get_mouse_wheel_move_v",
        "comment": "Get mouse wheel movement for both X and Y",
        "return_type": {
          "type": "Vector2"
        },
        "parameters": [],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "get_mouse_x",
        "comment": "Get mouse position X",
        "return_type": {
          "type": "int"
        },
        "parameters": [],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "get_mouse_y",
        "comment": "Get mouse position Y",
        "return_type": {
          "type": "int"
        },
        "parameters": [],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "get_music_time_length",
        "comment": "Get music time length (in seconds)",
        "return_type": {
          "type": "float"
        },
        "parameters": [
          {
            "name": "p_music",
            "datatype": {
              "type": "Music"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "get_music_time_played",
        "comment": "Get current music time played (in seconds)",
        "return_type": {
          "type": "float"
        },
        "parameters": [
          {
            "name": "p_music",
            "datatype": {
              "type": "Music"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "get_pixel_color",
        "comment": "Get Color from a source pixel pointer of certain format",
        "return_type": {
          "type": "Color"
        },
        "parameters": [
          {
            "name": "src_ptr",
            "datatype": {
              "type": "VoidPtr",
              "module": "libs.c"
            }
          },
          {
            "name": "format",
            "datatype": {
              "type": "int"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "get_pixel_data_size",
        "comment": "Get pixel data size in bytes for certain format",
        "return_type": {
          "type": "int"
        },
        "parameters": [
          {
            "name": "width",
            "datatype": {
              "type": "int"
            }
          },
          {
            "name": "height",
            "datatype": {
              "type": "int"
            }
          },
          {
            "name": "format",
            "datatype": {
              "type": "int"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "get_prev_directory_path",
        "comment": "Get previous directory path for a given path (uses static string)",
        "return_type": {
          "type": "Const",
          "arguments": [
            {
              "type": "CStr",
              "module": "libs.c"
            }
          ]
        },
        "parameters": [
          {
            "name": "dir_path",
            "datatype": {
              "type": "str"
            }
          }
        ],
        "annotations": [
          {
            "name": "@native",
            "argument": ""
          }
        ]
      },
      {
        "name": "get_random_value",
        "comment": "Get a random value between min and max (both included)",
        "return_type": {
          "type": "int"
        },
        "parameters": [
          {
            "name": "min",
            "datatype": {
              "type": "int"
            }
          },
          {
            "name": "max",
            "datatype": {
              "type": "int"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "get_ray_collision_box",
        "comment": "Get collision info between ray and box",
        "return_type": {
          "type": "RayCollision"
        },
        "parameters": [
          {
            "name": "p_ray",
            "datatype": {
              "type": "Ray"
            }
          },
          {
            "name": "box",
            "datatype": {
              "type": "BoundingBox"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "get_ray_collision_mesh",
        "comment": "Get collision info between ray and mesh",
        "return_type": {
          "type": "RayCollision"
        },
        "parameters": [
          {
            "name": "p_ray",
            "datatype": {
              "type": "Ray"
            }
          },
          {
            "name": "mesh",
            "datatype": {
              "type": "Mesh"
            }
          },
          {
            "name": "p_transform",
            "datatype": {
              "type": "Matrix"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "get_ray_collision_quad",
        "comment": "Get collision info between ray and quad",
        "return_type": {
          "type": "RayCollision"
        },
        "parameters": [
          {
            "name": "p_ray",
            "datatype": {
              "type": "Ray"
            }
          },
          {
            "name": "p1",
            "datatype": {
              "type": "Vector3"
            }
          },
          {
            "name": "p2",
            "datatype": {
              "type": "Vector3"
            }
          },
          {
            "name": "p3",
            "datatype": {
              "type": "Vector3"
            }
          },
          {
            "name": "p4",
            "datatype": {
              "type": "Vector3"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "get_ray_collision_sphere",
        "comment": "Get collision info between ray and sphere",
        "return_type": {
          "type": "RayCollision"
        },
        "parameters": [
          {
            "name": "p_ray",
            "datatype": {
              "type": "Ray"
            }
          },
          {
            "name": "center",
            "datatype": {
              "type": "Vector3"
            }
          },
          {
            "name": "radius",
            "datatype": {
              "type": "float"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "get_ray_collision_triangle",
        "comment": "Get collision info between ray and triangle",
        "return_type": {
          "type": "RayCollision"
        },
        "parameters": [
          {
            "name": "p_ray",
            "datatype": {
              "type": "Ray"
            }
          },
          {
            "name": "p1",
            "datatype": {
              "type": "Vector3"
            }
          },
          {
            "name": "p2",
            "datatype": {
              "type": "Vector3"
            }
          },
          {
            "name": "p3",
            "datatype": {
              "type": "Vector3"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "get_render_height",
        "comment": "Get current render height (it considers HiDPI)",
        "return_type": {
          "type": "int"
        },
        "parameters": [],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "get_render_width",
        "comment": "Get current render width (it considers HiDPI)",
        "return_type": {
          "type": "int"
        },
        "parameters": [],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "get_screen_height",
        "comment": "Get current screen height",
        "return_type": {
          "type": "int"
        },
        "parameters": [],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "get_screen_to_world_2d",
        "comment": "Get the world space position for a 2d camera screen space position",
        "return_type": {
          "type": "Vector2"
        },
        "parameters": [
          {
            "name": "position",
            "datatype": {
              "type": "Vector2"
            }
          },
          {
            "name": "p_camera",
            "datatype": {
              "type": "Camera2D"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "get_screen_width",
        "comment": "Get current screen width",
        "return_type": {
          "type": "int"
        },
        "parameters": [],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "get_shader_location",
        "comment": "Get shader uniform location",
        "return_type": {
          "type": "int"
        },
        "parameters": [
          {
            "name": "shader",
            "datatype": {
              "type": "Shader"
            }
          },
          {
            "name": "uniform_name",
            "datatype": {
              "type": "str"
            }
          }
        ],
        "annotations": [
          {
            "name": "@native",
            "argument": ""
          }
        ]
      },
      {
        "name": "get_shader_location_attrib",
        "comment": "Get shader attribute location",
        "return_type": {
          "type": "int"
        },
        "parameters": [
          {
            "name": "shader",
            "datatype": {
              "type": "Shader"
            }
          },
          {
            "name": "attrib_name",
            "datatype": {
              "type": "str"
            }
          }
        ],
        "annotations": [
          {
            "name": "@native",
            "argument": ""
          }
        ]
      },
      {
        "name": "get_sounds_playing",
        "comment": "Get number of sounds playing in the multichannel",
        "return_type": {
          "type": "int"
        },
        "parameters": [],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "get_time",
        "comment": "Get elapsed time in seconds since InitWindow()",
        "return_type": {
          "type": "f64"
        },
        "parameters": [],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "get_touch_point_count",
        "comment": "Get number of touch points",
        "return_type": {
          "type": "int"
        },
        "parameters": [],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "get_touch_point_id",
        "comment": "Get touch point identifier for given index",
        "return_type": {
          "type": "int"
        },
        "parameters": [
          {
            "name": "index",
            "datatype": {
              "type": "int"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "get_touch_position",
        "comment": "Get touch position XY for a touch point index (relative to screen size)",
        "return_type": {
          "type": "Vector2"
        },
        "parameters": [
          {
            "name": "index",
            "datatype": {
              "type": "int"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "get_touch_x",
        "comment": "Get touch position X for touch point 0 (relative to screen size)",
        "return_type": {
          "type": "int"
        },
        "parameters": [],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "get_touch_y",
        "comment": "Get touch position Y for touch point 0 (relative to screen size)",
        "return_type": {
          "type": "int"
        },
        "parameters": [],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "get_window_handle",
        "comment": "Get native window handle",
        "return_type": {
          "type": "VoidPtr",
          "module": "libs.c"
        },
        "parameters": [],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "get_window_position",
        "comment": "Get window position XY on monitor",
        "return_type": {
          "type": "Vector2"
        },
        "parameters": [],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "get_window_scale_dpi",
        "comment": "Get window scale DPI factor",
        "return_type": {
          "type": "Vector2"
        },
        "parameters": [],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "get_working_directory",
        "comment": "Get current working directory (uses static string)",
        "return_type": {
          "type": "Const",
          "arguments": [
            {
              "type": "CStr",
              "module": "libs.c"
            }
          ]
        },
        "parameters": [],
        "annotations": [
          {
            "name": "@native",
            "argument": ""
          }
        ]
      },
      {
        "name": "get_world_to_screen",
        "comment": "Get the screen space position for a 3d world space position",
        "return_type": {
          "type": "Vector2"
        },
        "parameters": [
          {
            "name": "position",
            "datatype": {
              "type": "Vector3"
            }
          },
          {
            "name": "p_camera",
            "datatype": {
              "type": "Camera"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "get_world_to_screen_2d",
        "comment": "Get the screen space position for a 2d camera world space position",
        "return_type": {
          "type": "Vector2"
        },
        "parameters": [
          {
            "name": "position",
            "datatype": {
              "type": "Vector2"
            }
          },
          {
            "name": "p_camera",
            "datatype": {
              "type": "Camera2D"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "get_world_to_screen_ex",
        "comment": "Get size position for a 3d world space position",
        "return_type": {
          "type": "Vector2"
        },
        "parameters": [
          {
            "name": "position",
            "datatype": {
              "type": "Vector3"
            }
          },
          {
            "name": "p_camera",
            "datatype": {
              "type": "Camera"
            }
          },
          {
            "name": "width",
            "datatype": {
              "type": "int"
            }
          },
          {
            "name": "height",
            "datatype": {
              "type": "int"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "glyph_info",
        "comment": "Factory function for: GlyphInfo",
        "return_type": {
          "type": "GlyphInfo"
        },
        "parameters": [
          {
            "name": "value",
            "datatype": {
              "type": "int"
            }
          },
          {
            "name": "offset_x",
            "datatype": {
              "type": "int"
            }
          },
          {
            "name": "offset_y",
            "datatype": {
              "type": "int"
            }
          },
          {
            "name": "advance_x",
            "datatype": {
              "type": "int"
            }
          },
          {
            "name": "p_image",
            "datatype": {
              "type": "Image"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "hide_cursor",
        "comment": "Hides cursor",
        "return_type": {
          "type": "None"
        },
        "parameters": [],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "image",
        "comment": "Factory function for: Image",
        "return_type": {
          "type": "Image"
        },
        "parameters": [
          {
            "name": "data",
            "datatype": {
              "type": "VoidPtr",
              "module": "libs.c"
            }
          },
          {
            "name": "width",
            "datatype": {
              "type": "int"
            }
          },
          {
            "name": "height",
            "datatype": {
              "type": "int"
            }
          },
          {
            "name": "mipmaps",
            "datatype": {
              "type": "int"
            }
          },
          {
            "name": "format",
            "datatype": {
              "type": "int"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "image_alpha_clear",
        "comment": "Clear alpha channel to desired color",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "p_image",
            "datatype": {
              "type": "Ptr",
              "arguments": [
                {
                  "type": "Image"
                }
              ]
            }
          },
          {
            "name": "p_color",
            "datatype": {
              "type": "Color"
            }
          },
          {
            "name": "threshold",
            "datatype": {
              "type": "float"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "image_alpha_crop",
        "comment": "Crop image depending on alpha value",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "p_image",
            "datatype": {
              "type": "Ptr",
              "arguments": [
                {
                  "type": "Image"
                }
              ]
            }
          },
          {
            "name": "threshold",
            "datatype": {
              "type": "float"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "image_alpha_mask",
        "comment": "Apply alpha mask to image",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "p_image",
            "datatype": {
              "type": "Ptr",
              "arguments": [
                {
                  "type": "Image"
                }
              ]
            }
          },
          {
            "name": "alpha_mask",
            "datatype": {
              "type": "Image"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "image_alpha_premultiply",
        "comment": "Premultiply alpha channel",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "p_image",
            "datatype": {
              "type": "Ptr",
              "arguments": [
                {
                  "type": "Image"
                }
              ]
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "image_clear_background",
        "comment": "Clear image background with given color",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "dst",
            "datatype": {
              "type": "Ptr",
              "arguments": [
                {
                  "type": "Image"
                }
              ]
            }
          },
          {
            "name": "p_color",
            "datatype": {
              "type": "Color"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "image_color_brightness",
        "comment": "Modify image color: brightness (-255 to 255)",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "p_image",
            "datatype": {
              "type": "Ptr",
              "arguments": [
                {
                  "type": "Image"
                }
              ]
            }
          },
          {
            "name": "brightness",
            "datatype": {
              "type": "int"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "image_color_contrast",
        "comment": "Modify image color: contrast (-100 to 100)",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "p_image",
            "datatype": {
              "type": "Ptr",
              "arguments": [
                {
                  "type": "Image"
                }
              ]
            }
          },
          {
            "name": "contrast",
            "datatype": {
              "type": "float"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "image_color_grayscale",
        "comment": "Modify image color: grayscale",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "p_image",
            "datatype": {
              "type": "Ptr",
              "arguments": [
                {
                  "type": "Image"
                }
              ]
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "image_color_invert",
        "comment": "Modify image color: invert",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "p_image",
            "datatype": {
              "type": "Ptr",
              "arguments": [
                {
                  "type": "Image"
                }
              ]
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "image_color_replace",
        "comment": "Modify image color: replace color",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "p_image",
            "datatype": {
              "type": "Ptr",
              "arguments": [
                {
                  "type": "Image"
                }
              ]
            }
          },
          {
            "name": "p_color",
            "datatype": {
              "type": "Color"
            }
          },
          {
            "name": "replace",
            "datatype": {
              "type": "Color"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "image_color_tint",
        "comment": "Modify image color: tint",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "p_image",
            "datatype": {
              "type": "Ptr",
              "arguments": [
                {
                  "type": "Image"
                }
              ]
            }
          },
          {
            "name": "p_color",
            "datatype": {
              "type": "Color"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "image_copy",
        "comment": "Create an image duplicate (useful for transformations)",
        "return_type": {
          "type": "Image"
        },
        "parameters": [
          {
            "name": "p_image",
            "datatype": {
              "type": "Image"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "image_crop",
        "comment": "Crop an image to a defined rectangle",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "p_image",
            "datatype": {
              "type": "Ptr",
              "arguments": [
                {
                  "type": "Image"
                }
              ]
            }
          },
          {
            "name": "crop",
            "datatype": {
              "type": "Rectangle"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "image_dither",
        "comment": "Dither image data to 16bpp or lower (Floyd-Steinberg dithering)",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "p_image",
            "datatype": {
              "type": "Ptr",
              "arguments": [
                {
                  "type": "Image"
                }
              ]
            }
          },
          {
            "name": "r_bpp",
            "datatype": {
              "type": "int"
            }
          },
          {
            "name": "g_bpp",
            "datatype": {
              "type": "int"
            }
          },
          {
            "name": "b_bpp",
            "datatype": {
              "type": "int"
            }
          },
          {
            "name": "a_bpp",
            "datatype": {
              "type": "int"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "image_draw",
        "comment": "Draw a source image within a destination image (tint applied to source)",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "dst",
            "datatype": {
              "type": "Ptr",
              "arguments": [
                {
                  "type": "Image"
                }
              ]
            }
          },
          {
            "name": "src",
            "datatype": {
              "type": "Image"
            }
          },
          {
            "name": "src_rec",
            "datatype": {
              "type": "Rectangle"
            }
          },
          {
            "name": "dst_rec",
            "datatype": {
              "type": "Rectangle"
            }
          },
          {
            "name": "tint",
            "datatype": {
              "type": "Color"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "image_draw_circle",
        "comment": "Draw circle within an image",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "dst",
            "datatype": {
              "type": "Ptr",
              "arguments": [
                {
                  "type": "Image"
                }
              ]
            }
          },
          {
            "name": "center_x",
            "datatype": {
              "type": "int"
            }
          },
          {
            "name": "center_y",
            "datatype": {
              "type": "int"
            }
          },
          {
            "name": "radius",
            "datatype": {
              "type": "int"
            }
          },
          {
            "name": "p_color",
            "datatype": {
              "type": "Color"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "image_draw_circle_v",
        "comment": "Draw circle within an image (Vector version)",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "dst",
            "datatype": {
              "type": "Ptr",
              "arguments": [
                {
                  "type": "Image"
                }
              ]
            }
          },
          {
            "name": "center",
            "datatype": {
              "type": "Vector2"
            }
          },
          {
            "name": "radius",
            "datatype": {
              "type": "int"
            }
          },
          {
            "name": "p_color",
            "datatype": {
              "type": "Color"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "image_draw_line",
        "comment": "Draw line within an image",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "dst",
            "datatype": {
              "type": "Ptr",
              "arguments": [
                {
                  "type": "Image"
                }
              ]
            }
          },
          {
            "name": "start_pos_x",
            "datatype": {
              "type": "int"
            }
          },
          {
            "name": "start_pos_y",
            "datatype": {
              "type": "int"
            }
          },
          {
            "name": "end_pos_x",
            "datatype": {
              "type": "int"
            }
          },
          {
            "name": "end_pos_y",
            "datatype": {
              "type": "int"
            }
          },
          {
            "name": "p_color",
            "datatype": {
              "type": "Color"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "image_draw_line_v",
        "comment": "Draw line within an image (Vector version)",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "dst",
            "datatype": {
              "type": "Ptr",
              "arguments": [
                {
                  "type": "Image"
                }
              ]
            }
          },
          {
            "name": "start",
            "datatype": {
              "type": "Vector2"
            }
          },
          {
            "name": "end",
            "datatype": {
              "type": "Vector2"
            }
          },
          {
            "name": "p_color",
            "datatype": {
              "type": "Color"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "image_draw_pixel",
        "comment": "Draw pixel within an image",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "dst",
            "datatype": {
              "type": "Ptr",
              "arguments": [
                {
                  "type": "Image"
                }
              ]
            }
          },
          {
            "name": "pos_x",
            "datatype": {
              "type": "int"
            }
          },
          {
            "name": "pos_y",
            "datatype": {
              "type": "int"
            }
          },
          {
            "name": "p_color",
            "datatype": {
              "type": "Color"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "image_draw_pixel_v",
        "comment": "Draw pixel within an image (Vector version)",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "dst",
            "datatype": {
              "type": "Ptr",
              "arguments": [
                {
                  "type": "Image"
                }
              ]
            }
          },
          {
            "name": "position",
            "datatype": {
              "type": "Vector2"
            }
          },
          {
            "name": "p_color",
            "datatype": {
              "type": "Color"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "image_draw_rectangle",
        "comment": "Draw rectangle within an image",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "dst",
            "datatype": {
              "type": "Ptr",
              "arguments": [
                {
                  "type": "Image"
                }
              ]
            }
          },
          {
            "name": "pos_x",
            "datatype": {
              "type": "int"
            }
          },
          {
            "name": "pos_y",
            "datatype": {
              "type": "int"
            }
          },
          {
            "name": "width",
            "datatype": {
              "type": "int"
            }
          },
          {
            "name": "height",
            "datatype": {
              "type": "int"
            }
          },
          {
            "name": "p_color",
            "datatype": {
              "type": "Color"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "image_draw_rectangle_lines",
        "comment": "Draw rectangle lines within an image",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "dst",
            "datatype": {
              "type": "Ptr",
              "arguments": [
                {
                  "type": "Image"
                }
              ]
            }
          },
          {
            "name": "rec",
            "datatype": {
              "type": "Rectangle"
            }
          },
          {
            "name": "thick",
            "datatype": {
              "type": "int"
            }
          },
          {
            "name": "p_color",
            "datatype": {
              "type": "Color"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "image_draw_rectangle_rec",
        "comment": "Draw rectangle within an image",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "dst",
            "datatype": {
              "type": "Ptr",
              "arguments": [
                {
                  "type": "Image"
                }
              ]
            }
          },
          {
            "name": "rec",
            "datatype": {
              "type": "Rectangle"
            }
          },
          {
            "name": "p_color",
            "datatype": {
              "type": "Color"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "image_draw_rectangle_v",
        "comment": "Draw rectangle within an image (Vector version)",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "dst",
            "datatype": {
              "type": "Ptr",
              "arguments": [
                {
                  "type": "Image"
                }
              ]
            }
          },
          {
            "name": "position",
            "datatype": {
              "type": "Vector2"
            }
          },
          {
            "name": "size",
            "datatype": {
              "type": "Vector2"
            }
          },
          {
            "name": "p_color",
            "datatype": {
              "type": "Color"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "image_draw_text",
        "comment": "Draw text (using default font) within an image (destination)",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "dst",
            "datatype": {
              "type": "Ptr",
              "arguments": [
                {
                  "type": "Image"
                }
              ]
            }
          },
          {
            "name": "text",
            "datatype": {
              "type": "str"
            }
          },
          {
            "name": "pos_x",
            "datatype": {
              "type": "int"
            }
          },
          {
            "name": "pos_y",
            "datatype": {
              "type": "int"
            }
          },
          {
            "name": "font_size",
            "datatype": {
              "type": "int"
            }
          },
          {
            "name": "p_color",
            "datatype": {
              "type": "Color"
            }
          }
        ],
        "annotations": [
          {
            "name": "@native",
            "argument": ""
          }
        ]
      },
      {
        "name": "image_draw_text_ex",
        "comment": "Draw text (custom sprite font) within an image (destination)",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "dst",
            "datatype": {
              "type": "Ptr",
              "arguments": [
                {
                  "type": "Image"
                }
              ]
            }
          },
          {
            "name": "p_font",
            "datatype": {
              "type": "Font"
            }
          },
          {
            "name": "text",
            "datatype": {
              "type": "str"
            }
          },
          {
            "name": "position",
            "datatype": {
              "type": "Vector2"
            }
          },
          {
            "name": "font_size",
            "datatype": {
              "type": "float"
            }
          },
          {
            "name": "spacing",
            "datatype": {
              "type": "float"
            }
          },
          {
            "name": "tint",
            "datatype": {
              "type": "Color"
            }
          }
        ],
        "annotations": [
          {
            "name": "@native",
            "argument": ""
          }
        ]
      },
      {
        "name": "image_flip_horizontal",
        "comment": "Flip image horizontally",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "p_image",
            "datatype": {
              "type": "Ptr",
              "arguments": [
                {
                  "type": "Image"
                }
              ]
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "image_flip_vertical",
        "comment": "Flip image vertically",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "p_image",
            "datatype": {
              "type": "Ptr",
              "arguments": [
                {
                  "type": "Image"
                }
              ]
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "image_format",
        "comment": "Convert image data to desired format",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "p_image",
            "datatype": {
              "type": "Ptr",
              "arguments": [
                {
                  "type": "Image"
                }
              ]
            }
          },
          {
            "name": "new_format",
            "datatype": {
              "type": "int"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "image_from_image",
        "comment": "Create an image from another image piece",
        "return_type": {
          "type": "Image"
        },
        "parameters": [
          {
            "name": "p_image",
            "datatype": {
              "type": "Image"
            }
          },
          {
            "name": "rec",
            "datatype": {
              "type": "Rectangle"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "image_mipmaps",
        "comment": "Compute all mipmap levels for a provided image",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "p_image",
            "datatype": {
              "type": "Ptr",
              "arguments": [
                {
                  "type": "Image"
                }
              ]
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "image_resize",
        "comment": "Resize image (Bicubic scaling algorithm)",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "p_image",
            "datatype": {
              "type": "Ptr",
              "arguments": [
                {
                  "type": "Image"
                }
              ]
            }
          },
          {
            "name": "new_width",
            "datatype": {
              "type": "int"
            }
          },
          {
            "name": "new_height",
            "datatype": {
              "type": "int"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "image_resize_canvas",
        "comment": "Resize canvas and fill with color",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "p_image",
            "datatype": {
              "type": "Ptr",
              "arguments": [
                {
                  "type": "Image"
                }
              ]
            }
          },
          {
            "name": "new_width",
            "datatype": {
              "type": "int"
            }
          },
          {
            "name": "new_height",
            "datatype": {
              "type": "int"
            }
          },
          {
            "name": "offset_x",
            "datatype": {
              "type": "int"
            }
          },
          {
            "name": "offset_y",
            "datatype": {
              "type": "int"
            }
          },
          {
            "name": "fill",
            "datatype": {
              "type": "Color"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "image_resize_nn",
        "comment": "Resize image (Nearest-Neighbor scaling algorithm)",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "p_image",
            "datatype": {
              "type": "Ptr",
              "arguments": [
                {
                  "type": "Image"
                }
              ]
            }
          },
          {
            "name": "new_width",
            "datatype": {
              "type": "int"
            }
          },
          {
            "name": "new_height",
            "datatype": {
              "type": "int"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "image_rotate_ccw",
        "comment": "Rotate image counter-clockwise 90deg",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "p_image",
            "datatype": {
              "type": "Ptr",
              "arguments": [
                {
                  "type": "Image"
                }
              ]
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "image_rotate_cw",
        "comment": "Rotate image clockwise 90deg",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "p_image",
            "datatype": {
              "type": "Ptr",
              "arguments": [
                {
                  "type": "Image"
                }
              ]
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "image_text",
        "comment": "Create an image from text (default font)",
        "return_type": {
          "type": "Image"
        },
        "parameters": [
          {
            "name": "text",
            "datatype": {
              "type": "str"
            }
          },
          {
            "name": "font_size",
            "datatype": {
              "type": "int"
            }
          },
          {
            "name": "p_color",
            "datatype": {
              "type": "Color"
            }
          }
        ],
        "annotations": [
          {
            "name": "@native",
            "argument": ""
          }
        ]
      },
      {
        "name": "image_text_ex",
        "comment": "Create an image from text (custom sprite font)",
        "return_type": {
          "type": "Image"
        },
        "parameters": [
          {
            "name": "p_font",
            "datatype": {
              "type": "Font"
            }
          },
          {
            "name": "text",
            "datatype": {
              "type": "str"
            }
          },
          {
            "name": "font_size",
            "datatype": {
              "type": "float"
            }
          },
          {
            "name": "spacing",
            "datatype": {
              "type": "float"
            }
          },
          {
            "name": "tint",
            "datatype": {
              "type": "Color"
            }
          }
        ],
        "annotations": [
          {
            "name": "@native",
            "argument": ""
          }
        ]
      },
      {
        "name": "image_to_pot",
        "comment": "Convert image to POT (power-of-two)",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "p_image",
            "datatype": {
              "type": "Ptr",
              "arguments": [
                {
                  "type": "Image"
                }
              ]
            }
          },
          {
            "name": "fill",
            "datatype": {
              "type": "Color"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "init_audio_device",
        "comment": "Initialize audio device and context",
        "return_type": {
          "type": "None"
        },
        "parameters": [],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "init_window",
        "comment": "Initialize window and OpenGL context",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "width",
            "datatype": {
              "type": "int"
            }
          },
          {
            "name": "height",
            "datatype": {
              "type": "int"
            }
          },
          {
            "name": "title",
            "datatype": {
              "type": "str"
            }
          }
        ],
        "annotations": [
          {
            "name": "@native",
            "argument": ""
          }
        ]
      },
      {
        "name": "is_audio_device_ready",
        "comment": "Check if audio device has been initialized successfully",
        "return_type": {
          "type": "bool"
        },
        "parameters": [],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "is_audio_stream_playing",
        "comment": "Check if audio stream is playing",
        "return_type": {
          "type": "bool"
        },
        "parameters": [
          {
            "name": "stream",
            "datatype": {
              "type": "AudioStream"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "is_audio_stream_processed",
        "comment": "Check if any audio stream buffers requires refill",
        "return_type": {
          "type": "bool"
        },
        "parameters": [
          {
            "name": "stream",
            "datatype": {
              "type": "AudioStream"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "is_cursor_hidden",
        "comment": "Check if cursor is not visible",
        "return_type": {
          "type": "bool"
        },
        "parameters": [],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "is_cursor_on_screen",
        "comment": "Check if cursor is on the screen",
        "return_type": {
          "type": "bool"
        },
        "parameters": [],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "is_file_dropped",
        "comment": "Check if a file has been dropped into window",
        "return_type": {
          "type": "bool"
        },
        "parameters": [],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "is_file_extension",
        "comment": "Check file extension (including point: .png, .wav)",
        "return_type": {
          "type": "bool"
        },
        "parameters": [
          {
            "name": "file_name",
            "datatype": {
              "type": "str"
            }
          },
          {
            "name": "ext",
            "datatype": {
              "type": "str"
            }
          }
        ],
        "annotations": [
          {
            "name": "@native",
            "argument": ""
          }
        ]
      },
      {
        "name": "is_gamepad_available",
        "comment": "Check if a gamepad is available",
        "return_type": {
          "type": "bool"
        },
        "parameters": [
          {
            "name": "gamepad",
            "datatype": {
              "type": "int"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "is_gamepad_button_down",
        "comment": "Check if a gamepad button is being pressed",
        "return_type": {
          "type": "bool"
        },
        "parameters": [
          {
            "name": "gamepad",
            "datatype": {
              "type": "int"
            }
          },
          {
            "name": "button",
            "datatype": {
              "type": "int"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "is_gamepad_button_pressed",
        "comment": "Check if a gamepad button has been pressed once",
        "return_type": {
          "type": "bool"
        },
        "parameters": [
          {
            "name": "gamepad",
            "datatype": {
              "type": "int"
            }
          },
          {
            "name": "button",
            "datatype": {
              "type": "int"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "is_gamepad_button_released",
        "comment": "Check if a gamepad button has been released once",
        "return_type": {
          "type": "bool"
        },
        "parameters": [
          {
            "name": "gamepad",
            "datatype": {
              "type": "int"
            }
          },
          {
            "name": "button",
            "datatype": {
              "type": "int"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "is_gamepad_button_up",
        "comment": "Check if a gamepad button is NOT being pressed",
        "return_type": {
          "type": "bool"
        },
        "parameters": [
          {
            "name": "gamepad",
            "datatype": {
              "type": "int"
            }
          },
          {
            "name": "button",
            "datatype": {
              "type": "int"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "is_gesture_detected",
        "comment": "Check if a gesture have been detected",
        "return_type": {
          "type": "bool"
        },
        "parameters": [
          {
            "name": "gesture",
            "datatype": {
              "type": "int"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "is_key_down",
        "comment": "Check if a key is being pressed",
        "return_type": {
          "type": "bool"
        },
        "parameters": [
          {
            "name": "key",
            "datatype": {
              "type": "int"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "is_key_pressed",
        "comment": "Check if a key has been pressed once",
        "return_type": {
          "type": "bool"
        },
        "parameters": [
          {
            "name": "key",
            "datatype": {
              "type": "int"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "is_key_released",
        "comment": "Check if a key has been released once",
        "return_type": {
          "type": "bool"
        },
        "parameters": [
          {
            "name": "key",
            "datatype": {
              "type": "int"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "is_key_up",
        "comment": "Check if a key is NOT being pressed",
        "return_type": {
          "type": "bool"
        },
        "parameters": [
          {
            "name": "key",
            "datatype": {
              "type": "int"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "is_model_animation_valid",
        "comment": "Check model animation skeleton match",
        "return_type": {
          "type": "bool"
        },
        "parameters": [
          {
            "name": "model",
            "datatype": {
              "type": "Model"
            }
          },
          {
            "name": "anim",
            "datatype": {
              "type": "ModelAnimation"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "is_mouse_button_down",
        "comment": "Check if a mouse button is being pressed",
        "return_type": {
          "type": "bool"
        },
        "parameters": [
          {
            "name": "button",
            "datatype": {
              "type": "int"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "is_mouse_button_pressed",
        "comment": "Check if a mouse button has been pressed once",
        "return_type": {
          "type": "bool"
        },
        "parameters": [
          {
            "name": "button",
            "datatype": {
              "type": "int"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "is_mouse_button_released",
        "comment": "Check if a mouse button has been released once",
        "return_type": {
          "type": "bool"
        },
        "parameters": [
          {
            "name": "button",
            "datatype": {
              "type": "int"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "is_mouse_button_up",
        "comment": "Check if a mouse button is NOT being pressed",
        "return_type": {
          "type": "bool"
        },
        "parameters": [
          {
            "name": "button",
            "datatype": {
              "type": "int"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "is_music_stream_playing",
        "comment": "Check if music is playing",
        "return_type": {
          "type": "bool"
        },
        "parameters": [
          {
            "name": "p_music",
            "datatype": {
              "type": "Music"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "is_path_file",
        "comment": "Check if a given path is a file or a directory",
        "return_type": {
          "type": "bool"
        },
        "parameters": [
          {
            "name": "path",
            "datatype": {
              "type": "str"
            }
          }
        ],
        "annotations": [
          {
            "name": "@native",
            "argument": ""
          }
        ]
      },
      {
        "name": "is_sound_playing",
        "comment": "Check if a sound is currently playing",
        "return_type": {
          "type": "bool"
        },
        "parameters": [
          {
            "name": "p_sound",
            "datatype": {
              "type": "Sound"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "is_window_focused",
        "comment": "Check if window is currently focused (only PLATFORM_DESKTOP)",
        "return_type": {
          "type": "bool"
        },
        "parameters": [],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "is_window_fullscreen",
        "comment": "Check if window is currently fullscreen",
        "return_type": {
          "type": "bool"
        },
        "parameters": [],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "is_window_hidden",
        "comment": "Check if window is currently hidden (only PLATFORM_DESKTOP)",
        "return_type": {
          "type": "bool"
        },
        "parameters": [],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "is_window_maximized",
        "comment": "Check if window is currently maximized (only PLATFORM_DESKTOP)",
        "return_type": {
          "type": "bool"
        },
        "parameters": [],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "is_window_minimized",
        "comment": "Check if window is currently minimized (only PLATFORM_DESKTOP)",
        "return_type": {
          "type": "bool"
        },
        "parameters": [],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "is_window_ready",
        "comment": "Check if window has been initialized successfully",
        "return_type": {
          "type": "bool"
        },
        "parameters": [],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "is_window_resized",
        "comment": "Check if window has been resized last frame",
        "return_type": {
          "type": "bool"
        },
        "parameters": [],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "is_window_state",
        "comment": "Check if one specific window flag is enabled",
        "return_type": {
          "type": "bool"
        },
        "parameters": [
          {
            "name": "flag",
            "datatype": {
              "type": "u32"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "load_audio_stream",
        "comment": "Load audio stream (to stream raw audio pcm data)",
        "return_type": {
          "type": "AudioStream"
        },
        "parameters": [
          {
            "name": "sample_rate",
            "datatype": {
              "type": "u32"
            }
          },
          {
            "name": "sample_size",
            "datatype": {
              "type": "u32"
            }
          },
          {
            "name": "channels",
            "datatype": {
              "type": "u32"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "load_codepoints",
        "comment": "Load all codepoints from a UTF-8 text string, codepoints count returned by parameter",
        "return_type": {
          "type": "Ptr",
          "arguments": [
            {
              "type": "CInt",
              "module": "libs.c"
            }
          ]
        },
        "parameters": [
          {
            "name": "text",
            "datatype": {
              "type": "str"
            }
          },
          {
            "name": "count",
            "datatype": {
              "type": "Ptr",
              "arguments": [
                {
                  "type": "CInt",
                  "module": "libs.c"
                }
              ]
            }
          }
        ],
        "annotations": [
          {
            "name": "@native",
            "argument": ""
          }
        ]
      },
      {
        "name": "load_directory_files",
        "comment": "Load directory filepaths",
        "return_type": {
          "type": "FilePathList"
        },
        "parameters": [
          {
            "name": "dir_path",
            "datatype": {
              "type": "str"
            }
          }
        ],
        "annotations": [
          {
            "name": "@native",
            "argument": ""
          }
        ]
      },
      {
        "name": "load_directory_files_ex",
        "comment": "Load directory filepaths with extension filtering and recursive directory scan",
        "return_type": {
          "type": "FilePathList"
        },
        "parameters": [
          {
            "name": "base_path",
            "datatype": {
              "type": "str"
            }
          },
          {
            "name": "filter",
            "datatype": {
              "type": "str"
            }
          },
          {
            "name": "scan_subdirs",
            "datatype": {
              "type": "bool"
            }
          }
        ],
        "annotations": [
          {
            "name": "@native",
            "argument": ""
          }
        ]
      },
      {
        "name": "load_dropped_files",
        "comment": "Load dropped filepaths",
        "return_type": {
          "type": "FilePathList"
        },
        "parameters": [],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "load_file_data",
        "comment": "Load file data as byte array (read)",
        "return_type": {
          "type": "Ptr",
          "arguments": [
            {
              "type": "CUChar",
              "module": "libs.c"
            }
          ]
        },
        "parameters": [
          {
            "name": "file_name",
            "datatype": {
              "type": "str"
            }
          },
          {
            "name": "bytes_read",
            "datatype": {
              "type": "Ptr",
              "arguments": [
                {
                  "type": "CUInt",
                  "module": "libs.c"
                }
              ]
            }
          }
        ],
        "annotations": [
          {
            "name": "@native",
            "argument": ""
          }
        ]
      },
      {
        "name": "load_file_text",
        "comment": "Load text data from file (read), returns a '\\0' terminated string",
        "return_type": {
          "type": "CStr",
          "module": "libs.c"
        },
        "parameters": [
          {
            "name": "file_name",
            "datatype": {
              "type": "str"
            }
          }
        ],
        "annotations": [
          {
            "name": "@native",
            "argument": ""
          }
        ]
      },
      {
        "name": "load_font",
        "comment": "Load font from file into GPU memory (VRAM)",
        "return_type": {
          "type": "Font"
        },
        "parameters": [
          {
            "name": "file_name",
            "datatype": {
              "type": "str"
            }
          }
        ],
        "annotations": [
          {
            "name": "@native",
            "argument": ""
          }
        ]
      },
      {
        "name": "load_font_data",
        "comment": "Load font data for further use",
        "return_type": {
          "type": "Ptr",
          "arguments": [
            {
              "type": "GlyphInfo"
            }
          ]
        },
        "parameters": [
          {
            "name": "file_data",
            "datatype": {
              "type": "Const",
              "arguments": [
                {
                  "type": "Ptr",
                  "arguments": [
                    {
                      "type": "CUChar",
                      "module": "libs.c"
                    }
                  ]
                }
              ]
            }
          },
          {
            "name": "data_size",
            "datatype": {
              "type": "int"
            }
          },
          {
            "name": "font_size",
            "datatype": {
              "type": "int"
            }
          },
          {
            "name": "font_chars",
            "datatype": {
              "type": "Ptr",
              "arguments": [
                {
                  "type": "CInt",
                  "module": "libs.c"
                }
              ]
            }
          },
          {
            "name": "glyph_count",
            "datatype": {
              "type": "int"
            }
          },
          {
            "name": "type",
            "datatype": {
              "type": "int"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "load_font_ex",
        "comment": "Load font from file with extended parameters, use NULL for fontChars and 0 for glyphCount to load the default character set",
        "return_type": {
          "type": "Font"
        },
        "parameters": [
          {
            "name": "file_name",
            "datatype": {
              "type": "str"
            }
          },
          {
            "name": "font_size",
            "datatype": {
              "type": "int"
            }
          },
          {
            "name": "font_chars",
            "datatype": {
              "type": "Ptr",
              "arguments": [
                {
                  "type": "CInt",
                  "module": "libs.c"
                }
              ]
            }
          },
          {
            "name": "glyph_count",
            "datatype": {
              "type": "int"
            }
          }
        ],
        "annotations": [
          {
            "name": "@native",
            "argument": ""
          }
        ]
      },
      {
        "name": "load_font_from_image",
        "comment": "Load font from Image (XNA style)",
        "return_type": {
          "type": "Font"
        },
        "parameters": [
          {
            "name": "p_image",
            "datatype": {
              "type": "Image"
            }
          },
          {
            "name": "key",
            "datatype": {
              "type": "Color"
            }
          },
          {
            "name": "first_char",
            "datatype": {
              "type": "int"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "load_font_from_memory",
        "comment": "Load font from memory buffer, fileType refers to extension: i.e. '.ttf'",
        "return_type": {
          "type": "Font"
        },
        "parameters": [
          {
            "name": "file_type",
            "datatype": {
              "type": "str"
            }
          },
          {
            "name": "file_data",
            "datatype": {
              "type": "Const",
              "arguments": [
                {
                  "type": "Ptr",
                  "arguments": [
                    {
                      "type": "CUChar",
                      "module": "libs.c"
                    }
                  ]
                }
              ]
            }
          },
          {
            "name": "data_size",
            "datatype": {
              "type": "int"
            }
          },
          {
            "name": "font_size",
            "datatype": {
              "type": "int"
            }
          },
          {
            "name": "font_chars",
            "datatype": {
              "type": "Ptr",
              "arguments": [
                {
                  "type": "CInt",
                  "module": "libs.c"
                }
              ]
            }
          },
          {
            "name": "glyph_count",
            "datatype": {
              "type": "int"
            }
          }
        ],
        "annotations": [
          {
            "name": "@native",
            "argument": ""
          }
        ]
      },
      {
        "name": "load_image",
        "comment": "Load image from file into CPU memory (RAM)",
        "return_type": {
          "type": "Image"
        },
        "parameters": [
          {
            "name": "file_name",
            "datatype": {
              "type": "str"
            }
          }
        ],
        "annotations": [
          {
            "name": "@native",
            "argument": ""
          }
        ]
      },
      {
        "name": "load_image_anim",
        "comment": "Load image sequence from file (frames appended to image.data)",
        "return_type": {
          "type": "Image"
        },
        "parameters": [
          {
            "name": "file_name",
            "datatype": {
              "type": "str"
            }
          },
          {
            "name": "frames",
            "datatype": {
              "type": "Ptr",
              "arguments": [
                {
                  "type": "CInt",
                  "module": "libs.c"
                }
              ]
            }
          }
        ],
        "annotations": [
          {
            "name": "@native",
            "argument": ""
          }
        ]
      },
      {
        "name": "load_image_colors",
        "comment": "Load color data from image as a Color array (RGBA - 32bit)",
        "return_type": {
          "type": "Ptr",
          "arguments": [
            {
              "type": "Color"
            }
          ]
        },
        "parameters": [
          {
            "name": "p_image",
            "datatype": {
              "type": "Image"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "load_image_from_memory",
        "comment": "Load image from memory buffer, fileType refers to extension: i.e. '.png'",
        "return_type": {
          "type": "Image"
        },
        "parameters": [
          {
            "name": "file_type",
            "datatype": {
              "type": "str"
            }
          },
          {
            "name": "file_data",
            "datatype": {
              "type": "Const",
              "arguments": [
                {
                  "type": "Ptr",
                  "arguments": [
                    {
                      "type": "CUChar",
                      "module": "libs.c"
                    }
                  ]
                }
              ]
            }
          },
          {
            "name": "data_size",
            "datatype": {
              "type": "int"
            }
          }
        ],
        "annotations": [
          {
            "name": "@native",
            "argument": ""
          }
        ]
      },
      {
        "name": "load_image_from_screen",
        "comment": "Load image from screen buffer and (screenshot)",
        "return_type": {
          "type": "Image"
        },
        "parameters": [],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "load_image_from_texture",
        "comment": "Load image from GPU texture data",
        "return_type": {
          "type": "Image"
        },
        "parameters": [
          {
            "name": "p_texture",
            "datatype": {
              "type": "Texture2D"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "load_image_palette",
        "comment": "Load colors palette from image as a Color array (RGBA - 32bit)",
        "return_type": {
          "type": "Ptr",
          "arguments": [
            {
              "type": "Color"
            }
          ]
        },
        "parameters": [
          {
            "name": "p_image",
            "datatype": {
              "type": "Image"
            }
          },
          {
            "name": "max_palette_size",
            "datatype": {
              "type": "int"
            }
          },
          {
            "name": "color_count",
            "datatype": {
              "type": "Ptr",
              "arguments": [
                {
                  "type": "CInt",
                  "module": "libs.c"
                }
              ]
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "load_image_raw",
        "comment": "Load image from RAW file data",
        "return_type": {
          "type": "Image"
        },
        "parameters": [
          {
            "name": "file_name",
            "datatype": {
              "type": "str"
            }
          },
          {
            "name": "width",
            "datatype": {
              "type": "int"
            }
          },
          {
            "name": "height",
            "datatype": {
              "type": "int"
            }
          },
          {
            "name": "format",
            "datatype": {
              "type": "int"
            }
          },
          {
            "name": "header_size",
            "datatype": {
              "type": "int"
            }
          }
        ],
        "annotations": [
          {
            "name": "@native",
            "argument": ""
          }
        ]
      },
      {
        "name": "load_material_default",
        "comment": "Load default material (Supports: DIFFUSE, SPECULAR, NORMAL maps)",
        "return_type": {
          "type": "Material"
        },
        "parameters": [],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "load_materials",
        "comment": "Load materials from model file",
        "return_type": {
          "type": "Ptr",
          "arguments": [
            {
              "type": "Material"
            }
          ]
        },
        "parameters": [
          {
            "name": "file_name",
            "datatype": {
              "type": "str"
            }
          },
          {
            "name": "material_count",
            "datatype": {
              "type": "Ptr",
              "arguments": [
                {
                  "type": "CInt",
                  "module": "libs.c"
                }
              ]
            }
          }
        ],
        "annotations": [
          {
            "name": "@native",
            "argument": ""
          }
        ]
      },
      {
        "name": "load_model",
        "comment": "Load model from files (meshes and materials)",
        "return_type": {
          "type": "Model"
        },
        "parameters": [
          {
            "name": "file_name",
            "datatype": {
              "type": "str"
            }
          }
        ],
        "annotations": [
          {
            "name": "@native",
            "argument": ""
          }
        ]
      },
      {
        "name": "load_model_animations",
        "comment": "Load model animations from file",
        "return_type": {
          "type": "Ptr",
          "arguments": [
            {
              "type": "ModelAnimation"
            }
          ]
        },
        "parameters": [
          {
            "name": "file_name",
            "datatype": {
              "type": "str"
            }
          },
          {
            "name": "anim_count",
            "datatype": {
              "type": "Ptr",
              "arguments": [
                {
                  "type": "CUInt",
                  "module": "libs.c"
                }
              ]
            }
          }
        ],
        "annotations": [
          {
            "name": "@native",
            "argument": ""
          }
        ]
      },
      {
        "name": "load_model_from_mesh",
        "comment": "Load model from generated mesh (default material)",
        "return_type": {
          "type": "Model"
        },
        "parameters": [
          {
            "name": "mesh",
            "datatype": {
              "type": "Mesh"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "load_music_stream",
        "comment": "Load music stream from file",
        "return_type": {
          "type": "Music"
        },
        "parameters": [
          {
            "name": "file_name",
            "datatype": {
              "type": "str"
            }
          }
        ],
        "annotations": [
          {
            "name": "@native",
            "argument": ""
          }
        ]
      },
      {
        "name": "load_music_stream_from_memory",
        "comment": "Load music stream from data",
        "return_type": {
          "type": "Music"
        },
        "parameters": [
          {
            "name": "file_type",
            "datatype": {
              "type": "str"
            }
          },
          {
            "name": "data",
            "datatype": {
              "type": "Const",
              "arguments": [
                {
                  "type": "Ptr",
                  "arguments": [
                    {
                      "type": "CUChar",
                      "module": "libs.c"
                    }
                  ]
                }
              ]
            }
          },
          {
            "name": "data_size",
            "datatype": {
              "type": "int"
            }
          }
        ],
        "annotations": [
          {
            "name": "@native",
            "argument": ""
          }
        ]
      },
      {
        "name": "load_render_texture",
        "comment": "Load texture for rendering (framebuffer)",
        "return_type": {
          "type": "RenderTexture2D"
        },
        "parameters": [
          {
            "name": "width",
            "datatype": {
              "type": "int"
            }
          },
          {
            "name": "height",
            "datatype": {
              "type": "int"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "load_shader",
        "comment": "Load shader from files and bind default locations",
        "return_type": {
          "type": "Shader"
        },
        "parameters": [
          {
            "name": "vs_file_name",
            "datatype": {
              "type": "str"
            }
          },
          {
            "name": "fs_file_name",
            "datatype": {
              "type": "str"
            }
          }
        ],
        "annotations": [
          {
            "name": "@native",
            "argument": ""
          }
        ]
      },
      {
        "name": "load_shader_from_memory",
        "comment": "Load shader from code strings and bind default locations",
        "return_type": {
          "type": "Shader"
        },
        "parameters": [
          {
            "name": "vs_code",
            "datatype": {
              "type": "str"
            }
          },
          {
            "name": "fs_code",
            "datatype": {
              "type": "str"
            }
          }
        ],
        "annotations": [
          {
            "name": "@native",
            "argument": ""
          }
        ]
      },
      {
        "name": "load_sound",
        "comment": "Load sound from file",
        "return_type": {
          "type": "Sound"
        },
        "parameters": [
          {
            "name": "file_name",
            "datatype": {
              "type": "str"
            }
          }
        ],
        "annotations": [
          {
            "name": "@native",
            "argument": ""
          }
        ]
      },
      {
        "name": "load_sound_from_wave",
        "comment": "Load sound from wave data",
        "return_type": {
          "type": "Sound"
        },
        "parameters": [
          {
            "name": "p_wave",
            "datatype": {
              "type": "Wave"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "load_texture",
        "comment": "Load texture from file into GPU memory (VRAM)",
        "return_type": {
          "type": "Texture2D"
        },
        "parameters": [
          {
            "name": "file_name",
            "datatype": {
              "type": "str"
            }
          }
        ],
        "annotations": [
          {
            "name": "@native",
            "argument": ""
          }
        ]
      },
      {
        "name": "load_texture_cubemap",
        "comment": "Load cubemap from image, multiple image cubemap layouts supported",
        "return_type": {
          "type": "TextureCubemap"
        },
        "parameters": [
          {
            "name": "p_image",
            "datatype": {
              "type": "Image"
            }
          },
          {
            "name": "layout",
            "datatype": {
              "type": "int"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "load_texture_from_image",
        "comment": "Load texture from image data",
        "return_type": {
          "type": "Texture2D"
        },
        "parameters": [
          {
            "name": "p_image",
            "datatype": {
              "type": "Image"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "load_vr_stereo_config",
        "comment": "Load VR stereo config for VR simulator device parameters",
        "return_type": {
          "type": "VrStereoConfig"
        },
        "parameters": [
          {
            "name": "device",
            "datatype": {
              "type": "VrDeviceInfo"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "load_wave",
        "comment": "Load wave data from file",
        "return_type": {
          "type": "Wave"
        },
        "parameters": [
          {
            "name": "file_name",
            "datatype": {
              "type": "str"
            }
          }
        ],
        "annotations": [
          {
            "name": "@native",
            "argument": ""
          }
        ]
      },
      {
        "name": "load_wave_from_memory",
        "comment": "Load wave from memory buffer, fileType refers to extension: i.e. '.wav'",
        "return_type": {
          "type": "Wave"
        },
        "parameters": [
          {
            "name": "file_type",
            "datatype": {
              "type": "str"
            }
          },
          {
            "name": "file_data",
            "datatype": {
              "type": "Const",
              "arguments": [
                {
                  "type": "Ptr",
                  "arguments": [
                    {
                      "type": "CUChar",
                      "module": "libs.c"
                    }
                  ]
                }
              ]
            }
          },
          {
            "name": "data_size",
            "datatype": {
              "type": "int"
            }
          }
        ],
        "annotations": [
          {
            "name": "@native",
            "argument": ""
          }
        ]
      },
      {
        "name": "load_wave_samples",
        "comment": "Load samples data from wave as a 32bit float data array",
        "return_type": {
          "type": "Ptr",
          "arguments": [
            {
              "type": "CFloat",
              "module": "libs.c"
            }
          ]
        },
        "parameters": [
          {
            "name": "p_wave",
            "datatype": {
              "type": "Wave"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "material_map",
        "comment": "Factory function for: MaterialMap",
        "return_type": {
          "type": "MaterialMap"
        },
        "parameters": [
          {
            "name": "p_texture",
            "datatype": {
              "type": "Texture2D"
            }
          },
          {
            "name": "p_color",
            "datatype": {
              "type": "Color"
            }
          },
          {
            "name": "value",
            "datatype": {
              "type": "float"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "matrix",
        "comment": "Factory function for: Matrix",
        "return_type": {
          "type": "Matrix"
        },
        "parameters": [
          {
            "name": "m0",
            "datatype": {
              "type": "float"
            }
          },
          {
            "name": "m4",
            "datatype": {
              "type": "float"
            }
          },
          {
            "name": "m8",
            "datatype": {
              "type": "float"
            }
          },
          {
            "name": "m12",
            "datatype": {
              "type": "float"
            }
          },
          {
            "name": "m1",
            "datatype": {
              "type": "float"
            }
          },
          {
            "name": "m5",
            "datatype": {
              "type": "float"
            }
          },
          {
            "name": "m9",
            "datatype": {
              "type": "float"
            }
          },
          {
            "name": "m13",
            "datatype": {
              "type": "float"
            }
          },
          {
            "name": "m2",
            "datatype": {
              "type": "float"
            }
          },
          {
            "name": "m6",
            "datatype": {
              "type": "float"
            }
          },
          {
            "name": "m10",
            "datatype": {
              "type": "float"
            }
          },
          {
            "name": "m14",
            "datatype": {
              "type": "float"
            }
          },
          {
            "name": "m3",
            "datatype": {
              "type": "float"
            }
          },
          {
            "name": "m7",
            "datatype": {
              "type": "float"
            }
          },
          {
            "name": "m11",
            "datatype": {
              "type": "float"
            }
          },
          {
            "name": "m15",
            "datatype": {
              "type": "float"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "maximize_window",
        "comment": "Set window state: maximized, if resizable (only PLATFORM_DESKTOP)",
        "return_type": {
          "type": "None"
        },
        "parameters": [],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "measure_text",
        "comment": "Measure string width for default font",
        "return_type": {
          "type": "int"
        },
        "parameters": [
          {
            "name": "text",
            "datatype": {
              "type": "str"
            }
          },
          {
            "name": "font_size",
            "datatype": {
              "type": "int"
            }
          }
        ],
        "annotations": [
          {
            "name": "@native",
            "argument": ""
          }
        ]
      },
      {
        "name": "measure_text_ex",
        "comment": "Measure string size for Font",
        "return_type": {
          "type": "Vector2"
        },
        "parameters": [
          {
            "name": "p_font",
            "datatype": {
              "type": "Font"
            }
          },
          {
            "name": "text",
            "datatype": {
              "type": "str"
            }
          },
          {
            "name": "font_size",
            "datatype": {
              "type": "float"
            }
          },
          {
            "name": "spacing",
            "datatype": {
              "type": "float"
            }
          }
        ],
        "annotations": [
          {
            "name": "@native",
            "argument": ""
          }
        ]
      },
      {
        "name": "mem_alloc",
        "comment": "Internal memory allocator",
        "return_type": {
          "type": "VoidPtr",
          "module": "libs.c"
        },
        "parameters": [
          {
            "name": "size",
            "datatype": {
              "type": "int"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "mem_free",
        "comment": "Internal memory free",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "ptr",
            "datatype": {
              "type": "VoidPtr",
              "module": "libs.c"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "mem_realloc",
        "comment": "Internal memory reallocator",
        "return_type": {
          "type": "VoidPtr",
          "module": "libs.c"
        },
        "parameters": [
          {
            "name": "ptr",
            "datatype": {
              "type": "VoidPtr",
              "module": "libs.c"
            }
          },
          {
            "name": "size",
            "datatype": {
              "type": "int"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "minimize_window",
        "comment": "Set window state: minimized, if resizable (only PLATFORM_DESKTOP)",
        "return_type": {
          "type": "None"
        },
        "parameters": [],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "music",
        "comment": "Factory function for: Music",
        "return_type": {
          "type": "Music"
        },
        "parameters": [
          {
            "name": "stream",
            "datatype": {
              "type": "AudioStream"
            }
          },
          {
            "name": "frame_count",
            "datatype": {
              "type": "u32"
            }
          },
          {
            "name": "looping",
            "datatype": {
              "type": "bool"
            }
          },
          {
            "name": "ctx_type",
            "datatype": {
              "type": "int"
            }
          },
          {
            "name": "ctx_data",
            "datatype": {
              "type": "VoidPtr",
              "module": "libs.c"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "n_patch_info",
        "comment": "Factory function for: NPatchInfo",
        "return_type": {
          "type": "NPatchInfo"
        },
        "parameters": [
          {
            "name": "source",
            "datatype": {
              "type": "Rectangle"
            }
          },
          {
            "name": "left",
            "datatype": {
              "type": "int"
            }
          },
          {
            "name": "top",
            "datatype": {
              "type": "int"
            }
          },
          {
            "name": "right",
            "datatype": {
              "type": "int"
            }
          },
          {
            "name": "bottom",
            "datatype": {
              "type": "int"
            }
          },
          {
            "name": "layout",
            "datatype": {
              "type": "int"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "open_url",
        "comment": "Open URL with default system browser (if available)",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "url",
            "datatype": {
              "type": "str"
            }
          }
        ],
        "annotations": [
          {
            "name": "@native",
            "argument": ""
          }
        ]
      },
      {
        "name": "pause_audio_stream",
        "comment": "Pause audio stream",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "stream",
            "datatype": {
              "type": "AudioStream"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "pause_music_stream",
        "comment": "Pause music playing",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "p_music",
            "datatype": {
              "type": "Music"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "pause_sound",
        "comment": "Pause a sound",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "p_sound",
            "datatype": {
              "type": "Sound"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "play_audio_stream",
        "comment": "Play audio stream",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "stream",
            "datatype": {
              "type": "AudioStream"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "play_music_stream",
        "comment": "Start music playing",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "p_music",
            "datatype": {
              "type": "Music"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "play_sound",
        "comment": "Play a sound",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "p_sound",
            "datatype": {
              "type": "Sound"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "play_sound_multi",
        "comment": "Play a sound (using multichannel buffer pool)",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "p_sound",
            "datatype": {
              "type": "Sound"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "poll_input_events",
        "comment": "Register all input events",
        "return_type": {
          "type": "None"
        },
        "parameters": [],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "quaternion",
        "comment": "Factory function for: Quaternion",
        "return_type": {
          "type": "Quaternion"
        },
        "parameters": [
          {
            "name": "x",
            "datatype": {
              "type": "float"
            }
          },
          {
            "name": "y",
            "datatype": {
              "type": "float"
            }
          },
          {
            "name": "z",
            "datatype": {
              "type": "float"
            }
          },
          {
            "name": "w",
            "datatype": {
              "type": "float"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "ray",
        "comment": "Factory function for: Ray",
        "return_type": {
          "type": "Ray"
        },
        "parameters": [
          {
            "name": "position",
            "datatype": {
              "type": "Vector3"
            }
          },
          {
            "name": "direction",
            "datatype": {
              "type": "Vector3"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "ray_collision",
        "comment": "Factory function for: RayCollision",
        "return_type": {
          "type": "RayCollision"
        },
        "parameters": [
          {
            "name": "hit",
            "datatype": {
              "type": "bool"
            }
          },
          {
            "name": "distance",
            "datatype": {
              "type": "float"
            }
          },
          {
            "name": "point",
            "datatype": {
              "type": "Vector3"
            }
          },
          {
            "name": "normal",
            "datatype": {
              "type": "Vector3"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "rectangle",
        "comment": "Factory function for: Rectangle",
        "return_type": {
          "type": "Rectangle"
        },
        "parameters": [
          {
            "name": "x",
            "datatype": {
              "type": "float"
            }
          },
          {
            "name": "y",
            "datatype": {
              "type": "float"
            }
          },
          {
            "name": "width",
            "datatype": {
              "type": "float"
            }
          },
          {
            "name": "height",
            "datatype": {
              "type": "float"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "render_texture",
        "comment": "Factory function for: RenderTexture",
        "return_type": {
          "type": "RenderTexture"
        },
        "parameters": [
          {
            "name": "id",
            "datatype": {
              "type": "u32"
            }
          },
          {
            "name": "p_texture",
            "datatype": {
              "type": "Texture"
            }
          },
          {
            "name": "depth",
            "datatype": {
              "type": "Texture"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "render_texture_2d",
        "comment": "Factory function for: RenderTexture2D",
        "return_type": {
          "type": "RenderTexture2D"
        },
        "parameters": [
          {
            "name": "id",
            "datatype": {
              "type": "u32"
            }
          },
          {
            "name": "p_texture",
            "datatype": {
              "type": "Texture"
            }
          },
          {
            "name": "depth",
            "datatype": {
              "type": "Texture"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "restore_window",
        "comment": "Set window state: not minimized/maximized (only PLATFORM_DESKTOP)",
        "return_type": {
          "type": "None"
        },
        "parameters": [],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "resume_audio_stream",
        "comment": "Resume audio stream",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "stream",
            "datatype": {
              "type": "AudioStream"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "resume_music_stream",
        "comment": "Resume playing paused music",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "p_music",
            "datatype": {
              "type": "Music"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "resume_sound",
        "comment": "Resume a paused sound",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "p_sound",
            "datatype": {
              "type": "Sound"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "save_file_data",
        "comment": "Save data to file from byte array (write), returns true on success",
        "return_type": {
          "type": "bool"
        },
        "parameters": [
          {
            "name": "file_name",
            "datatype": {
              "type": "str"
            }
          },
          {
            "name": "data",
            "datatype": {
              "type": "VoidPtr",
              "module": "libs.c"
            }
          },
          {
            "name": "bytes_to_write",
            "datatype": {
              "type": "u32"
            }
          }
        ],
        "annotations": [
          {
            "name": "@native",
            "argument": ""
          }
        ]
      },
      {
        "name": "save_file_text",
        "comment": "Save text data to file (write), string must be '\\0' terminated, returns true on success",
        "return_type": {
          "type": "bool"
        },
        "parameters": [
          {
            "name": "file_name",
            "datatype": {
              "type": "str"
            }
          },
          {
            "name": "text",
            "datatype": {
              "type": "str"
            }
          }
        ],
        "annotations": [
          {
            "name": "@native",
            "argument": ""
          }
        ]
      },
      {
        "name": "seek_music_stream",
        "comment": "Seek music to a position (in seconds)",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "p_music",
            "datatype": {
              "type": "Music"
            }
          },
          {
            "name": "position",
            "datatype": {
              "type": "float"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "set_audio_stream_buffer_size_default",
        "comment": "Default size for new audio streams",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "size",
            "datatype": {
              "type": "int"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "set_audio_stream_pan",
        "comment": "Set pan for audio stream (0.5 is centered)",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "stream",
            "datatype": {
              "type": "AudioStream"
            }
          },
          {
            "name": "pan",
            "datatype": {
              "type": "float"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "set_audio_stream_pitch",
        "comment": "Set pitch for audio stream (1.0 is base level)",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "stream",
            "datatype": {
              "type": "AudioStream"
            }
          },
          {
            "name": "pitch",
            "datatype": {
              "type": "float"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "set_audio_stream_volume",
        "comment": "Set volume for audio stream (1.0 is max level)",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "stream",
            "datatype": {
              "type": "AudioStream"
            }
          },
          {
            "name": "volume",
            "datatype": {
              "type": "float"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "set_camera_alt_control",
        "comment": "Set camera alt key to combine with mouse movement (free camera)",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "key_alt",
            "datatype": {
              "type": "int"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "set_camera_mode",
        "comment": "Set camera mode (multiple camera modes available)",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "p_camera",
            "datatype": {
              "type": "Camera"
            }
          },
          {
            "name": "mode",
            "datatype": {
              "type": "int"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "set_camera_move_controls",
        "comment": "Set camera move controls (1st person and 3rd person cameras)",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "key_front",
            "datatype": {
              "type": "int"
            }
          },
          {
            "name": "key_back",
            "datatype": {
              "type": "int"
            }
          },
          {
            "name": "key_right",
            "datatype": {
              "type": "int"
            }
          },
          {
            "name": "key_left",
            "datatype": {
              "type": "int"
            }
          },
          {
            "name": "key_up",
            "datatype": {
              "type": "int"
            }
          },
          {
            "name": "key_down",
            "datatype": {
              "type": "int"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "set_camera_pan_control",
        "comment": "Set camera pan key to combine with mouse movement (free camera)",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "key_pan",
            "datatype": {
              "type": "int"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "set_camera_smooth_zoom_control",
        "comment": "Set camera smooth zoom key to combine with mouse (free camera)",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "key_smooth_zoom",
            "datatype": {
              "type": "int"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "set_clipboard_text",
        "comment": "Set clipboard text content",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "text",
            "datatype": {
              "type": "str"
            }
          }
        ],
        "annotations": [
          {
            "name": "@native",
            "argument": ""
          }
        ]
      },
      {
        "name": "set_config_flags",
        "comment": "Setup init configuration flags (view FLAGS)",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "flags",
            "datatype": {
              "type": "u32"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "set_exit_key",
        "comment": "Set a custom key to exit program (default is ESC)",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "key",
            "datatype": {
              "type": "int"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "set_gamepad_mappings",
        "comment": "Set internal gamepad mappings (SDL_GameControllerDB)",
        "return_type": {
          "type": "int"
        },
        "parameters": [
          {
            "name": "mappings",
            "datatype": {
              "type": "str"
            }
          }
        ],
        "annotations": [
          {
            "name": "@native",
            "argument": ""
          }
        ]
      },
      {
        "name": "set_gestures_enabled",
        "comment": "Enable a set of gestures using flags",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "flags",
            "datatype": {
              "type": "u32"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "set_master_volume",
        "comment": "Set master volume (listener)",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "volume",
            "datatype": {
              "type": "float"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "set_material_texture",
        "comment": "Set texture for a material map type (MATERIAL_MAP_DIFFUSE, MATERIAL_MAP_SPECULAR...)",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "material",
            "datatype": {
              "type": "Ptr",
              "arguments": [
                {
                  "type": "Material"
                }
              ]
            }
          },
          {
            "name": "map_type",
            "datatype": {
              "type": "int"
            }
          },
          {
            "name": "p_texture",
            "datatype": {
              "type": "Texture2D"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "set_model_mesh_material",
        "comment": "Set material for a mesh",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "model",
            "datatype": {
              "type": "Ptr",
              "arguments": [
                {
                  "type": "Model"
                }
              ]
            }
          },
          {
            "name": "mesh_id",
            "datatype": {
              "type": "int"
            }
          },
          {
            "name": "material_id",
            "datatype": {
              "type": "int"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "set_mouse_cursor",
        "comment": "Set mouse cursor",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "cursor",
            "datatype": {
              "type": "int"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "set_mouse_offset",
        "comment": "Set mouse offset",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "offset_x",
            "datatype": {
              "type": "int"
            }
          },
          {
            "name": "offset_y",
            "datatype": {
              "type": "int"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "set_mouse_position",
        "comment": "Set mouse position XY",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "x",
            "datatype": {
              "type": "int"
            }
          },
          {
            "name": "y",
            "datatype": {
              "type": "int"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "set_mouse_scale",
        "comment": "Set mouse scaling",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "scale_x",
            "datatype": {
              "type": "float"
            }
          },
          {
            "name": "scale_y",
            "datatype": {
              "type": "float"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "set_music_pan",
        "comment": "Set pan for a music (0.5 is center)",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "p_music",
            "datatype": {
              "type": "Music"
            }
          },
          {
            "name": "pan",
            "datatype": {
              "type": "float"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "set_music_pitch",
        "comment": "Set pitch for a music (1.0 is base level)",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "p_music",
            "datatype": {
              "type": "Music"
            }
          },
          {
            "name": "pitch",
            "datatype": {
              "type": "float"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "set_music_volume",
        "comment": "Set volume for music (1.0 is max level)",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "p_music",
            "datatype": {
              "type": "Music"
            }
          },
          {
            "name": "volume",
            "datatype": {
              "type": "float"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "set_pixel_color",
        "comment": "Set color formatted into destination pixel pointer",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "dst_ptr",
            "datatype": {
              "type": "VoidPtr",
              "module": "libs.c"
            }
          },
          {
            "name": "p_color",
            "datatype": {
              "type": "Color"
            }
          },
          {
            "name": "format",
            "datatype": {
              "type": "int"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "set_random_seed",
        "comment": "Set the seed for the random number generator",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "seed",
            "datatype": {
              "type": "u32"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "set_shader_value",
        "comment": "Set shader uniform value",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "shader",
            "datatype": {
              "type": "Shader"
            }
          },
          {
            "name": "loc_index",
            "datatype": {
              "type": "int"
            }
          },
          {
            "name": "value",
            "datatype": {
              "type": "Const",
              "arguments": [
                {
                  "type": "VoidPtr",
                  "module": "libs.c"
                }
              ]
            }
          },
          {
            "name": "uniform_type",
            "datatype": {
              "type": "int"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "set_shader_value_matrix",
        "comment": "Set shader uniform value (matrix 4x4)",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "shader",
            "datatype": {
              "type": "Shader"
            }
          },
          {
            "name": "loc_index",
            "datatype": {
              "type": "int"
            }
          },
          {
            "name": "mat",
            "datatype": {
              "type": "Matrix"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "set_shader_value_texture",
        "comment": "Set shader uniform value for texture (sampler2d)",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "shader",
            "datatype": {
              "type": "Shader"
            }
          },
          {
            "name": "loc_index",
            "datatype": {
              "type": "int"
            }
          },
          {
            "name": "p_texture",
            "datatype": {
              "type": "Texture2D"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "set_shader_value_v",
        "comment": "Set shader uniform value vector",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "shader",
            "datatype": {
              "type": "Shader"
            }
          },
          {
            "name": "loc_index",
            "datatype": {
              "type": "int"
            }
          },
          {
            "name": "value",
            "datatype": {
              "type": "Const",
              "arguments": [
                {
                  "type": "VoidPtr",
                  "module": "libs.c"
                }
              ]
            }
          },
          {
            "name": "uniform_type",
            "datatype": {
              "type": "int"
            }
          },
          {
            "name": "count",
            "datatype": {
              "type": "int"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "set_shapes_texture",
        "comment": "Set texture and rectangle to be used on shapes drawing",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "p_texture",
            "datatype": {
              "type": "Texture2D"
            }
          },
          {
            "name": "source",
            "datatype": {
              "type": "Rectangle"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "set_sound_pan",
        "comment": "Set pan for a sound (0.5 is center)",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "p_sound",
            "datatype": {
              "type": "Sound"
            }
          },
          {
            "name": "pan",
            "datatype": {
              "type": "float"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "set_sound_pitch",
        "comment": "Set pitch for a sound (1.0 is base level)",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "p_sound",
            "datatype": {
              "type": "Sound"
            }
          },
          {
            "name": "pitch",
            "datatype": {
              "type": "float"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "set_sound_volume",
        "comment": "Set volume for a sound (1.0 is max level)",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "p_sound",
            "datatype": {
              "type": "Sound"
            }
          },
          {
            "name": "volume",
            "datatype": {
              "type": "float"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "set_target_fps",
        "comment": "Set target FPS (maximum)",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "fps",
            "datatype": {
              "type": "int"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "set_texture_filter",
        "comment": "Set texture scaling filter mode",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "p_texture",
            "datatype": {
              "type": "Texture2D"
            }
          },
          {
            "name": "filter",
            "datatype": {
              "type": "int"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "set_texture_wrap",
        "comment": "Set texture wrapping mode",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "p_texture",
            "datatype": {
              "type": "Texture2D"
            }
          },
          {
            "name": "wrap",
            "datatype": {
              "type": "int"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "set_trace_log_level",
        "comment": "Set the current threshold (minimum) log level",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "log_level",
            "datatype": {
              "type": "int"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "set_window_icon",
        "comment": "Set icon for window (only PLATFORM_DESKTOP)",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "p_image",
            "datatype": {
              "type": "Image"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "set_window_min_size",
        "comment": "Set window minimum dimensions (for FLAG_WINDOW_RESIZABLE)",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "width",
            "datatype": {
              "type": "int"
            }
          },
          {
            "name": "height",
            "datatype": {
              "type": "int"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "set_window_monitor",
        "comment": "Set monitor for the current window (fullscreen mode)",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "monitor",
            "datatype": {
              "type": "int"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "set_window_opacity",
        "comment": "Set window opacity [0.0f..1.0f] (only PLATFORM_DESKTOP)",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "opacity",
            "datatype": {
              "type": "float"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "set_window_position",
        "comment": "Set window position on screen (only PLATFORM_DESKTOP)",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "x",
            "datatype": {
              "type": "int"
            }
          },
          {
            "name": "y",
            "datatype": {
              "type": "int"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "set_window_size",
        "comment": "Set window dimensions",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "width",
            "datatype": {
              "type": "int"
            }
          },
          {
            "name": "height",
            "datatype": {
              "type": "int"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "set_window_state",
        "comment": "Set window configuration state using flags (only PLATFORM_DESKTOP)",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "flags",
            "datatype": {
              "type": "u32"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "set_window_title",
        "comment": "Set title for window (only PLATFORM_DESKTOP)",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "title",
            "datatype": {
              "type": "str"
            }
          }
        ],
        "annotations": [
          {
            "name": "@native",
            "argument": ""
          }
        ]
      },
      {
        "name": "show_cursor",
        "comment": "Shows cursor",
        "return_type": {
          "type": "None"
        },
        "parameters": [],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "sound",
        "comment": "Factory function for: Sound",
        "return_type": {
          "type": "Sound"
        },
        "parameters": [
          {
            "name": "stream",
            "datatype": {
              "type": "AudioStream"
            }
          },
          {
            "name": "frame_count",
            "datatype": {
              "type": "u32"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "stop_audio_stream",
        "comment": "Stop audio stream",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "stream",
            "datatype": {
              "type": "AudioStream"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "stop_music_stream",
        "comment": "Stop music playing",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "p_music",
            "datatype": {
              "type": "Music"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "stop_sound",
        "comment": "Stop playing a sound",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "p_sound",
            "datatype": {
              "type": "Sound"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "stop_sound_multi",
        "comment": "Stop any sound playing (using multichannel buffer pool)",
        "return_type": {
          "type": "None"
        },
        "parameters": [],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "swap_screen_buffer",
        "comment": "Swap back buffer with front buffer (screen drawing)",
        "return_type": {
          "type": "None"
        },
        "parameters": [],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "take_screenshot",
        "comment": "Takes a screenshot of current screen (filename extension defines format)",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "file_name",
            "datatype": {
              "type": "str"
            }
          }
        ],
        "annotations": [
          {
            "name": "@native",
            "argument": ""
          }
        ]
      },
      {
        "name": "text_append",
        "comment": "Append text at specific position and move cursor!",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "text",
            "datatype": {
              "type": "str"
            }
          },
          {
            "name": "append",
            "datatype": {
              "type": "str"
            }
          },
          {
            "name": "position",
            "datatype": {
              "type": "Ptr",
              "arguments": [
                {
                  "type": "CInt",
                  "module": "libs.c"
                }
              ]
            }
          }
        ],
        "annotations": [
          {
            "name": "@native",
            "argument": ""
          }
        ]
      },
      {
        "name": "text_codepoints_to_utf8",
        "comment": "Encode text as codepoints array into UTF-8 text string (WARNING: memory must be freed!)",
        "return_type": {
          "type": "CStr",
          "module": "libs.c"
        },
        "parameters": [
          {
            "name": "codepoints",
            "datatype": {
              "type": "Const",
              "arguments": [
                {
                  "type": "Ptr",
                  "arguments": [
                    {
                      "type": "CInt",
                      "module": "libs.c"
                    }
                  ]
                }
              ]
            }
          },
          {
            "name": "length",
            "datatype": {
              "type": "int"
            }
          }
        ],
        "annotations": [
          {
            "name": "@native",
            "argument": ""
          }
        ]
      },
      {
        "name": "text_copy",
        "comment": "Copy one string to another, returns bytes copied",
        "return_type": {
          "type": "int"
        },
        "parameters": [
          {
            "name": "dst",
            "datatype": {
              "type": "str"
            }
          },
          {
            "name": "src",
            "datatype": {
              "type": "str"
            }
          }
        ],
        "annotations": [
          {
            "name": "@native",
            "argument": ""
          }
        ]
      },
      {
        "name": "text_find_index",
        "comment": "Find first text occurrence within a string",
        "return_type": {
          "type": "int"
        },
        "parameters": [
          {
            "name": "text",
            "datatype": {
              "type": "str"
            }
          },
          {
            "name": "find",
            "datatype": {
              "type": "str"
            }
          }
        ],
        "annotations": [
          {
            "name": "@native",
            "argument": ""
          }
        ]
      },
      {
        "name": "text_insert",
        "comment": "Insert text in a position (WARNING: memory must be freed!)",
        "return_type": {
          "type": "CStr",
          "module": "libs.c"
        },
        "parameters": [
          {
            "name": "text",
            "datatype": {
              "type": "str"
            }
          },
          {
            "name": "insert",
            "datatype": {
              "type": "str"
            }
          },
          {
            "name": "position",
            "datatype": {
              "type": "int"
            }
          }
        ],
        "annotations": [
          {
            "name": "@native",
            "argument": ""
          }
        ]
      },
      {
        "name": "text_is_equal",
        "comment": "Check if two text string are equal",
        "return_type": {
          "type": "bool"
        },
        "parameters": [
          {
            "name": "text1",
            "datatype": {
              "type": "str"
            }
          },
          {
            "name": "text2",
            "datatype": {
              "type": "str"
            }
          }
        ],
        "annotations": [
          {
            "name": "@native",
            "argument": ""
          }
        ]
      },
      {
        "name": "text_join",
        "comment": "Join text strings with delimiter",
        "return_type": {
          "type": "Const",
          "arguments": [
            {
              "type": "CStr",
              "module": "libs.c"
            }
          ]
        },
        "parameters": [
          {
            "name": "text_list",
            "datatype": {
              "type": "Const",
              "arguments": [
                {
                  "type": "Ptr",
                  "arguments": [
                    {
                      "type": "Ptr",
                      "arguments": [
                        {
                          "type": "CChar",
                          "module": "libs.c"
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          },
          {
            "name": "count",
            "datatype": {
              "type": "int"
            }
          },
          {
            "name": "delimiter",
            "datatype": {
              "type": "str"
            }
          }
        ],
        "annotations": [
          {
            "name": "@native",
            "argument": ""
          }
        ]
      },
      {
        "name": "text_length",
        "comment": "Get text length, checks for '\\0' ending",
        "return_type": {
          "type": "u32"
        },
        "parameters": [
          {
            "name": "text",
            "datatype": {
              "type": "str"
            }
          }
        ],
        "annotations": [
          {
            "name": "@native",
            "argument": ""
          }
        ]
      },
      {
        "name": "text_replace",
        "comment": "Replace text string (WARNING: memory must be freed!)",
        "return_type": {
          "type": "CStr",
          "module": "libs.c"
        },
        "parameters": [
          {
            "name": "text",
            "datatype": {
              "type": "str"
            }
          },
          {
            "name": "replace",
            "datatype": {
              "type": "str"
            }
          },
          {
            "name": "by",
            "datatype": {
              "type": "str"
            }
          }
        ],
        "annotations": [
          {
            "name": "@native",
            "argument": ""
          }
        ]
      },
      {
        "name": "text_split",
        "comment": "Split text into multiple strings",
        "return_type": {
          "type": "Const",
          "arguments": [
            {
              "type": "Ptr",
              "arguments": [
                {
                  "type": "Ptr",
                  "arguments": [
                    {
                      "type": "CChar",
                      "module": "libs.c"
                    }
                  ]
                }
              ]
            }
          ]
        },
        "parameters": [
          {
            "name": "text",
            "datatype": {
              "type": "str"
            }
          },
          {
            "name": "delimiter",
            "datatype": {
              "type": "int"
            }
          },
          {
            "name": "count",
            "datatype": {
              "type": "Ptr",
              "arguments": [
                {
                  "type": "CInt",
                  "module": "libs.c"
                }
              ]
            }
          }
        ],
        "annotations": [
          {
            "name": "@native",
            "argument": ""
          }
        ]
      },
      {
        "name": "text_subtext",
        "comment": "Get a piece of a text string",
        "return_type": {
          "type": "Const",
          "arguments": [
            {
              "type": "CStr",
              "module": "libs.c"
            }
          ]
        },
        "parameters": [
          {
            "name": "text",
            "datatype": {
              "type": "str"
            }
          },
          {
            "name": "position",
            "datatype": {
              "type": "int"
            }
          },
          {
            "name": "length",
            "datatype": {
              "type": "int"
            }
          }
        ],
        "annotations": [
          {
            "name": "@native",
            "argument": ""
          }
        ]
      },
      {
        "name": "text_to_integer",
        "comment": "Get integer value from text (negative values not supported)",
        "return_type": {
          "type": "int"
        },
        "parameters": [
          {
            "name": "text",
            "datatype": {
              "type": "str"
            }
          }
        ],
        "annotations": [
          {
            "name": "@native",
            "argument": ""
          }
        ]
      },
      {
        "name": "text_to_lower",
        "comment": "Get lower case version of provided string",
        "return_type": {
          "type": "Const",
          "arguments": [
            {
              "type": "CStr",
              "module": "libs.c"
            }
          ]
        },
        "parameters": [
          {
            "name": "text",
            "datatype": {
              "type": "str"
            }
          }
        ],
        "annotations": [
          {
            "name": "@native",
            "argument": ""
          }
        ]
      },
      {
        "name": "text_to_pascal",
        "comment": "Get Pascal case notation version of provided string",
        "return_type": {
          "type": "Const",
          "arguments": [
            {
              "type": "CStr",
              "module": "libs.c"
            }
          ]
        },
        "parameters": [
          {
            "name": "text",
            "datatype": {
              "type": "str"
            }
          }
        ],
        "annotations": [
          {
            "name": "@native",
            "argument": ""
          }
        ]
      },
      {
        "name": "text_to_upper",
        "comment": "Get upper case version of provided string",
        "return_type": {
          "type": "Const",
          "arguments": [
            {
              "type": "CStr",
              "module": "libs.c"
            }
          ]
        },
        "parameters": [
          {
            "name": "text",
            "datatype": {
              "type": "str"
            }
          }
        ],
        "annotations": [
          {
            "name": "@native",
            "argument": ""
          }
        ]
      },
      {
        "name": "texture",
        "comment": "Factory function for: Texture",
        "return_type": {
          "type": "Texture"
        },
        "parameters": [
          {
            "name": "id",
            "datatype": {
              "type": "u32"
            }
          },
          {
            "name": "width",
            "datatype": {
              "type": "int"
            }
          },
          {
            "name": "height",
            "datatype": {
              "type": "int"
            }
          },
          {
            "name": "mipmaps",
            "datatype": {
              "type": "int"
            }
          },
          {
            "name": "format",
            "datatype": {
              "type": "int"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "texture_2d",
        "comment": "Factory function for: Texture2D",
        "return_type": {
          "type": "Texture2D"
        },
        "parameters": [
          {
            "name": "id",
            "datatype": {
              "type": "u32"
            }
          },
          {
            "name": "width",
            "datatype": {
              "type": "int"
            }
          },
          {
            "name": "height",
            "datatype": {
              "type": "int"
            }
          },
          {
            "name": "mipmaps",
            "datatype": {
              "type": "int"
            }
          },
          {
            "name": "format",
            "datatype": {
              "type": "int"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "texture_cubemap",
        "comment": "Factory function for: TextureCubemap",
        "return_type": {
          "type": "TextureCubemap"
        },
        "parameters": [
          {
            "name": "id",
            "datatype": {
              "type": "u32"
            }
          },
          {
            "name": "width",
            "datatype": {
              "type": "int"
            }
          },
          {
            "name": "height",
            "datatype": {
              "type": "int"
            }
          },
          {
            "name": "mipmaps",
            "datatype": {
              "type": "int"
            }
          },
          {
            "name": "format",
            "datatype": {
              "type": "int"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "toggle_fullscreen",
        "comment": "Toggle window state: fullscreen/windowed (only PLATFORM_DESKTOP)",
        "return_type": {
          "type": "None"
        },
        "parameters": [],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "transform",
        "comment": "Factory function for: Transform",
        "return_type": {
          "type": "Transform"
        },
        "parameters": [
          {
            "name": "translation",
            "datatype": {
              "type": "Vector3"
            }
          },
          {
            "name": "rotation",
            "datatype": {
              "type": "Quaternion"
            }
          },
          {
            "name": "scale",
            "datatype": {
              "type": "Vector3"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "unload_audio_stream",
        "comment": "Unload audio stream and free memory",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "stream",
            "datatype": {
              "type": "AudioStream"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "unload_codepoints",
        "comment": "Unload codepoints data from memory",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "codepoints",
            "datatype": {
              "type": "Ptr",
              "arguments": [
                {
                  "type": "CInt",
                  "module": "libs.c"
                }
              ]
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "unload_directory_files",
        "comment": "Unload filepaths",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "files",
            "datatype": {
              "type": "FilePathList"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "unload_dropped_files",
        "comment": "Unload dropped filepaths",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "files",
            "datatype": {
              "type": "FilePathList"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "unload_file_data",
        "comment": "Unload file data allocated by LoadFileData()",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "data",
            "datatype": {
              "type": "Ptr",
              "arguments": [
                {
                  "type": "CUChar",
                  "module": "libs.c"
                }
              ]
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "unload_file_text",
        "comment": "Unload file text data allocated by LoadFileText()",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "text",
            "datatype": {
              "type": "str"
            }
          }
        ],
        "annotations": [
          {
            "name": "@native",
            "argument": ""
          }
        ]
      },
      {
        "name": "unload_font",
        "comment": "Unload font from GPU memory (VRAM)",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "p_font",
            "datatype": {
              "type": "Font"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "unload_font_data",
        "comment": "Unload font chars info data (RAM)",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "chars",
            "datatype": {
              "type": "Ptr",
              "arguments": [
                {
                  "type": "GlyphInfo"
                }
              ]
            }
          },
          {
            "name": "glyph_count",
            "datatype": {
              "type": "int"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "unload_image",
        "comment": "Unload image from CPU memory (RAM)",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "p_image",
            "datatype": {
              "type": "Image"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "unload_image_colors",
        "comment": "Unload color data loaded with LoadImageColors()",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "colors",
            "datatype": {
              "type": "Ptr",
              "arguments": [
                {
                  "type": "Color"
                }
              ]
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "unload_image_palette",
        "comment": "Unload colors palette loaded with LoadImagePalette()",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "colors",
            "datatype": {
              "type": "Ptr",
              "arguments": [
                {
                  "type": "Color"
                }
              ]
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "unload_material",
        "comment": "Unload material from GPU memory (VRAM)",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "material",
            "datatype": {
              "type": "Material"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "unload_mesh",
        "comment": "Unload mesh data from CPU and GPU",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "mesh",
            "datatype": {
              "type": "Mesh"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "unload_model",
        "comment": "Unload model (including meshes) from memory (RAM and/or VRAM)",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "model",
            "datatype": {
              "type": "Model"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "unload_model_animation",
        "comment": "Unload animation data",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "anim",
            "datatype": {
              "type": "ModelAnimation"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "unload_model_animations",
        "comment": "Unload animation array data",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "animations",
            "datatype": {
              "type": "Ptr",
              "arguments": [
                {
                  "type": "ModelAnimation"
                }
              ]
            }
          },
          {
            "name": "count",
            "datatype": {
              "type": "u32"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "unload_model_keep_meshes",
        "comment": "Unload model (but not meshes) from memory (RAM and/or VRAM)",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "model",
            "datatype": {
              "type": "Model"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "unload_music_stream",
        "comment": "Unload music stream",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "p_music",
            "datatype": {
              "type": "Music"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "unload_render_texture",
        "comment": "Unload render texture from GPU memory (VRAM)",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "target",
            "datatype": {
              "type": "RenderTexture2D"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "unload_shader",
        "comment": "Unload shader from GPU memory (VRAM)",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "shader",
            "datatype": {
              "type": "Shader"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "unload_sound",
        "comment": "Unload sound",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "p_sound",
            "datatype": {
              "type": "Sound"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "unload_texture",
        "comment": "Unload texture from GPU memory (VRAM)",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "p_texture",
            "datatype": {
              "type": "Texture2D"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "unload_vr_stereo_config",
        "comment": "Unload VR stereo config",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "config",
            "datatype": {
              "type": "VrStereoConfig"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "unload_wave",
        "comment": "Unload wave data",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "p_wave",
            "datatype": {
              "type": "Wave"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "unload_wave_samples",
        "comment": "Unload samples data loaded with LoadWaveSamples()",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "samples",
            "datatype": {
              "type": "Ptr",
              "arguments": [
                {
                  "type": "CFloat",
                  "module": "libs.c"
                }
              ]
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "update_audio_stream",
        "comment": "Update audio stream buffers with data",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "stream",
            "datatype": {
              "type": "AudioStream"
            }
          },
          {
            "name": "data",
            "datatype": {
              "type": "Const",
              "arguments": [
                {
                  "type": "VoidPtr",
                  "module": "libs.c"
                }
              ]
            }
          },
          {
            "name": "frame_count",
            "datatype": {
              "type": "int"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "update_camera",
        "comment": "Update camera position for selected mode",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "p_camera",
            "datatype": {
              "type": "Ptr",
              "arguments": [
                {
                  "type": "Camera"
                }
              ]
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "update_mesh_buffer",
        "comment": "Update mesh vertex data in GPU for a specific buffer index",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "mesh",
            "datatype": {
              "type": "Mesh"
            }
          },
          {
            "name": "index",
            "datatype": {
              "type": "int"
            }
          },
          {
            "name": "data",
            "datatype": {
              "type": "Const",
              "arguments": [
                {
                  "type": "VoidPtr",
                  "module": "libs.c"
                }
              ]
            }
          },
          {
            "name": "data_size",
            "datatype": {
              "type": "int"
            }
          },
          {
            "name": "offset",
            "datatype": {
              "type": "int"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "update_model_animation",
        "comment": "Update model animation pose",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "model",
            "datatype": {
              "type": "Model"
            }
          },
          {
            "name": "anim",
            "datatype": {
              "type": "ModelAnimation"
            }
          },
          {
            "name": "frame",
            "datatype": {
              "type": "int"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "update_music_stream",
        "comment": "Updates buffers for music streaming",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "p_music",
            "datatype": {
              "type": "Music"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "update_sound",
        "comment": "Update sound buffer with new data",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "p_sound",
            "datatype": {
              "type": "Sound"
            }
          },
          {
            "name": "data",
            "datatype": {
              "type": "Const",
              "arguments": [
                {
                  "type": "VoidPtr",
                  "module": "libs.c"
                }
              ]
            }
          },
          {
            "name": "sample_count",
            "datatype": {
              "type": "int"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "update_texture",
        "comment": "Update GPU texture with new data",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "p_texture",
            "datatype": {
              "type": "Texture2D"
            }
          },
          {
            "name": "pixels",
            "datatype": {
              "type": "Const",
              "arguments": [
                {
                  "type": "VoidPtr",
                  "module": "libs.c"
                }
              ]
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "update_texture_rec",
        "comment": "Update GPU texture rectangle with new data",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "p_texture",
            "datatype": {
              "type": "Texture2D"
            }
          },
          {
            "name": "rec",
            "datatype": {
              "type": "Rectangle"
            }
          },
          {
            "name": "pixels",
            "datatype": {
              "type": "Const",
              "arguments": [
                {
                  "type": "VoidPtr",
                  "module": "libs.c"
                }
              ]
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "upload_mesh",
        "comment": "Upload mesh vertex data in GPU and provide VAO/VBO ids",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "mesh",
            "datatype": {
              "type": "Ptr",
              "arguments": [
                {
                  "type": "Mesh"
                }
              ]
            }
          },
          {
            "name": "dynamic",
            "datatype": {
              "type": "bool"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "vector2",
        "comment": "Factory function for: Vector2",
        "return_type": {
          "type": "Vector2"
        },
        "parameters": [
          {
            "name": "x",
            "datatype": {
              "type": "float"
            }
          },
          {
            "name": "y",
            "datatype": {
              "type": "float"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "vector3",
        "comment": "Factory function for: Vector3",
        "return_type": {
          "type": "Vector3"
        },
        "parameters": [
          {
            "name": "x",
            "datatype": {
              "type": "float"
            }
          },
          {
            "name": "y",
            "datatype": {
              "type": "float"
            }
          },
          {
            "name": "z",
            "datatype": {
              "type": "float"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "vector4",
        "comment": "Factory function for: Vector4",
        "return_type": {
          "type": "Vector4"
        },
        "parameters": [
          {
            "name": "x",
            "datatype": {
              "type": "float"
            }
          },
          {
            "name": "y",
            "datatype": {
              "type": "float"
            }
          },
          {
            "name": "z",
            "datatype": {
              "type": "float"
            }
          },
          {
            "name": "w",
            "datatype": {
              "type": "float"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "wait_time",
        "comment": "Wait for some time (halt program execution)",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "seconds",
            "datatype": {
              "type": "f64"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "wave",
        "comment": "Factory function for: Wave",
        "return_type": {
          "type": "Wave"
        },
        "parameters": [
          {
            "name": "frame_count",
            "datatype": {
              "type": "u32"
            }
          },
          {
            "name": "sample_rate",
            "datatype": {
              "type": "u32"
            }
          },
          {
            "name": "sample_size",
            "datatype": {
              "type": "u32"
            }
          },
          {
            "name": "channels",
            "datatype": {
              "type": "u32"
            }
          },
          {
            "name": "data",
            "datatype": {
              "type": "VoidPtr",
              "module": "libs.c"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "wave_copy",
        "comment": "Copy a wave to a new wave",
        "return_type": {
          "type": "Wave"
        },
        "parameters": [
          {
            "name": "p_wave",
            "datatype": {
              "type": "Wave"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "wave_crop",
        "comment": "Crop a wave to defined samples range",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "p_wave",
            "datatype": {
              "type": "Ptr",
              "arguments": [
                {
                  "type": "Wave"
                }
              ]
            }
          },
          {
            "name": "init_sample",
            "datatype": {
              "type": "int"
            }
          },
          {
            "name": "final_sample",
            "datatype": {
              "type": "int"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "wave_format",
        "comment": "Convert wave data to desired format",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "p_wave",
            "datatype": {
              "type": "Ptr",
              "arguments": [
                {
                  "type": "Wave"
                }
              ]
            }
          },
          {
            "name": "sample_rate",
            "datatype": {
              "type": "int"
            }
          },
          {
            "name": "sample_size",
            "datatype": {
              "type": "int"
            }
          },
          {
            "name": "channels",
            "datatype": {
              "type": "int"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "window_should_close",
        "comment": "Check if KEY_ESCAPE pressed or Close icon pressed",
        "return_type": {
          "type": "bool"
        },
        "parameters": [],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      }
    ],
    "classes": [
      {
        "name": "AudioStream",
        "comment": "AudioStream, custom audio stream",
        "members": [],
        "annotations": [
          {
            "name": "@nativedefine",
            "argument": "AudioStream"
          }
        ]
      },
      {
        "name": "BoneInfo",
        "comment": "Bone, skeletal animation bone",
        "members": [],
        "annotations": [
          {
            "name": "@nativedefine",
            "argument": "BoneInfo"
          }
        ]
      },
      {
        "name": "BoundingBox",
        "comment": "BoundingBox",
        "members": [
          {
            "name": "min",
            "datatype": {
              "type": "Vector3"
            }
          },
          {
            "name": "max",
            "datatype": {
              "type": "Vector3"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativedefine",
            "argument": "BoundingBox"
          }
        ]
      },
      {
        "name": "CChar32",
        "comment": "",
        "members": [],
        "annotations": [
          {
            "name": "@nativedefine",
            "argument": "char[32]"
          }
        ]
      },
      {
        "name": "CFloat2",
        "comment": "",
        "members": [],
        "annotations": [
          {
            "name": "@nativedefine",
            "argument": "float[2]"
          }
        ]
      },
      {
        "name": "CFloat4",
        "comment": "",
        "members": [],
        "annotations": [
          {
            "name": "@nativedefine",
            "argument": "float[4]"
          }
        ]
      },
      {
        "name": "Camera",
        "comment": "Camera type fallback, defaults to Camera3D",
        "members": [
          {
            "name": "position",
            "datatype": {
              "type": "Vector3"
            }
          },
          {
            "name": "target",
            "datatype": {
              "type": "Vector3"
            }
          },
          {
            "name": "up",
            "datatype": {
              "type": "Vector3"
            }
          },
          {
            "name": "fovy",
            "datatype": {
              "type": "float"
            }
          },
          {
            "name": "projection",
            "datatype": {
              "type": "CInt",
              "module": "libs.c"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativedefine",
            "argument": "Camera"
          }
        ]
      },
      {
        "name": "Camera2D",
        "comment": "Camera2D, defines position/orientation in 2d space",
        "members": [
          {
            "name": "offset",
            "datatype": {
              "type": "Vector2"
            }
          },
          {
            "name": "target",
            "datatype": {
              "type": "Vector2"
            }
          },
          {
            "name": "rotation",
            "datatype": {
              "type": "float"
            }
          },
          {
            "name": "zoom",
            "datatype": {
              "type": "float"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativedefine",
            "argument": "Camera2D"
          }
        ]
      },
      {
        "name": "Camera3D",
        "comment": "Camera, defines position/orientation in 3d space",
        "members": [
          {
            "name": "position",
            "datatype": {
              "type": "Vector3"
            }
          },
          {
            "name": "target",
            "datatype": {
              "type": "Vector3"
            }
          },
          {
            "name": "up",
            "datatype": {
              "type": "Vector3"
            }
          },
          {
            "name": "fovy",
            "datatype": {
              "type": "float"
            }
          },
          {
            "name": "projection",
            "datatype": {
              "type": "CInt",
              "module": "libs.c"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativedefine",
            "argument": "Camera3D"
          }
        ]
      },
      {
        "name": "Color",
        "comment": "Color, 4 components, R8G8B8A8 (32bit)",
        "members": [
          {
            "name": "r",
            "datatype": {
              "type": "CUChar",
              "module": "libs.c"
            }
          },
          {
            "name": "g",
            "datatype": {
              "type": "CUChar",
              "module": "libs.c"
            }
          },
          {
            "name": "b",
            "datatype": {
              "type": "CUChar",
              "module": "libs.c"
            }
          },
          {
            "name": "a",
            "datatype": {
              "type": "CUChar",
              "module": "libs.c"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativedefine",
            "argument": "Color"
          }
        ]
      },
      {
        "name": "DTMatrix2",
        "comment": "",
        "members": [],
        "annotations": [
          {
            "name": "@nativedefine",
            "argument": "Matrix[2]"
          }
        ]
      },
      {
        "name": "FilePathList",
        "comment": "File path list",
        "members": [],
        "annotations": [
          {
            "name": "@nativedefine",
            "argument": "FilePathList"
          }
        ]
      },
      {
        "name": "Font",
        "comment": "Font, font texture and GlyphInfo array data",
        "members": [
          {
            "name": "baseSize",
            "datatype": {
              "type": "CInt",
              "module": "libs.c"
            }
          },
          {
            "name": "glyphCount",
            "datatype": {
              "type": "CInt",
              "module": "libs.c"
            }
          },
          {
            "name": "glyphPadding",
            "datatype": {
              "type": "CInt",
              "module": "libs.c"
            }
          },
          {
            "name": "texture",
            "datatype": {
              "type": "Texture2D"
            }
          },
          {
            "name": "recs",
            "datatype": {
              "type": "Ptr",
              "arguments": [
                {
                  "type": "Rectangle"
                }
              ]
            }
          },
          {
            "name": "glyphs",
            "datatype": {
              "type": "Ptr",
              "arguments": [
                {
                  "type": "GlyphInfo"
                }
              ]
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativedefine",
            "argument": "Font"
          }
        ]
      },
      {
        "name": "GlyphInfo",
        "comment": "GlyphInfo, font characters glyphs info",
        "members": [
          {
            "name": "value",
            "datatype": {
              "type": "CInt",
              "module": "libs.c"
            }
          },
          {
            "name": "offsetX",
            "datatype": {
              "type": "CInt",
              "module": "libs.c"
            }
          },
          {
            "name": "offsetY",
            "datatype": {
              "type": "CInt",
              "module": "libs.c"
            }
          },
          {
            "name": "advanceX",
            "datatype": {
              "type": "CInt",
              "module": "libs.c"
            }
          },
          {
            "name": "image",
            "datatype": {
              "type": "Image"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativedefine",
            "argument": "GlyphInfo"
          }
        ]
      },
      {
        "name": "Image",
        "comment": "Image, pixel data stored in CPU memory (RAM)",
        "members": [
          {
            "name": "data",
            "datatype": {
              "type": "VoidPtr",
              "module": "libs.c"
            }
          },
          {
            "name": "width",
            "datatype": {
              "type": "CInt",
              "module": "libs.c"
            }
          },
          {
            "name": "height",
            "datatype": {
              "type": "CInt",
              "module": "libs.c"
            }
          },
          {
            "name": "mipmaps",
            "datatype": {
              "type": "CInt",
              "module": "libs.c"
            }
          },
          {
            "name": "format",
            "datatype": {
              "type": "CInt",
              "module": "libs.c"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativedefine",
            "argument": "Image"
          }
        ]
      },
      {
        "name": "Material",
        "comment": "Material, includes shader and maps",
        "members": [],
        "annotations": [
          {
            "name": "@nativedefine",
            "argument": "Material"
          }
        ]
      },
      {
        "name": "MaterialMap",
        "comment": "MaterialMap",
        "members": [
          {
            "name": "texture",
            "datatype": {
              "type": "Texture2D"
            }
          },
          {
            "name": "color",
            "datatype": {
              "type": "Color"
            }
          },
          {
            "name": "value",
            "datatype": {
              "type": "float"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativedefine",
            "argument": "MaterialMap"
          }
        ]
      },
      {
        "name": "Matrix",
        "comment": "Matrix, 4x4 components, column major, OpenGL style, right handed",
        "members": [
          {
            "name": "m0",
            "datatype": {
              "type": "float"
            }
          },
          {
            "name": "m4",
            "datatype": {
              "type": "float"
            }
          },
          {
            "name": "m8",
            "datatype": {
              "type": "float"
            }
          },
          {
            "name": "m12",
            "datatype": {
              "type": "float"
            }
          },
          {
            "name": "m1",
            "datatype": {
              "type": "float"
            }
          },
          {
            "name": "m5",
            "datatype": {
              "type": "float"
            }
          },
          {
            "name": "m9",
            "datatype": {
              "type": "float"
            }
          },
          {
            "name": "m13",
            "datatype": {
              "type": "float"
            }
          },
          {
            "name": "m2",
            "datatype": {
              "type": "float"
            }
          },
          {
            "name": "m6",
            "datatype": {
              "type": "float"
            }
          },
          {
            "name": "m10",
            "datatype": {
              "type": "float"
            }
          },
          {
            "name": "m14",
            "datatype": {
              "type": "float"
            }
          },
          {
            "name": "m3",
            "datatype": {
              "type": "float"
            }
          },
          {
            "name": "m7",
            "datatype": {
              "type": "float"
            }
          },
          {
            "name": "m11",
            "datatype": {
              "type": "float"
            }
          },
          {
            "name": "m15",
            "datatype": {
              "type": "float"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativedefine",
            "argument": "Matrix"
          }
        ]
      },
      {
        "name": "Mesh",
        "comment": "Mesh, vertex data and vao/vbo",
        "members": [],
        "annotations": [
          {
            "name": "@nativedefine",
            "argument": "Mesh"
          }
        ]
      },
      {
        "name": "Model",
        "comment": "Model, meshes, materials and animation data",
        "members": [],
        "annotations": [
          {
            "name": "@nativedefine",
            "argument": "Model"
          }
        ]
      },
      {
        "name": "ModelAnimation",
        "comment": "ModelAnimation",
        "members": [],
        "annotations": [
          {
            "name": "@nativedefine",
            "argument": "ModelAnimation"
          }
        ]
      },
      {
        "name": "Music",
        "comment": "Music, audio stream, anything longer than ~10 seconds should be streamed",
        "members": [
          {
            "name": "stream",
            "datatype": {
              "type": "AudioStream"
            }
          },
          {
            "name": "frameCount",
            "datatype": {
              "type": "CUInt",
              "module": "libs.c"
            }
          },
          {
            "name": "looping",
            "datatype": {
              "type": "bool"
            }
          },
          {
            "name": "ctxType",
            "datatype": {
              "type": "CInt",
              "module": "libs.c"
            }
          },
          {
            "name": "ctxData",
            "datatype": {
              "type": "VoidPtr",
              "module": "libs.c"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativedefine",
            "argument": "Music"
          }
        ]
      },
      {
        "name": "NPatchInfo",
        "comment": "NPatchInfo, n-patch layout info",
        "members": [
          {
            "name": "source",
            "datatype": {
              "type": "Rectangle"
            }
          },
          {
            "name": "left",
            "datatype": {
              "type": "CInt",
              "module": "libs.c"
            }
          },
          {
            "name": "top",
            "datatype": {
              "type": "CInt",
              "module": "libs.c"
            }
          },
          {
            "name": "right",
            "datatype": {
              "type": "CInt",
              "module": "libs.c"
            }
          },
          {
            "name": "bottom",
            "datatype": {
              "type": "CInt",
              "module": "libs.c"
            }
          },
          {
            "name": "layout",
            "datatype": {
              "type": "CInt",
              "module": "libs.c"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativedefine",
            "argument": "NPatchInfo"
          }
        ]
      },
      {
        "name": "Quaternion",
        "comment": "Quaternion, 4 components (Vector4 alias)",
        "members": [
          {
            "name": "x",
            "datatype": {
              "type": "float"
            }
          },
          {
            "name": "y",
            "datatype": {
              "type": "float"
            }
          },
          {
            "name": "z",
            "datatype": {
              "type": "float"
            }
          },
          {
            "name": "w",
            "datatype": {
              "type": "float"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativedefine",
            "argument": "Quaternion"
          }
        ]
      },
      {
        "name": "RAudioBufferPtr",
        "comment": "",
        "members": [],
        "annotations": [
          {
            "name": "@nativedefine",
            "argument": "rAudioBuffer *"
          }
        ]
      },
      {
        "name": "RAudioProcessorPtr",
        "comment": "",
        "members": [],
        "annotations": [
          {
            "name": "@nativedefine",
            "argument": "rAudioProcessor *"
          }
        ]
      },
      {
        "name": "Ray",
        "comment": "Ray, ray for raycasting",
        "members": [
          {
            "name": "position",
            "datatype": {
              "type": "Vector3"
            }
          },
          {
            "name": "direction",
            "datatype": {
              "type": "Vector3"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativedefine",
            "argument": "Ray"
          }
        ]
      },
      {
        "name": "RayCollision",
        "comment": "RayCollision, ray hit information",
        "members": [
          {
            "name": "hit",
            "datatype": {
              "type": "bool"
            }
          },
          {
            "name": "distance",
            "datatype": {
              "type": "float"
            }
          },
          {
            "name": "point",
            "datatype": {
              "type": "Vector3"
            }
          },
          {
            "name": "normal",
            "datatype": {
              "type": "Vector3"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativedefine",
            "argument": "RayCollision"
          }
        ]
      },
      {
        "name": "Rectangle",
        "comment": "Rectangle, 4 components",
        "members": [
          {
            "name": "x",
            "datatype": {
              "type": "float"
            }
          },
          {
            "name": "y",
            "datatype": {
              "type": "float"
            }
          },
          {
            "name": "width",
            "datatype": {
              "type": "float"
            }
          },
          {
            "name": "height",
            "datatype": {
              "type": "float"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativedefine",
            "argument": "Rectangle"
          }
        ]
      },
      {
        "name": "RenderTexture",
        "comment": "RenderTexture, fbo for texture rendering",
        "members": [
          {
            "name": "id",
            "datatype": {
              "type": "CUInt",
              "module": "libs.c"
            }
          },
          {
            "name": "texture",
            "datatype": {
              "type": "Texture"
            }
          },
          {
            "name": "depth",
            "datatype": {
              "type": "Texture"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativedefine",
            "argument": "RenderTexture"
          }
        ]
      },
      {
        "name": "RenderTexture2D",
        "comment": "RenderTexture2D, same as RenderTexture",
        "members": [
          {
            "name": "id",
            "datatype": {
              "type": "CUInt",
              "module": "libs.c"
            }
          },
          {
            "name": "p_texture",
            "datatype": {
              "type": "Texture"
            }
          },
          {
            "name": "depth",
            "datatype": {
              "type": "Texture"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativedefine",
            "argument": "RenderTexture2D"
          }
        ]
      },
      {
        "name": "Shader",
        "comment": "Shader",
        "members": [],
        "annotations": [
          {
            "name": "@nativedefine",
            "argument": "Shader"
          }
        ]
      },
      {
        "name": "Sound",
        "comment": "Sound",
        "members": [
          {
            "name": "stream",
            "datatype": {
              "type": "AudioStream"
            }
          },
          {
            "name": "frameCount",
            "datatype": {
              "type": "CUInt",
              "module": "libs.c"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativedefine",
            "argument": "Sound"
          }
        ]
      },
      {
        "name": "Texture",
        "comment": "Texture, tex data stored in GPU memory (VRAM)",
        "members": [
          {
            "name": "id",
            "datatype": {
              "type": "CUInt",
              "module": "libs.c"
            }
          },
          {
            "name": "width",
            "datatype": {
              "type": "CInt",
              "module": "libs.c"
            }
          },
          {
            "name": "height",
            "datatype": {
              "type": "CInt",
              "module": "libs.c"
            }
          },
          {
            "name": "mipmaps",
            "datatype": {
              "type": "CInt",
              "module": "libs.c"
            }
          },
          {
            "name": "format",
            "datatype": {
              "type": "CInt",
              "module": "libs.c"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativedefine",
            "argument": "Texture"
          }
        ]
      },
      {
        "name": "Texture2D",
        "comment": "Texture2D, same as Texture",
        "members": [
          {
            "name": "id",
            "datatype": {
              "type": "CUInt",
              "module": "libs.c"
            }
          },
          {
            "name": "width",
            "datatype": {
              "type": "CInt",
              "module": "libs.c"
            }
          },
          {
            "name": "height",
            "datatype": {
              "type": "CInt",
              "module": "libs.c"
            }
          },
          {
            "name": "mipmaps",
            "datatype": {
              "type": "CInt",
              "module": "libs.c"
            }
          },
          {
            "name": "format",
            "datatype": {
              "type": "CInt",
              "module": "libs.c"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativedefine",
            "argument": "Texture2D"
          }
        ]
      },
      {
        "name": "TextureCubemap",
        "comment": "TextureCubemap, same as Texture",
        "members": [
          {
            "name": "id",
            "datatype": {
              "type": "CUInt",
              "module": "libs.c"
            }
          },
          {
            "name": "width",
            "datatype": {
              "type": "CInt",
              "module": "libs.c"
            }
          },
          {
            "name": "height",
            "datatype": {
              "type": "CInt",
              "module": "libs.c"
            }
          },
          {
            "name": "mipmaps",
            "datatype": {
              "type": "CInt",
              "module": "libs.c"
            }
          },
          {
            "name": "format",
            "datatype": {
              "type": "CInt",
              "module": "libs.c"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativedefine",
            "argument": "TextureCubemap"
          }
        ]
      },
      {
        "name": "Transform",
        "comment": "Transform, vectex transformation data",
        "members": [
          {
            "name": "translation",
            "datatype": {
              "type": "Vector3"
            }
          },
          {
            "name": "rotation",
            "datatype": {
              "type": "Quaternion"
            }
          },
          {
            "name": "scale",
            "datatype": {
              "type": "Vector3"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativedefine",
            "argument": "Transform"
          }
        ]
      },
      {
        "name": "Vector2",
        "comment": "Vector2, 2 components",
        "members": [
          {
            "name": "x",
            "datatype": {
              "type": "float"
            }
          },
          {
            "name": "y",
            "datatype": {
              "type": "float"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativedefine",
            "argument": "Vector2"
          }
        ]
      },
      {
        "name": "Vector3",
        "comment": "Vector3, 3 components",
        "members": [
          {
            "name": "x",
            "datatype": {
              "type": "float"
            }
          },
          {
            "name": "y",
            "datatype": {
              "type": "float"
            }
          },
          {
            "name": "z",
            "datatype": {
              "type": "float"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativedefine",
            "argument": "Vector3"
          }
        ]
      },
      {
        "name": "Vector4",
        "comment": "Vector4, 4 components",
        "members": [
          {
            "name": "x",
            "datatype": {
              "type": "float"
            }
          },
          {
            "name": "y",
            "datatype": {
              "type": "float"
            }
          },
          {
            "name": "z",
            "datatype": {
              "type": "float"
            }
          },
          {
            "name": "w",
            "datatype": {
              "type": "float"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativedefine",
            "argument": "Vector4"
          }
        ]
      },
      {
        "name": "VrDeviceInfo",
        "comment": "VrDeviceInfo, Head-Mounted-Display device parameters",
        "members": [],
        "annotations": [
          {
            "name": "@nativedefine",
            "argument": "VrDeviceInfo"
          }
        ]
      },
      {
        "name": "VrStereoConfig",
        "comment": "VrStereoConfig, VR stereo rendering configuration for simulator",
        "members": [],
        "annotations": [
          {
            "name": "@nativedefine",
            "argument": "VrStereoConfig"
          }
        ]
      },
      {
        "name": "Wave",
        "comment": "Wave, audio wave data",
        "members": [
          {
            "name": "frameCount",
            "datatype": {
              "type": "CUInt",
              "module": "libs.c"
            }
          },
          {
            "name": "sampleRate",
            "datatype": {
              "type": "CUInt",
              "module": "libs.c"
            }
          },
          {
            "name": "sampleSize",
            "datatype": {
              "type": "CUInt",
              "module": "libs.c"
            }
          },
          {
            "name": "channels",
            "datatype": {
              "type": "CUInt",
              "module": "libs.c"
            }
          },
          {
            "name": "data",
            "datatype": {
              "type": "VoidPtr",
              "module": "libs.c"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativedefine",
            "argument": "Wave"
          }
        ]
      }
    ]
  },
  "libs.c": {
    "imports": [],
    "global_consts": [],
    "functions": [
      {
        "name": "acos",
        "comment": "",
        "return_type": {
          "type": "CDouble"
        },
        "parameters": [
          {
            "name": "x",
            "datatype": {
              "type": "CDouble"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativedefine",
            "argument": "acos"
          }
        ]
      },
      {
        "name": "asin",
        "comment": "",
        "return_type": {
          "type": "CDouble"
        },
        "parameters": [
          {
            "name": "x",
            "datatype": {
              "type": "CDouble"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativedefine",
            "argument": "asin"
          }
        ]
      },
      {
        "name": "atan",
        "comment": "",
        "return_type": {
          "type": "CDouble"
        },
        "parameters": [
          {
            "name": "x",
            "datatype": {
              "type": "CDouble"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativedefine",
            "argument": "atan"
          }
        ]
      },
      {
        "name": "atan2",
        "comment": "",
        "return_type": {
          "type": "CDouble"
        },
        "parameters": [
          {
            "name": "x",
            "datatype": {
              "type": "CDouble"
            }
          },
          {
            "name": "y",
            "datatype": {
              "type": "CDouble"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativedefine",
            "argument": "atan2"
          }
        ]
      },
      {
        "name": "calloc",
        "comment": "",
        "return_type": {
          "type": "VoidPtr"
        },
        "parameters": [
          {
            "name": "n",
            "datatype": {
              "type": "Size"
            }
          },
          {
            "name": "size",
            "datatype": {
              "type": "Size"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativedefine",
            "argument": "calloc"
          }
        ]
      },
      {
        "name": "ceil",
        "comment": "",
        "return_type": {
          "type": "CDouble"
        },
        "parameters": [
          {
            "name": "x",
            "datatype": {
              "type": "CDouble"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativedefine",
            "argument": "ceil"
          }
        ]
      },
      {
        "name": "cos",
        "comment": "",
        "return_type": {
          "type": "CDouble"
        },
        "parameters": [
          {
            "name": "x",
            "datatype": {
              "type": "CDouble"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativedefine",
            "argument": "cos"
          }
        ]
      },
      {
        "name": "cosh",
        "comment": "",
        "return_type": {
          "type": "CDouble"
        },
        "parameters": [
          {
            "name": "x",
            "datatype": {
              "type": "CDouble"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativedefine",
            "argument": "cosh"
          }
        ]
      },
      {
        "name": "fabs",
        "comment": "",
        "return_type": {
          "type": "CDouble"
        },
        "parameters": [
          {
            "name": "x",
            "datatype": {
              "type": "CDouble"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativedefine",
            "argument": "fabs"
          }
        ]
      },
      {
        "name": "floor",
        "comment": "",
        "return_type": {
          "type": "CDouble"
        },
        "parameters": [
          {
            "name": "x",
            "datatype": {
              "type": "CDouble"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativedefine",
            "argument": "floor"
          }
        ]
      },
      {
        "name": "fmod",
        "comment": "",
        "return_type": {
          "type": "CDouble"
        },
        "parameters": [
          {
            "name": "x",
            "datatype": {
              "type": "CDouble"
            }
          },
          {
            "name": "y",
            "datatype": {
              "type": "CDouble"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativedefine",
            "argument": "pow"
          }
        ]
      },
      {
        "name": "free",
        "comment": "",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "ptr",
            "datatype": {
              "type": "VoidPtr"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativedefine",
            "argument": "free"
          }
        ]
      },
      {
        "name": "has_command_processor",
        "comment": "Can we run system commands?",
        "return_type": {
          "type": "bool"
        },
        "parameters": [],
        "annotations": [
          {
            "name": "@native",
            "argument": ""
          }
        ]
      },
      {
        "name": "itosize",
        "comment": "",
        "return_type": {
          "type": "Size"
        },
        "parameters": [
          {
            "name": "i",
            "datatype": {
              "type": "int"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": "((size_t)nn__i)"
          }
        ]
      },
      {
        "name": "log",
        "comment": "",
        "return_type": {
          "type": "CDouble"
        },
        "parameters": [
          {
            "name": "x",
            "datatype": {
              "type": "CDouble"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativedefine",
            "argument": "log"
          }
        ]
      },
      {
        "name": "log10",
        "comment": "",
        "return_type": {
          "type": "CDouble"
        },
        "parameters": [
          {
            "name": "x",
            "datatype": {
              "type": "CDouble"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativedefine",
            "argument": "log10"
          }
        ]
      },
      {
        "name": "log2",
        "comment": "",
        "return_type": {
          "type": "CDouble"
        },
        "parameters": [
          {
            "name": "x",
            "datatype": {
              "type": "CDouble"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativedefine",
            "argument": "log2"
          }
        ]
      },
      {
        "name": "malloc",
        "comment": "",
        "return_type": {
          "type": "VoidPtr"
        },
        "parameters": [
          {
            "name": "size",
            "datatype": {
              "type": "Size"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativedefine",
            "argument": "malloc"
          }
        ]
      },
      {
        "name": "memcmp",
        "comment": "",
        "return_type": {
          "type": "CInt"
        },
        "parameters": [
          {
            "name": "str1",
            "datatype": {
              "type": "VoidPtr"
            }
          },
          {
            "name": "str2",
            "datatype": {
              "type": "VoidPtr"
            }
          },
          {
            "name": "size",
            "datatype": {
              "type": "Size"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativedefine",
            "argument": "memcmp"
          }
        ]
      },
      {
        "name": "memcpy",
        "comment": "",
        "return_type": {
          "type": "VoidPtr"
        },
        "parameters": [
          {
            "name": "dest",
            "datatype": {
              "type": "VoidPtr"
            }
          },
          {
            "name": "src",
            "datatype": {
              "type": "VoidPtr"
            }
          },
          {
            "name": "size",
            "datatype": {
              "type": "Size"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativedefine",
            "argument": "memcpy"
          }
        ]
      },
      {
        "name": "memmove",
        "comment": "",
        "return_type": {
          "type": "VoidPtr"
        },
        "parameters": [
          {
            "name": "dest",
            "datatype": {
              "type": "VoidPtr"
            }
          },
          {
            "name": "src",
            "datatype": {
              "type": "VoidPtr"
            }
          },
          {
            "name": "size",
            "datatype": {
              "type": "Size"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativedefine",
            "argument": "memmove"
          }
        ]
      },
      {
        "name": "memset",
        "comment": "",
        "return_type": {
          "type": "VoidPtr"
        },
        "parameters": [
          {
            "name": "dest",
            "datatype": {
              "type": "VoidPtr"
            }
          },
          {
            "name": "character",
            "datatype": {
              "type": "CInt"
            }
          },
          {
            "name": "size",
            "datatype": {
              "type": "Size"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativedefine",
            "argument": "memset"
          }
        ]
      },
      {
        "name": "pow",
        "comment": "",
        "return_type": {
          "type": "CDouble"
        },
        "parameters": [
          {
            "name": "x",
            "datatype": {
              "type": "CDouble"
            }
          },
          {
            "name": "y",
            "datatype": {
              "type": "CDouble"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativedefine",
            "argument": "pow"
          }
        ]
      },
      {
        "name": "realloc",
        "comment": "",
        "return_type": {
          "type": "VoidPtr"
        },
        "parameters": [
          {
            "name": "ptr",
            "datatype": {
              "type": "VoidPtr"
            }
          },
          {
            "name": "size",
            "datatype": {
              "type": "Size"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativedefine",
            "argument": "realloc"
          }
        ]
      },
      {
        "name": "sin",
        "comment": "",
        "return_type": {
          "type": "CDouble"
        },
        "parameters": [
          {
            "name": "x",
            "datatype": {
              "type": "CDouble"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativedefine",
            "argument": "sin"
          }
        ]
      },
      {
        "name": "sinh",
        "comment": "",
        "return_type": {
          "type": "CDouble"
        },
        "parameters": [
          {
            "name": "x",
            "datatype": {
              "type": "CDouble"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativedefine",
            "argument": "sinh"
          }
        ]
      },
      {
        "name": "sqrt",
        "comment": "",
        "return_type": {
          "type": "CDouble"
        },
        "parameters": [
          {
            "name": "x",
            "datatype": {
              "type": "CDouble"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativedefine",
            "argument": "sqrt"
          }
        ]
      },
      {
        "name": "system",
        "comment": "Run a system command without caring what it will do\nWait for exit",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "program",
            "datatype": {
              "type": "CStr"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativedefine",
            "argument": "system"
          }
        ]
      },
      {
        "name": "tan",
        "comment": "",
        "return_type": {
          "type": "CDouble"
        },
        "parameters": [
          {
            "name": "x",
            "datatype": {
              "type": "CDouble"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativedefine",
            "argument": "tan"
          }
        ]
      },
      {
        "name": "tanh",
        "comment": "",
        "return_type": {
          "type": "CDouble"
        },
        "parameters": [
          {
            "name": "x",
            "datatype": {
              "type": "CDouble"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativedefine",
            "argument": "tanh"
          }
        ]
      }
    ],
    "classes": [
      {
        "name": "CBool",
        "comment": "",
        "members": [],
        "annotations": [
          {
            "name": "@nativedefine",
            "argument": "bool"
          }
        ]
      },
      {
        "name": "CChar",
        "comment": "",
        "members": [],
        "annotations": [
          {
            "name": "@nativedefine",
            "argument": "char"
          }
        ]
      },
      {
        "name": "CDouble",
        "comment": "",
        "members": [],
        "annotations": [
          {
            "name": "@nativedefine",
            "argument": "double"
          }
        ]
      },
      {
        "name": "CFloat",
        "comment": "",
        "members": [],
        "annotations": [
          {
            "name": "@nativedefine",
            "argument": "float"
          }
        ]
      },
      {
        "name": "CInt",
        "comment": "",
        "members": [],
        "annotations": [
          {
            "name": "@nativedefine",
            "argument": "int"
          }
        ]
      },
      {
        "name": "CLong",
        "comment": "",
        "members": [],
        "annotations": [
          {
            "name": "@nativedefine",
            "argument": "long"
          }
        ]
      },
      {
        "name": "CShort",
        "comment": "",
        "members": [],
        "annotations": [
          {
            "name": "@nativedefine",
            "argument": "short"
          }
        ]
      },
      {
        "name": "CStr",
        "comment": "",
        "members": [],
        "annotations": [
          {
            "name": "@nativedefine",
            "argument": "char*"
          }
        ]
      },
      {
        "name": "CUChar",
        "comment": "",
        "members": [],
        "annotations": [
          {
            "name": "@nativedefine",
            "argument": "unsigned char"
          }
        ]
      },
      {
        "name": "CUInt",
        "comment": "",
        "members": [],
        "annotations": [
          {
            "name": "@nativedefine",
            "argument": "unsigned int"
          }
        ]
      },
      {
        "name": "CULong",
        "comment": "",
        "members": [],
        "annotations": [
          {
            "name": "@nativedefine",
            "argument": "unsigned long"
          }
        ]
      },
      {
        "name": "CUShort",
        "comment": "",
        "members": [],
        "annotations": [
          {
            "name": "@nativedefine",
            "argument": "unsigned short"
          }
        ]
      },
      {
        "name": "Size",
        "comment": "",
        "members": [],
        "annotations": [
          {
            "name": "@nativedefine",
            "argument": "size_t"
          }
        ]
      },
      {
        "name": "VoidPtr",
        "comment": "",
        "members": [],
        "annotations": [
          {
            "name": "@nativedefine",
            "argument": "void*"
          }
        ]
      }
    ]
  },
  "libs.console": {
    "imports": [],
    "global_consts": [
      {
        "name": "BLUE",
        "comment": "",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "CYAN",
        "comment": "",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "GREEN",
        "comment": "",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "PURPLE",
        "comment": "",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "RED",
        "comment": "",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "REWIND",
        "comment": "Use rewind with set_colour to stop applying colour",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "WHITE",
        "comment": "",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "YELLOW",
        "comment": "",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      }
    ],
    "functions": [
      {
        "name": "blue",
        "comment": "",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "x",
            "datatype": {
              "type": "str"
            }
          }
        ],
        "annotations": []
      },
      {
        "name": "clear",
        "comment": "",
        "return_type": {
          "type": "None"
        },
        "parameters": [],
        "annotations": [
          {
            "name": "@nativedefine",
            "argument": "yk__clear"
          }
        ]
      },
      {
        "name": "colour_print",
        "comment": "Print in given colour and then rewind",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "colour",
            "datatype": {
              "type": "int"
            }
          },
          {
            "name": "x",
            "datatype": {
              "type": "str"
            }
          }
        ],
        "annotations": []
      },
      {
        "name": "cyan",
        "comment": "",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "x",
            "datatype": {
              "type": "str"
            }
          }
        ],
        "annotations": []
      },
      {
        "name": "getch",
        "comment": "",
        "return_type": {
          "type": "int"
        },
        "parameters": [],
        "annotations": [
          {
            "name": "@native",
            "argument": ""
          }
        ]
      },
      {
        "name": "green",
        "comment": "",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "x",
            "datatype": {
              "type": "str"
            }
          }
        ],
        "annotations": []
      },
      {
        "name": "purple",
        "comment": "",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "x",
            "datatype": {
              "type": "str"
            }
          }
        ],
        "annotations": []
      },
      {
        "name": "red",
        "comment": "",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "x",
            "datatype": {
              "type": "str"
            }
          }
        ],
        "annotations": []
      },
      {
        "name": "set_colour",
        "comment": "",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "c",
            "datatype": {
              "type": "int"
            }
          }
        ],
        "annotations": [
          {
            "name": "@native",
            "argument": ""
          }
        ]
      },
      {
        "name": "white",
        "comment": "",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "x",
            "datatype": {
              "type": "str"
            }
          }
        ],
        "annotations": []
      },
      {
        "name": "yellow",
        "comment": "",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "x",
            "datatype": {
              "type": "str"
            }
          }
        ],
        "annotations": []
      }
    ],
    "classes": []
  },
  "libs.io": {
    "imports": [],
    "global_consts": [],
    "functions": [
      {
        "name": "readfile",
        "comment": "Read a file to as string, on error returns empty",
        "return_type": {
          "type": "str"
        },
        "parameters": [
          {
            "name": "fname",
            "datatype": {
              "type": "str"
            }
          }
        ],
        "annotations": [
          {
            "name": "@native",
            "argument": "yk__io_readfile"
          }
        ]
      },
      {
        "name": "writefile",
        "comment": "Write a file",
        "return_type": {
          "type": "bool"
        },
        "parameters": [
          {
            "name": "fname",
            "datatype": {
              "type": "str"
            }
          },
          {
            "name": "data",
            "datatype": {
              "type": "str"
            }
          }
        ],
        "annotations": [
          {
            "name": "@native",
            "argument": "yk__io_writefile"
          }
        ]
      }
    ],
    "classes": []
  },
  "libs.mpc": {
    "imports": [
      {
        "alias": "c",
        "path": [
          "libs",
          "c"
        ]
      }
    ],
    "global_consts": [],
    "functions": [
      {
        "name": "ast_print",
        "comment": "",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "r",
            "datatype": {
              "type": "Result"
            }
          }
        ],
        "annotations": [
          {
            "name": "@native",
            "argument": ""
          }
        ]
      },
      {
        "name": "cleanup",
        "comment": "",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "a",
            "datatype": {
              "type": "int"
            }
          },
          {
            "name": "v",
            "datatype": {
              "type": "Mpc"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativedefine",
            "argument": "mpc_cleanup"
          },
          {
            "name": "@varargs",
            "argument": ""
          }
        ]
      },
      {
        "name": "del_ast",
        "comment": "",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "r",
            "datatype": {
              "type": "Result"
            }
          }
        ],
        "annotations": [
          {
            "name": "@native",
            "argument": ""
          }
        ]
      },
      {
        "name": "del_err",
        "comment": "",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "r",
            "datatype": {
              "type": "Result"
            }
          }
        ],
        "annotations": [
          {
            "name": "@native",
            "argument": ""
          }
        ]
      },
      {
        "name": "err_print",
        "comment": "",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "r",
            "datatype": {
              "type": "Result"
            }
          }
        ],
        "annotations": [
          {
            "name": "@native",
            "argument": ""
          }
        ]
      },
      {
        "name": "mpca_lang",
        "comment": "",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "a",
            "datatype": {
              "type": "int"
            }
          },
          {
            "name": "b",
            "datatype": {
              "type": "str"
            }
          },
          {
            "name": "v",
            "datatype": {
              "type": "Mpc"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativedefine",
            "argument": "mpca_lang"
          },
          {
            "name": "@varargs",
            "argument": ""
          }
        ]
      },
      {
        "name": "new",
        "comment": "",
        "return_type": {
          "type": "Mpc"
        },
        "parameters": [
          {
            "name": "a",
            "datatype": {
              "type": "str"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativedefine",
            "argument": "mpc_new"
          }
        ]
      },
      {
        "name": "new_result",
        "comment": "",
        "return_type": {
          "type": "Result"
        },
        "parameters": [],
        "annotations": [
          {
            "name": "@native",
            "argument": ""
          }
        ]
      },
      {
        "name": "parse",
        "comment": "",
        "return_type": {
          "type": "bool"
        },
        "parameters": [
          {
            "name": "a",
            "datatype": {
              "type": "str"
            }
          },
          {
            "name": "b",
            "datatype": {
              "type": "str"
            }
          },
          {
            "name": "v",
            "datatype": {
              "type": "Mpc"
            }
          },
          {
            "name": "r",
            "datatype": {
              "type": "Result"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativedefine",
            "argument": "mpc_parse"
          }
        ]
      }
    ],
    "classes": [
      {
        "name": "Ast",
        "comment": "",
        "members": [
          {
            "name": "tag",
            "datatype": {
              "type": "CStr",
              "module": "libs.c"
            }
          },
          {
            "name": "contents",
            "datatype": {
              "type": "CStr",
              "module": "libs.c"
            }
          },
          {
            "name": "children",
            "datatype": {
              "type": "Array",
              "arguments": [
                {
                  "type": "Ast"
                }
              ]
            }
          },
          {
            "name": "children_num",
            "datatype": {
              "type": "int"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativedefine",
            "argument": "mpc_ast_t*"
          }
        ]
      },
      {
        "name": "Mpc",
        "comment": "",
        "members": [],
        "annotations": [
          {
            "name": "@nativedefine",
            "argument": "mpc_parser_t*"
          }
        ]
      },
      {
        "name": "Result",
        "comment": "",
        "members": [
          {
            "name": "output",
            "datatype": {
              "type": "Ast"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativedefine",
            "argument": "mpc_result_t*"
          }
        ]
      }
    ]
  },
  "libs.numbers": {
    "imports": [
      {
        "alias": "c",
        "path": [
          "libs",
          "c"
        ]
      }
    ],
    "global_consts": [],
    "functions": [
      {
        "name": "cdbl2d",
        "comment": "c.CDouble to f64 (double precision)",
        "return_type": {
          "type": "f64"
        },
        "parameters": [
          {
            "name": "a",
            "datatype": {
              "type": "CDouble",
              "module": "libs.c"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "cstr2i",
        "comment": "Convert a c-string to an integer",
        "return_type": {
          "type": "int"
        },
        "parameters": [
          {
            "name": "a",
            "datatype": {
              "type": "CStr",
              "module": "libs.c"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativedefine",
            "argument": "atoi"
          }
        ]
      },
      {
        "name": "d2cdbl",
        "comment": "f64 (double precision) to c.CDouble",
        "return_type": {
          "type": "CDouble",
          "module": "libs.c"
        },
        "parameters": [
          {
            "name": "a",
            "datatype": {
              "type": "f64"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "d2f",
        "comment": "float/f32 (single precision) to f64 (double precision)\nWarning: precision might be lost/truncated",
        "return_type": {
          "type": "f64"
        },
        "parameters": [
          {
            "name": "a",
            "datatype": {
              "type": "float"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "d2i",
        "comment": "f64 (double precision) to int/i32\nWarning: value is truncated",
        "return_type": {
          "type": "int"
        },
        "parameters": [
          {
            "name": "a",
            "datatype": {
              "type": "f64"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "d2uu",
        "comment": "int/i32 to a u64",
        "return_type": {
          "type": "u64"
        },
        "parameters": [
          {
            "name": "a",
            "datatype": {
              "type": "f64"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "f2d",
        "comment": "float/f32 (single precision) to f64 (double precision)",
        "return_type": {
          "type": "f64"
        },
        "parameters": [
          {
            "name": "a",
            "datatype": {
              "type": "float"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "f2i",
        "comment": "f64 (double precision) to int/i32\nWarning: value is truncated",
        "return_type": {
          "type": "int"
        },
        "parameters": [
          {
            "name": "a",
            "datatype": {
              "type": "float"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "f2uu",
        "comment": "int/i32 to a u64",
        "return_type": {
          "type": "u64"
        },
        "parameters": [
          {
            "name": "a",
            "datatype": {
              "type": "float"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "i2d",
        "comment": "int/i32 to f64 (double precision)",
        "return_type": {
          "type": "f64"
        },
        "parameters": [
          {
            "name": "a",
            "datatype": {
              "type": "int"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "i2f",
        "comment": "int/i32 to f64 (double precision)",
        "return_type": {
          "type": "float"
        },
        "parameters": [
          {
            "name": "a",
            "datatype": {
              "type": "int"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "i2u",
        "comment": "int/i32 to a u64",
        "return_type": {
          "type": "u32"
        },
        "parameters": [
          {
            "name": "a",
            "datatype": {
              "type": "int"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "i2uu",
        "comment": "int/i32 to a u64",
        "return_type": {
          "type": "u64"
        },
        "parameters": [
          {
            "name": "a",
            "datatype": {
              "type": "int"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "u2i",
        "comment": "int/i32 to a u64",
        "return_type": {
          "type": "int"
        },
        "parameters": [
          {
            "name": "a",
            "datatype": {
              "type": "u32"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "uu2d",
        "comment": "int/i32 to a u64",
        "return_type": {
          "type": "f64"
        },
        "parameters": [
          {
            "name": "a",
            "datatype": {
              "type": "u64"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "uu2f",
        "comment": "int/i32 to a u64",
        "return_type": {
          "type": "float"
        },
        "parameters": [
          {
            "name": "a",
            "datatype": {
              "type": "u64"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "uu2i",
        "comment": "int/i32 to a u64",
        "return_type": {
          "type": "int"
        },
        "parameters": [
          {
            "name": "a",
            "datatype": {
              "type": "u64"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      }
    ],
    "classes": []
  },
  "libs.os": {
    "imports": [
      {
        "alias": "strings",
        "path": [
          "libs",
          "strings"
        ]
      },
      {
        "alias": "sarr",
        "path": [
          "libs",
          "strings",
          "array"
        ]
      },
      {
        "alias": "ospath",
        "path": [
          "libs",
          "os",
          "path"
        ]
      }
    ],
    "global_consts": [],
    "functions": [
      {
        "name": "cwd",
        "comment": "Get current working directory, or empty string (if failed) on return",
        "return_type": {
          "type": "str"
        },
        "parameters": [],
        "annotations": [
          {
            "name": "@native",
            "argument": ""
          }
        ]
      },
      {
        "name": "del_process_result",
        "comment": "",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "pr",
            "datatype": {
              "type": "ProcessResult"
            }
          }
        ],
        "annotations": [
          {
            "name": "@native",
            "argument": "yk__free_process_result"
          }
        ]
      },
      {
        "name": "exe",
        "comment": "Get exe file path, or empty string (if failed) on return",
        "return_type": {
          "type": "str"
        },
        "parameters": [],
        "annotations": [
          {
            "name": "@native",
            "argument": ""
          }
        ]
      },
      {
        "name": "exe_path",
        "comment": "Get exe directory path, or empty string (if failed) on return",
        "return_type": {
          "type": "str"
        },
        "parameters": [],
        "annotations": [
          {
            "name": "@native",
            "argument": ""
          }
        ]
      },
      {
        "name": "get_args",
        "comment": "Get arguments",
        "return_type": {
          "type": "arguments"
        },
        "parameters": [],
        "annotations": [
          {
            "name": "@nativedefine",
            "argument": "yk__get_args"
          }
        ]
      },
      {
        "name": "getenv",
        "comment": "Get environment variable, empty if not found or error",
        "return_type": {
          "type": "str"
        },
        "parameters": [
          {
            "name": "name",
            "datatype": {
              "type": "str"
            }
          }
        ],
        "annotations": [
          {
            "name": "@native",
            "argument": "yk__getenv"
          }
        ]
      },
      {
        "name": "is_macos",
        "comment": "Are we running macOS?",
        "return_type": {
          "type": "bool"
        },
        "parameters": [],
        "annotations": [
          {
            "name": "@native",
            "argument": ""
          }
        ]
      },
      {
        "name": "is_windows",
        "comment": "Are we running Windows?",
        "return_type": {
          "type": "bool"
        },
        "parameters": [],
        "annotations": [
          {
            "name": "@native",
            "argument": ""
          }
        ]
      },
      {
        "name": "run",
        "comment": "",
        "return_type": {
          "type": "ProcessResult"
        },
        "parameters": [
          {
            "name": "args",
            "datatype": {
              "type": "Array",
              "arguments": [
                {
                  "type": "str"
                }
              ]
            }
          }
        ],
        "annotations": [
          {
            "name": "@native",
            "argument": "yk__run"
          }
        ]
      },
      {
        "name": "which",
        "comment": "Try to find full path to binary in $PATH, no need .exe for windows\nIf we cannot find in $PATH, This will fallback to current path and exe path as well\n\nExample find zig compiler path:\n\nos.which(\"zig\")",
        "return_type": {
          "type": "str"
        },
        "parameters": [
          {
            "name": "binary",
            "datatype": {
              "type": "str"
            }
          }
        ],
        "annotations": []
      }
    ],
    "classes": [
      {
        "name": "ProcessResult",
        "comment": "",
        "members": [
          {
            "name": "ok",
            "datatype": {
              "type": "bool"
            }
          },
          {
            "name": "output",
            "datatype": {
              "type": "str"
            }
          },
          {
            "name": "return_code",
            "datatype": {
              "type": "int"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativedefine",
            "argument": "struct yk__process_result*"
          }
        ]
      },
      {
        "name": "arguments",
        "comment": "UTF-8 converted arguments and argument count\nDo not delete, Do not modify",
        "members": [
          {
            "name": "argc",
            "datatype": {
              "type": "int"
            }
          },
          {
            "name": "argv",
            "datatype": {
              "type": "Array",
              "arguments": [
                {
                  "type": "str"
                }
              ]
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativedefine",
            "argument": "struct yk__arguments*"
          }
        ]
      }
    ]
  },
  "libs.perlin": {
    "imports": [],
    "global_consts": [],
    "functions": [
      {
        "name": "noise1d",
        "comment": "Get perlin noise in 1d (Calls 3d noise with hardcoded y, z values)",
        "return_type": {
          "type": "f64"
        },
        "parameters": [
          {
            "name": "x",
            "datatype": {
              "type": "f64"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativedefine",
            "argument": "yk__perlin1d"
          }
        ]
      },
      {
        "name": "noise1df",
        "comment": "",
        "return_type": {
          "type": "float"
        },
        "parameters": [
          {
            "name": "x",
            "datatype": {
              "type": "float"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "noise2d",
        "comment": "Get perlin noise in 2d",
        "return_type": {
          "type": "f64"
        },
        "parameters": [
          {
            "name": "x",
            "datatype": {
              "type": "f64"
            }
          },
          {
            "name": "y",
            "datatype": {
              "type": "f64"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativedefine",
            "argument": "yk__perlin2d"
          }
        ]
      },
      {
        "name": "noise2df",
        "comment": "Get perlin noise in 2d",
        "return_type": {
          "type": "float"
        },
        "parameters": [
          {
            "name": "x",
            "datatype": {
              "type": "float"
            }
          },
          {
            "name": "y",
            "datatype": {
              "type": "float"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "noise3d",
        "comment": "Get perlin noise in 3d",
        "return_type": {
          "type": "f64"
        },
        "parameters": [
          {
            "name": "x",
            "datatype": {
              "type": "f64"
            }
          },
          {
            "name": "y",
            "datatype": {
              "type": "f64"
            }
          },
          {
            "name": "z",
            "datatype": {
              "type": "f64"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativedefine",
            "argument": "yk__perlin3d"
          }
        ]
      },
      {
        "name": "noise3df",
        "comment": "Get perlin noise in 3d",
        "return_type": {
          "type": "float"
        },
        "parameters": [
          {
            "name": "x",
            "datatype": {
              "type": "float"
            }
          },
          {
            "name": "y",
            "datatype": {
              "type": "float"
            }
          },
          {
            "name": "z",
            "datatype": {
              "type": "float"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      }
    ],
    "classes": []
  },
  "libs.random": {
    "imports": [],
    "global_consts": [],
    "functions": [
      {
        "name": "init_random",
        "comment": "Set a seed to random number generator using time (crypto unsafe)",
        "return_type": {
          "type": "u64"
        },
        "parameters": [],
        "annotations": [
          {
            "name": "@nativedefine",
            "argument": "yk__init_random"
          }
        ]
      },
      {
        "name": "random",
        "comment": "Get a random value between 0 - 1 (crypto unsafe)",
        "return_type": {
          "type": "f64"
        },
        "parameters": [],
        "annotations": [
          {
            "name": "@native",
            "argument": ""
          }
        ]
      },
      {
        "name": "random_between",
        "comment": "Get a random value between a and b (crypto unsafe)",
        "return_type": {
          "type": "f64"
        },
        "parameters": [
          {
            "name": "a",
            "datatype": {
              "type": "f64"
            }
          },
          {
            "name": "b",
            "datatype": {
              "type": "f64"
            }
          }
        ],
        "annotations": []
      },
      {
        "name": "random_betweenf",
        "comment": "Get a random value between a and b (crypto unsafe)",
        "return_type": {
          "type": "float"
        },
        "parameters": [
          {
            "name": "a",
            "datatype": {
              "type": "float"
            }
          },
          {
            "name": "b",
            "datatype": {
              "type": "float"
            }
          }
        ],
        "annotations": []
      },
      {
        "name": "random_u64",
        "comment": "",
        "return_type": {
          "type": "u64"
        },
        "parameters": [],
        "annotations": [
          {
            "name": "@nativedefine",
            "argument": "yk__random_u64"
          }
        ]
      },
      {
        "name": "randomf",
        "comment": "Get a random value between 0 - 1 (crypto unsafe)",
        "return_type": {
          "type": "float"
        },
        "parameters": [],
        "annotations": [
          {
            "name": "@native",
            "argument": ""
          }
        ]
      },
      {
        "name": "set_seed",
        "comment": "Set a seed to random number generator (crypto unsafe)",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "seed",
            "datatype": {
              "type": "u64"
            }
          }
        ],
        "annotations": [
          {
            "name": "@native",
            "argument": ""
          }
        ]
      }
    ],
    "classes": []
  },
  "libs.strings": {
    "imports": [
      {
        "alias": "c",
        "path": [
          "libs",
          "c"
        ]
      }
    ],
    "global_consts": [],
    "functions": [
      {
        "name": "contains",
        "comment": "Does the string needle contain in string haystack?",
        "return_type": {
          "type": "bool"
        },
        "parameters": [
          {
            "name": "haystack",
            "datatype": {
              "type": "str"
            }
          },
          {
            "name": "needle",
            "datatype": {
              "type": "str"
            }
          }
        ],
        "annotations": [
          {
            "name": "@native",
            "argument": ""
          }
        ]
      },
      {
        "name": "del_cstr",
        "comment": "Delete a native c-string created from other other functions (calls free)",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "a",
            "datatype": {
              "type": "CStr",
              "module": "libs.c"
            }
          }
        ],
        "annotations": [
          {
            "name": "@native",
            "argument": ""
          }
        ]
      },
      {
        "name": "del_iter",
        "comment": "Delete the iterator object after done",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "s",
            "datatype": {
              "type": "Utf8IterateState"
            }
          }
        ],
        "annotations": [
          {
            "name": "@native",
            "argument": ""
          }
        ]
      },
      {
        "name": "del_str",
        "comment": "Delete a normal string that was cast as a c-str with to_cstr\nYou only need to use this if CStr was cast from standard str",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "a",
            "datatype": {
              "type": "CStr",
              "module": "libs.c"
            }
          }
        ],
        "annotations": [
          {
            "name": "@native",
            "argument": ""
          }
        ]
      },
      {
        "name": "from_cstr",
        "comment": "Create a string from CStr",
        "return_type": {
          "type": "str"
        },
        "parameters": [
          {
            "name": "a",
            "datatype": {
              "type": "CStr",
              "module": "libs.c"
            }
          }
        ],
        "annotations": [
          {
            "name": "@native",
            "argument": ""
          }
        ]
      },
      {
        "name": "from_cstrlen",
        "comment": "Create a string from CStr with a given length",
        "return_type": {
          "type": "str"
        },
        "parameters": [
          {
            "name": "a",
            "datatype": {
              "type": "CStr",
              "module": "libs.c"
            }
          },
          {
            "name": "length",
            "datatype": {
              "type": "int"
            }
          }
        ],
        "annotations": [
          {
            "name": "@native",
            "argument": ""
          }
        ]
      },
      {
        "name": "from_cstrlen_after",
        "comment": "Create a new string from CStr from given after location for given length",
        "return_type": {
          "type": "str"
        },
        "parameters": [
          {
            "name": "a",
            "datatype": {
              "type": "CStr",
              "module": "libs.c"
            }
          },
          {
            "name": "length",
            "datatype": {
              "type": "int"
            }
          },
          {
            "name": "after",
            "datatype": {
              "type": "int"
            }
          }
        ],
        "annotations": [
          {
            "name": "@native",
            "argument": ""
          }
        ]
      },
      {
        "name": "get",
        "comment": "Get a single byte from given string and position\nWarning: Does not do a length check\nWarning: This copies the string to just get a single byte",
        "return_type": {
          "type": "int"
        },
        "parameters": [
          {
            "name": "s",
            "datatype": {
              "type": "str"
            }
          },
          {
            "name": "pos",
            "datatype": {
              "type": "int"
            }
          }
        ],
        "annotations": [
          {
            "name": "@native",
            "argument": ""
          }
        ]
      },
      {
        "name": "get_cstr",
        "comment": "Get a single byte from given CStr\nWarning: Does not do a length check",
        "return_type": {
          "type": "int"
        },
        "parameters": [
          {
            "name": "s",
            "datatype": {
              "type": "CStr",
              "module": "libs.c"
            }
          },
          {
            "name": "pos",
            "datatype": {
              "type": "int"
            }
          }
        ],
        "annotations": [
          {
            "name": "@native",
            "argument": ""
          }
        ]
      },
      {
        "name": "isempty",
        "comment": "Is this string empty?",
        "return_type": {
          "type": "bool"
        },
        "parameters": [
          {
            "name": "s",
            "datatype": {
              "type": "str"
            }
          }
        ],
        "annotations": [
          {
            "name": "@native",
            "argument": ""
          }
        ]
      },
      {
        "name": "isempty_cstr",
        "comment": "Is an empty CStr?",
        "return_type": {
          "type": "bool"
        },
        "parameters": [
          {
            "name": "s",
            "datatype": {
              "type": "CStr",
              "module": "libs.c"
            }
          }
        ],
        "annotations": [
          {
            "name": "@native",
            "argument": ""
          }
        ]
      },
      {
        "name": "iterate",
        "comment": "Go to next character\nReturns false if nothing to read or we ran out of length of string",
        "return_type": {
          "type": "bool"
        },
        "parameters": [
          {
            "name": "s",
            "datatype": {
              "type": "Utf8IterateState"
            }
          }
        ],
        "annotations": [
          {
            "name": "@native",
            "argument": ""
          }
        ]
      },
      {
        "name": "new_iter",
        "comment": "Create a new iterator from given string",
        "return_type": {
          "type": "Utf8IterateState"
        },
        "parameters": [
          {
            "name": "s",
            "datatype": {
              "type": "str"
            }
          }
        ],
        "annotations": [
          {
            "name": "@native",
            "argument": ""
          }
        ]
      },
      {
        "name": "ord",
        "comment": "Get first byte of string",
        "return_type": {
          "type": "int"
        },
        "parameters": [
          {
            "name": "s",
            "datatype": {
              "type": "str"
            }
          }
        ],
        "annotations": []
      },
      {
        "name": "ord_cstr",
        "comment": "Get first byte of CStr",
        "return_type": {
          "type": "int"
        },
        "parameters": [
          {
            "name": "s",
            "datatype": {
              "type": "CStr",
              "module": "libs.c"
            }
          }
        ],
        "annotations": [
          {
            "name": "@native",
            "argument": ""
          }
        ]
      },
      {
        "name": "set_cstr",
        "comment": "Set a byte to given CStr position\nWarning: Does not do a length check",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "s",
            "datatype": {
              "type": "CStr",
              "module": "libs.c"
            }
          },
          {
            "name": "pos",
            "datatype": {
              "type": "int"
            }
          },
          {
            "name": "v",
            "datatype": {
              "type": "int"
            }
          }
        ],
        "annotations": [
          {
            "name": "@native",
            "argument": ""
          }
        ]
      },
      {
        "name": "split",
        "comment": "Split a string to a string array",
        "return_type": {
          "type": "Array",
          "arguments": [
            {
              "type": "str"
            }
          ]
        },
        "parameters": [
          {
            "name": "value",
            "datatype": {
              "type": "str"
            }
          },
          {
            "name": "sep",
            "datatype": {
              "type": "str"
            }
          }
        ],
        "annotations": [
          {
            "name": "@native",
            "argument": ""
          }
        ]
      },
      {
        "name": "startswith",
        "comment": "Does the given string a starts with b",
        "return_type": {
          "type": "bool"
        },
        "parameters": [
          {
            "name": "a",
            "datatype": {
              "type": "str"
            }
          },
          {
            "name": "b",
            "datatype": {
              "type": "str"
            }
          }
        ],
        "annotations": [
          {
            "name": "@native",
            "argument": ""
          }
        ]
      },
      {
        "name": "to_cstr",
        "comment": "Yaksha copies managed strings that you pass in so must free this",
        "return_type": {
          "type": "CStr",
          "module": "libs.c"
        },
        "parameters": [
          {
            "name": "a",
            "datatype": {
              "type": "str"
            }
          }
        ],
        "annotations": [
          {
            "name": "@native",
            "argument": ""
          }
        ]
      },
      {
        "name": "valid_cstr",
        "comment": "Is a valid CStr",
        "return_type": {
          "type": "bool"
        },
        "parameters": [
          {
            "name": "s",
            "datatype": {
              "type": "CStr",
              "module": "libs.c"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      }
    ],
    "classes": [
      {
        "name": "Utf8IterateState",
        "comment": "Iterator state for UTF-8 iteration\nSee the codepoint for current character",
        "members": [
          {
            "name": "step_size",
            "datatype": {
              "type": "int"
            }
          },
          {
            "name": "codepoint",
            "datatype": {
              "type": "int"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativedefine",
            "argument": "struct utf8proc_iter_state*"
          }
        ]
      }
    ]
  },
  "libs.fileformats.ini": {
    "imports": [],
    "global_consts": [],
    "functions": [
      {
        "name": "del_ini",
        "comment": "Delete INI object",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "object",
            "datatype": {
              "type": "Ini"
            }
          }
        ],
        "annotations": [
          {
            "name": "@native",
            "argument": ""
          }
        ]
      },
      {
        "name": "from_str",
        "comment": "Parse INI file from given string data",
        "return_type": {
          "type": "Ini"
        },
        "parameters": [
          {
            "name": "ini_data",
            "datatype": {
              "type": "str"
            }
          }
        ],
        "annotations": [
          {
            "name": "@native",
            "argument": ""
          }
        ]
      },
      {
        "name": "get",
        "comment": "Get a property in given section",
        "return_type": {
          "type": "str"
        },
        "parameters": [
          {
            "name": "object",
            "datatype": {
              "type": "Ini"
            }
          },
          {
            "name": "section",
            "datatype": {
              "type": "str"
            }
          },
          {
            "name": "property",
            "datatype": {
              "type": "str"
            }
          }
        ],
        "annotations": [
          {
            "name": "@native",
            "argument": ""
          }
        ]
      }
    ],
    "classes": [
      {
        "name": "Ini",
        "comment": "INI Object",
        "members": [],
        "annotations": [
          {
            "name": "@nativedefine",
            "argument": "ini_t*"
          }
        ]
      }
    ]
  },
  "libs.fileformats.toml": {
    "imports": [],
    "global_consts": [],
    "functions": [
      {
        "name": "array_len",
        "comment": "Get length of array",
        "return_type": {
          "type": "int"
        },
        "parameters": [
          {
            "name": "x",
            "datatype": {
              "type": "TomlArray"
            }
          }
        ],
        "annotations": [
          {
            "name": "@native",
            "argument": ""
          }
        ]
      },
      {
        "name": "bool_at",
        "comment": "Get bool from array at location or false",
        "return_type": {
          "type": "bool"
        },
        "parameters": [
          {
            "name": "x",
            "datatype": {
              "type": "TomlArray"
            }
          },
          {
            "name": "pos",
            "datatype": {
              "type": "int"
            }
          }
        ],
        "annotations": [
          {
            "name": "@native",
            "argument": ""
          }
        ]
      },
      {
        "name": "bool_at_default",
        "comment": "Get bool from array at location or given default",
        "return_type": {
          "type": "bool"
        },
        "parameters": [
          {
            "name": "x",
            "datatype": {
              "type": "TomlArray"
            }
          },
          {
            "name": "pos",
            "datatype": {
              "type": "int"
            }
          },
          {
            "name": "default",
            "datatype": {
              "type": "bool"
            }
          }
        ],
        "annotations": [
          {
            "name": "@native",
            "argument": ""
          }
        ]
      },
      {
        "name": "del_table",
        "comment": "Delete a table",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "x",
            "datatype": {
              "type": "Table"
            }
          }
        ],
        "annotations": [
          {
            "name": "@native",
            "argument": ""
          }
        ]
      },
      {
        "name": "from_str",
        "comment": "Parse to a TOML Table from given string",
        "return_type": {
          "type": "Table"
        },
        "parameters": [
          {
            "name": "x",
            "datatype": {
              "type": "str"
            }
          }
        ],
        "annotations": [
          {
            "name": "@native",
            "argument": ""
          }
        ]
      },
      {
        "name": "get_array",
        "comment": "Get any array from table object",
        "return_type": {
          "type": "TomlArray"
        },
        "parameters": [
          {
            "name": "x",
            "datatype": {
              "type": "Table"
            }
          },
          {
            "name": "name",
            "datatype": {
              "type": "str"
            }
          }
        ],
        "annotations": [
          {
            "name": "@native",
            "argument": ""
          }
        ]
      },
      {
        "name": "get_bool",
        "comment": "Get a bool from table or false if fails",
        "return_type": {
          "type": "bool"
        },
        "parameters": [
          {
            "name": "x",
            "datatype": {
              "type": "Table"
            }
          },
          {
            "name": "name",
            "datatype": {
              "type": "str"
            }
          }
        ],
        "annotations": [
          {
            "name": "@native",
            "argument": ""
          }
        ]
      },
      {
        "name": "get_bool_default",
        "comment": "Get a bool from table or given default",
        "return_type": {
          "type": "bool"
        },
        "parameters": [
          {
            "name": "x",
            "datatype": {
              "type": "Table"
            }
          },
          {
            "name": "name",
            "datatype": {
              "type": "str"
            }
          },
          {
            "name": "default",
            "datatype": {
              "type": "bool"
            }
          }
        ],
        "annotations": [
          {
            "name": "@native",
            "argument": ""
          }
        ]
      },
      {
        "name": "get_int",
        "comment": "Get an int from table or 0 if fails",
        "return_type": {
          "type": "int"
        },
        "parameters": [
          {
            "name": "x",
            "datatype": {
              "type": "Table"
            }
          },
          {
            "name": "name",
            "datatype": {
              "type": "str"
            }
          }
        ],
        "annotations": [
          {
            "name": "@native",
            "argument": ""
          }
        ]
      },
      {
        "name": "get_int_default",
        "comment": "Get an int from table or given default",
        "return_type": {
          "type": "int"
        },
        "parameters": [
          {
            "name": "x",
            "datatype": {
              "type": "Table"
            }
          },
          {
            "name": "name",
            "datatype": {
              "type": "str"
            }
          },
          {
            "name": "default",
            "datatype": {
              "type": "int"
            }
          }
        ],
        "annotations": [
          {
            "name": "@native",
            "argument": ""
          }
        ]
      },
      {
        "name": "get_string",
        "comment": "Get a string from table or empty if fails",
        "return_type": {
          "type": "str"
        },
        "parameters": [
          {
            "name": "x",
            "datatype": {
              "type": "Table"
            }
          },
          {
            "name": "name",
            "datatype": {
              "type": "str"
            }
          }
        ],
        "annotations": [
          {
            "name": "@native",
            "argument": ""
          }
        ]
      },
      {
        "name": "get_string_array",
        "comment": "Get an array as native string array",
        "return_type": {
          "type": "Array",
          "arguments": [
            {
              "type": "str"
            }
          ]
        },
        "parameters": [
          {
            "name": "x",
            "datatype": {
              "type": "Table"
            }
          },
          {
            "name": "name",
            "datatype": {
              "type": "str"
            }
          }
        ],
        "annotations": []
      },
      {
        "name": "get_string_default",
        "comment": "Get a string from table or given default",
        "return_type": {
          "type": "str"
        },
        "parameters": [
          {
            "name": "x",
            "datatype": {
              "type": "Table"
            }
          },
          {
            "name": "name",
            "datatype": {
              "type": "str"
            }
          },
          {
            "name": "default",
            "datatype": {
              "type": "str"
            }
          }
        ],
        "annotations": [
          {
            "name": "@native",
            "argument": ""
          }
        ]
      },
      {
        "name": "get_table",
        "comment": "Get a Table from given name",
        "return_type": {
          "type": "Table"
        },
        "parameters": [
          {
            "name": "x",
            "datatype": {
              "type": "Table"
            }
          },
          {
            "name": "name",
            "datatype": {
              "type": "str"
            }
          }
        ],
        "annotations": [
          {
            "name": "@native",
            "argument": ""
          }
        ]
      },
      {
        "name": "int_at",
        "comment": "Get int from array at location or 0",
        "return_type": {
          "type": "int"
        },
        "parameters": [
          {
            "name": "x",
            "datatype": {
              "type": "TomlArray"
            }
          },
          {
            "name": "pos",
            "datatype": {
              "type": "int"
            }
          }
        ],
        "annotations": [
          {
            "name": "@native",
            "argument": ""
          }
        ]
      },
      {
        "name": "int_at_default",
        "comment": "Get int from array at locaiton or given default",
        "return_type": {
          "type": "int"
        },
        "parameters": [
          {
            "name": "x",
            "datatype": {
              "type": "TomlArray"
            }
          },
          {
            "name": "pos",
            "datatype": {
              "type": "int"
            }
          },
          {
            "name": "default",
            "datatype": {
              "type": "int"
            }
          }
        ],
        "annotations": [
          {
            "name": "@native",
            "argument": ""
          }
        ]
      },
      {
        "name": "string_at",
        "comment": "Get string from array at location or empty",
        "return_type": {
          "type": "str"
        },
        "parameters": [
          {
            "name": "x",
            "datatype": {
              "type": "TomlArray"
            }
          },
          {
            "name": "pos",
            "datatype": {
              "type": "int"
            }
          }
        ],
        "annotations": [
          {
            "name": "@native",
            "argument": ""
          }
        ]
      },
      {
        "name": "string_at_default",
        "comment": "Get string from array at location or given default",
        "return_type": {
          "type": "str"
        },
        "parameters": [
          {
            "name": "x",
            "datatype": {
              "type": "TomlArray"
            }
          },
          {
            "name": "pos",
            "datatype": {
              "type": "int"
            }
          },
          {
            "name": "default",
            "datatype": {
              "type": "str"
            }
          }
        ],
        "annotations": [
          {
            "name": "@native",
            "argument": ""
          }
        ]
      },
      {
        "name": "valid_array",
        "comment": "Is this a valid array?",
        "return_type": {
          "type": "bool"
        },
        "parameters": [
          {
            "name": "x",
            "datatype": {
              "type": "TomlArray"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "valid_table",
        "comment": "Is this a valid table?",
        "return_type": {
          "type": "bool"
        },
        "parameters": [
          {
            "name": "x",
            "datatype": {
              "type": "Table"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      }
    ],
    "classes": [
      {
        "name": "Table",
        "comment": "TOML Table object\nThis is like a dictionary",
        "members": [],
        "annotations": [
          {
            "name": "@nativedefine",
            "argument": "toml_table_t*"
          }
        ]
      },
      {
        "name": "TomlArray",
        "comment": "Array of any type",
        "members": [],
        "annotations": [
          {
            "name": "@nativedefine",
            "argument": "toml_array_t*"
          }
        ]
      }
    ]
  },
  "libs.os.path": {
    "imports": [
      {
        "alias": "strings",
        "path": [
          "libs",
          "strings"
        ]
      },
      {
        "alias": "c",
        "path": [
          "libs",
          "c"
        ]
      }
    ],
    "global_consts": [],
    "functions": [
      {
        "name": "basename",
        "comment": "Get just the filename of given path",
        "return_type": {
          "type": "str"
        },
        "parameters": [
          {
            "name": "p",
            "datatype": {
              "type": "str"
            }
          }
        ],
        "annotations": []
      },
      {
        "name": "dirname",
        "comment": "Get dir name of given path",
        "return_type": {
          "type": "str"
        },
        "parameters": [
          {
            "name": "p",
            "datatype": {
              "type": "str"
            }
          }
        ],
        "annotations": []
      },
      {
        "name": "end_with_dot",
        "comment": "Does the given string end with slash?",
        "return_type": {
          "type": "bool"
        },
        "parameters": [
          {
            "name": "a",
            "datatype": {
              "type": "str"
            }
          }
        ],
        "annotations": []
      },
      {
        "name": "end_with_slash",
        "comment": "Does the given string end with slash?",
        "return_type": {
          "type": "bool"
        },
        "parameters": [
          {
            "name": "a",
            "datatype": {
              "type": "str"
            }
          }
        ],
        "annotations": []
      },
      {
        "name": "executable",
        "comment": "Is an executable?",
        "return_type": {
          "type": "bool"
        },
        "parameters": [
          {
            "name": "p",
            "datatype": {
              "type": "str"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativedefine",
            "argument": "yk__executable"
          }
        ]
      },
      {
        "name": "exists",
        "comment": "Does the file exist?",
        "return_type": {
          "type": "bool"
        },
        "parameters": [
          {
            "name": "p",
            "datatype": {
              "type": "str"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativedefine",
            "argument": "yk__exists"
          }
        ]
      },
      {
        "name": "forward_slash",
        "comment": "Are we using forward slash or not?\nSame as using libs.os.is_windows()",
        "return_type": {
          "type": "bool"
        },
        "parameters": [],
        "annotations": [
          {
            "name": "@native",
            "argument": ""
          }
        ]
      },
      {
        "name": "join",
        "comment": "Do a path join",
        "return_type": {
          "type": "str"
        },
        "parameters": [
          {
            "name": "a",
            "datatype": {
              "type": "str"
            }
          },
          {
            "name": "b",
            "datatype": {
              "type": "str"
            }
          }
        ],
        "annotations": []
      },
      {
        "name": "mkdir",
        "comment": "Create given folder. (Linux uses 0755 permissions)\nReturns True if successful",
        "return_type": {
          "type": "bool"
        },
        "parameters": [
          {
            "name": "p",
            "datatype": {
              "type": "str"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativedefine",
            "argument": "yk__mkdir"
          }
        ]
      },
      {
        "name": "readable",
        "comment": "Is a readable?",
        "return_type": {
          "type": "bool"
        },
        "parameters": [
          {
            "name": "p",
            "datatype": {
              "type": "str"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativedefine",
            "argument": "yk__readable"
          }
        ]
      },
      {
        "name": "remove_extension",
        "comment": "Remove extension",
        "return_type": {
          "type": "str"
        },
        "parameters": [
          {
            "name": "p",
            "datatype": {
              "type": "str"
            }
          }
        ],
        "annotations": []
      },
      {
        "name": "writable",
        "comment": "Is a writable?",
        "return_type": {
          "type": "bool"
        },
        "parameters": [
          {
            "name": "p",
            "datatype": {
              "type": "str"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativedefine",
            "argument": "yk__writable"
          }
        ]
      }
    ],
    "classes": []
  },
  "libs.strings.array": {
    "imports": [],
    "global_consts": [],
    "functions": [
      {
        "name": "del_str_array",
        "comment": "Delete a string array by deleting individual string objects and array itself",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "sa",
            "datatype": {
              "type": "Array",
              "arguments": [
                {
                  "type": "str"
                }
              ]
            }
          }
        ],
        "annotations": [
          {
            "name": "@native",
            "argument": ""
          }
        ]
      },
      {
        "name": "extend",
        "comment": "Copy all strings from b to a and return a",
        "return_type": {
          "type": "Array",
          "arguments": [
            {
              "type": "str"
            }
          ]
        },
        "parameters": [
          {
            "name": "a",
            "datatype": {
              "type": "Array",
              "arguments": [
                {
                  "type": "str"
                }
              ]
            }
          },
          {
            "name": "b",
            "datatype": {
              "type": "Array",
              "arguments": [
                {
                  "type": "str"
                }
              ]
            }
          }
        ],
        "annotations": [
          {
            "name": "@native",
            "argument": ""
          }
        ]
      },
      {
        "name": "join",
        "comment": "Join given string array with given separator and return a single string",
        "return_type": {
          "type": "str"
        },
        "parameters": [
          {
            "name": "values",
            "datatype": {
              "type": "Array",
              "arguments": [
                {
                  "type": "str"
                }
              ]
            }
          },
          {
            "name": "sep",
            "datatype": {
              "type": "str"
            }
          }
        ],
        "annotations": [
          {
            "name": "@native",
            "argument": ""
          }
        ]
      },
      {
        "name": "new",
        "comment": "Create new string array\nExample:\n\nimport libs.strings.array as sarr\nmy_array: Array[str] = sarr.new(4, \"A\", \"B\", \"C\", \"D\")",
        "return_type": {
          "type": "Array",
          "arguments": [
            {
              "type": "str"
            }
          ]
        },
        "parameters": [
          {
            "name": "count",
            "datatype": {
              "type": "int"
            }
          },
          {
            "name": "s",
            "datatype": {
              "type": "str"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativedefine",
            "argument": "yk__newsdsarray"
          },
          {
            "name": "@varargs",
            "argument": ""
          }
        ]
      },
      {
        "name": "prefix",
        "comment": "Mutate all strings in this array by prefixing with prefix_str",
        "return_type": {
          "type": "Array",
          "arguments": [
            {
              "type": "str"
            }
          ]
        },
        "parameters": [
          {
            "name": "sa",
            "datatype": {
              "type": "Array",
              "arguments": [
                {
                  "type": "str"
                }
              ]
            }
          },
          {
            "name": "prefix_str",
            "datatype": {
              "type": "str"
            }
          }
        ],
        "annotations": [
          {
            "name": "@native",
            "argument": ""
          }
        ]
      },
      {
        "name": "suffix",
        "comment": "Mutate all strings in this array by suffixing with suffix_str",
        "return_type": {
          "type": "Array",
          "arguments": [
            {
              "type": "str"
            }
          ]
        },
        "parameters": [
          {
            "name": "sa",
            "datatype": {
              "type": "Array",
              "arguments": [
                {
                  "type": "str"
                }
              ]
            }
          },
          {
            "name": "suffix_str",
            "datatype": {
              "type": "str"
            }
          }
        ],
        "annotations": [
          {
            "name": "@native",
            "argument": ""
          }
        ]
      }
    ],
    "classes": []
  },
  "libs.strings.buffer": {
    "imports": [],
    "global_consts": [],
    "functions": [
      {
        "name": "append",
        "comment": "Append a string to string buffer",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "buf",
            "datatype": {
              "type": "StringBuffer"
            }
          },
          {
            "name": "v",
            "datatype": {
              "type": "str"
            }
          }
        ],
        "annotations": [
          {
            "name": "@native",
            "argument": ""
          }
        ]
      },
      {
        "name": "del_buf",
        "comment": "Delete string buffer object",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "buf",
            "datatype": {
              "type": "StringBuffer"
            }
          }
        ],
        "annotations": [
          {
            "name": "@native",
            "argument": ""
          }
        ]
      },
      {
        "name": "join",
        "comment": "Join given values in array with provided seperator and append this to string",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "buf",
            "datatype": {
              "type": "StringBuffer"
            }
          },
          {
            "name": "values",
            "datatype": {
              "type": "Array",
              "arguments": [
                {
                  "type": "str"
                }
              ]
            }
          },
          {
            "name": "sep",
            "datatype": {
              "type": "str"
            }
          }
        ],
        "annotations": [
          {
            "name": "@native",
            "argument": ""
          }
        ]
      },
      {
        "name": "new",
        "comment": "Create a new empty string buffer",
        "return_type": {
          "type": "StringBuffer"
        },
        "parameters": [],
        "annotations": [
          {
            "name": "@native",
            "argument": ""
          }
        ]
      },
      {
        "name": "new_size",
        "comment": "Create a string buffer with capacity s",
        "return_type": {
          "type": "StringBuffer"
        },
        "parameters": [
          {
            "name": "s",
            "datatype": {
              "type": "int"
            }
          }
        ],
        "annotations": [
          {
            "name": "@native",
            "argument": ""
          }
        ]
      },
      {
        "name": "prepend",
        "comment": "Prepend a string to string buffer",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "buf",
            "datatype": {
              "type": "StringBuffer"
            }
          },
          {
            "name": "v",
            "datatype": {
              "type": "str"
            }
          }
        ],
        "annotations": [
          {
            "name": "@native",
            "argument": ""
          }
        ]
      },
      {
        "name": "to_str",
        "comment": "Get a new string out of string buffer",
        "return_type": {
          "type": "str"
        },
        "parameters": [
          {
            "name": "buf",
            "datatype": {
              "type": "StringBuffer"
            }
          }
        ],
        "annotations": [
          {
            "name": "@native",
            "argument": ""
          }
        ]
      }
    ],
    "classes": [
      {
        "name": "StringBuffer",
        "comment": "String buffer object",
        "members": [],
        "annotations": [
          {
            "name": "@nativedefine",
            "argument": "yk__sds*"
          }
        ]
      }
    ]
  },
  "raylib.gl": {
    "imports": [
      {
        "alias": "c",
        "path": [
          "libs",
          "c"
        ]
      },
      {
        "alias": "rl",
        "path": [
          "raylib"
        ]
      }
    ],
    "global_consts": [
      {
        "name": "OPENGL_11",
        "comment": "",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "OPENGL_21",
        "comment": "",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "OPENGL_33",
        "comment": "",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "OPENGL_43",
        "comment": "",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "OPENGL_ES_20",
        "comment": "",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "RL_ATTACHMENT_COLOR_CHANNEL0",
        "comment": "",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "RL_ATTACHMENT_COLOR_CHANNEL1",
        "comment": "",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "RL_ATTACHMENT_COLOR_CHANNEL2",
        "comment": "",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "RL_ATTACHMENT_COLOR_CHANNEL3",
        "comment": "",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "RL_ATTACHMENT_COLOR_CHANNEL4",
        "comment": "",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "RL_ATTACHMENT_COLOR_CHANNEL5",
        "comment": "",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "RL_ATTACHMENT_COLOR_CHANNEL6",
        "comment": "",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "RL_ATTACHMENT_COLOR_CHANNEL7",
        "comment": "",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "RL_ATTACHMENT_CUBEMAP_NEGATIVE_X",
        "comment": "",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "RL_ATTACHMENT_CUBEMAP_NEGATIVE_Y",
        "comment": "",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "RL_ATTACHMENT_CUBEMAP_NEGATIVE_Z",
        "comment": "",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "RL_ATTACHMENT_CUBEMAP_POSITIVE_X",
        "comment": "",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "RL_ATTACHMENT_CUBEMAP_POSITIVE_Y",
        "comment": "",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "RL_ATTACHMENT_CUBEMAP_POSITIVE_Z",
        "comment": "",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "RL_ATTACHMENT_DEPTH",
        "comment": "",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "RL_ATTACHMENT_RENDERBUFFER",
        "comment": "",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "RL_ATTACHMENT_STENCIL",
        "comment": "",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "RL_ATTACHMENT_TEXTURE2D",
        "comment": "",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "RL_BLEND_ADDITIVE",
        "comment": "Blend textures adding colors",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "RL_BLEND_ADD_COLORS",
        "comment": "Blend textures adding colors (alternative)",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "RL_BLEND_ALPHA",
        "comment": "Blend textures considering alpha (default)",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "RL_BLEND_ALPHA_PREMULTIPLY",
        "comment": "Blend premultiplied textures considering alpha",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "RL_BLEND_CUSTOM",
        "comment": "Blend textures using custom src/dst factors (use rlSetBlendFactors())",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "RL_BLEND_MULTIPLIED",
        "comment": "Blend textures multiplying colors",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "RL_BLEND_SUBTRACT_COLORS",
        "comment": "Blend textures subtracting colors (alternative)",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "RL_LOG_ALL",
        "comment": "Display all logs",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "RL_LOG_DEBUG",
        "comment": "Debug logging, used for internal debugging, it should be disabled on release builds",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "RL_LOG_ERROR",
        "comment": "Error logging, used on unrecoverable failures",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "RL_LOG_FATAL",
        "comment": "Fatal logging, used to abort program: exit(EXIT_FAILURE)",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "RL_LOG_INFO",
        "comment": "Info logging, used for program execution info",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "RL_LOG_NONE",
        "comment": "Disable logging",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "RL_LOG_TRACE",
        "comment": "Trace logging, intended for internal use only",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "RL_LOG_WARNING",
        "comment": "Warning logging, used on recoverable failures",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "RL_PIXELFORMAT_COMPRESSED_ASTC_4x4_RGBA",
        "comment": "8 bpp",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "RL_PIXELFORMAT_COMPRESSED_ASTC_8x8_RGBA",
        "comment": "2 bpp",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "RL_PIXELFORMAT_COMPRESSED_DXT1_RGB",
        "comment": "4 bpp (no alpha)",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "RL_PIXELFORMAT_COMPRESSED_DXT1_RGBA",
        "comment": "4 bpp (1 bit alpha)",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "RL_PIXELFORMAT_COMPRESSED_DXT3_RGBA",
        "comment": "8 bpp",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "RL_PIXELFORMAT_COMPRESSED_DXT5_RGBA",
        "comment": "8 bpp",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "RL_PIXELFORMAT_COMPRESSED_ETC1_RGB",
        "comment": "4 bpp",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "RL_PIXELFORMAT_COMPRESSED_ETC2_EAC_RGBA",
        "comment": "8 bpp",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "RL_PIXELFORMAT_COMPRESSED_ETC2_RGB",
        "comment": "4 bpp",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "RL_PIXELFORMAT_COMPRESSED_PVRT_RGB",
        "comment": "4 bpp",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "RL_PIXELFORMAT_COMPRESSED_PVRT_RGBA",
        "comment": "4 bpp",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "RL_PIXELFORMAT_UNCOMPRESSED_GRAYSCALE",
        "comment": "8 bit per pixel (no alpha)",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "RL_PIXELFORMAT_UNCOMPRESSED_GRAY_ALPHA",
        "comment": "8*2 bpp (2 channels)",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "RL_PIXELFORMAT_UNCOMPRESSED_R32",
        "comment": "32 bpp (1 channel - float)",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "RL_PIXELFORMAT_UNCOMPRESSED_R32G32B32",
        "comment": "32*3 bpp (3 channels - float)",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "RL_PIXELFORMAT_UNCOMPRESSED_R32G32B32A32",
        "comment": "32*4 bpp (4 channels - float)",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "RL_PIXELFORMAT_UNCOMPRESSED_R4G4B4A4",
        "comment": "16 bpp (4 bit alpha)",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "RL_PIXELFORMAT_UNCOMPRESSED_R5G5B5A1",
        "comment": "16 bpp (1 bit alpha)",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "RL_PIXELFORMAT_UNCOMPRESSED_R5G6B5",
        "comment": "16 bpp",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "RL_PIXELFORMAT_UNCOMPRESSED_R8G8B8",
        "comment": "24 bpp",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "RL_PIXELFORMAT_UNCOMPRESSED_R8G8B8A8",
        "comment": "32 bpp",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "RL_SHADER_ATTRIB_FLOAT",
        "comment": "Shader attribute type: float",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "RL_SHADER_ATTRIB_VEC2",
        "comment": "Shader attribute type: vec2 (2 float)",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "RL_SHADER_ATTRIB_VEC3",
        "comment": "Shader attribute type: vec3 (3 float)",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "RL_SHADER_ATTRIB_VEC4",
        "comment": "Shader attribute type: vec4 (4 float)",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "RL_SHADER_LOC_COLOR_AMBIENT",
        "comment": "Shader location: vector uniform: ambient color",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "RL_SHADER_LOC_COLOR_DIFFUSE",
        "comment": "Shader location: vector uniform: diffuse color",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "RL_SHADER_LOC_COLOR_SPECULAR",
        "comment": "Shader location: vector uniform: specular color",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "RL_SHADER_LOC_MAP_ALBEDO",
        "comment": "Shader location: sampler2d texture: albedo (same as: RL_SHADER_LOC_MAP_DIFFUSE)",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "RL_SHADER_LOC_MAP_BRDF",
        "comment": "Shader location: sampler2d texture: brdf",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "RL_SHADER_LOC_MAP_CUBEMAP",
        "comment": "Shader location: samplerCube texture: cubemap",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "RL_SHADER_LOC_MAP_EMISSION",
        "comment": "Shader location: sampler2d texture: emission",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "RL_SHADER_LOC_MAP_HEIGHT",
        "comment": "Shader location: sampler2d texture: height",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "RL_SHADER_LOC_MAP_IRRADIANCE",
        "comment": "Shader location: samplerCube texture: irradiance",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "RL_SHADER_LOC_MAP_METALNESS",
        "comment": "Shader location: sampler2d texture: metalness (same as: RL_SHADER_LOC_MAP_SPECULAR)",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "RL_SHADER_LOC_MAP_NORMAL",
        "comment": "Shader location: sampler2d texture: normal",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "RL_SHADER_LOC_MAP_OCCLUSION",
        "comment": "Shader location: sampler2d texture: occlusion",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "RL_SHADER_LOC_MAP_PREFILTER",
        "comment": "Shader location: samplerCube texture: prefilter",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "RL_SHADER_LOC_MAP_ROUGHNESS",
        "comment": "Shader location: sampler2d texture: roughness",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "RL_SHADER_LOC_MATRIX_MODEL",
        "comment": "Shader location: matrix uniform: model (transform)",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "RL_SHADER_LOC_MATRIX_MVP",
        "comment": "Shader location: matrix uniform: model-view-projection",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "RL_SHADER_LOC_MATRIX_NORMAL",
        "comment": "Shader location: matrix uniform: normal",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "RL_SHADER_LOC_MATRIX_PROJECTION",
        "comment": "Shader location: matrix uniform: projection",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "RL_SHADER_LOC_MATRIX_VIEW",
        "comment": "Shader location: matrix uniform: view (camera transform)",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "RL_SHADER_LOC_VECTOR_VIEW",
        "comment": "Shader location: vector uniform: view",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "RL_SHADER_LOC_VERTEX_COLOR",
        "comment": "Shader location: vertex attribute: color",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "RL_SHADER_LOC_VERTEX_NORMAL",
        "comment": "Shader location: vertex attribute: normal",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "RL_SHADER_LOC_VERTEX_POSITION",
        "comment": "Shader location: vertex attribute: position",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "RL_SHADER_LOC_VERTEX_TANGENT",
        "comment": "Shader location: vertex attribute: tangent",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "RL_SHADER_LOC_VERTEX_TEXCOORD01",
        "comment": "Shader location: vertex attribute: texcoord01",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "RL_SHADER_LOC_VERTEX_TEXCOORD02",
        "comment": "Shader location: vertex attribute: texcoord02",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "RL_SHADER_UNIFORM_FLOAT",
        "comment": "Shader uniform type: float",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "RL_SHADER_UNIFORM_INT",
        "comment": "Shader uniform type: int",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "RL_SHADER_UNIFORM_IVEC2",
        "comment": "Shader uniform type: ivec2 (2 int)",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "RL_SHADER_UNIFORM_IVEC3",
        "comment": "Shader uniform type: ivec3 (3 int)",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "RL_SHADER_UNIFORM_IVEC4",
        "comment": "Shader uniform type: ivec4 (4 int)",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "RL_SHADER_UNIFORM_SAMPLER2D",
        "comment": "Shader uniform type: sampler2d",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "RL_SHADER_UNIFORM_VEC2",
        "comment": "Shader uniform type: vec2 (2 float)",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "RL_SHADER_UNIFORM_VEC3",
        "comment": "Shader uniform type: vec3 (3 float)",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "RL_SHADER_UNIFORM_VEC4",
        "comment": "Shader uniform type: vec4 (4 float)",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "RL_TEXTURE_FILTER_ANISOTROPIC_16X",
        "comment": "Anisotropic filtering 16x",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "RL_TEXTURE_FILTER_ANISOTROPIC_4X",
        "comment": "Anisotropic filtering 4x",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "RL_TEXTURE_FILTER_ANISOTROPIC_8X",
        "comment": "Anisotropic filtering 8x",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "RL_TEXTURE_FILTER_BILINEAR",
        "comment": "Linear filtering",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "RL_TEXTURE_FILTER_POINT",
        "comment": "No filter, just pixel approximation",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "RL_TEXTURE_FILTER_TRILINEAR",
        "comment": "Trilinear filtering (linear with mipmaps)",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      }
    ],
    "functions": [
      {
        "name": "rl_active_draw_buffers",
        "comment": "Activate multiple draw color buffers",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "count",
            "datatype": {
              "type": "int"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "rl_active_texture_slot",
        "comment": "Select and active a texture slot",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "slot",
            "datatype": {
              "type": "int"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "rl_begin",
        "comment": "Initialize drawing mode (how to organize vertex)",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "mode",
            "datatype": {
              "type": "int"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "rl_bind_image_texture",
        "comment": "Bind image texture",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "id",
            "datatype": {
              "type": "u32"
            }
          },
          {
            "name": "index",
            "datatype": {
              "type": "u32"
            }
          },
          {
            "name": "format",
            "datatype": {
              "type": "u32"
            }
          },
          {
            "name": "readonly",
            "datatype": {
              "type": "int"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "rl_bind_shader_buffer",
        "comment": "Copy SSBO buffer data",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "id",
            "datatype": {
              "type": "u32"
            }
          },
          {
            "name": "index",
            "datatype": {
              "type": "u32"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "rl_check_errors",
        "comment": "Check and log OpenGL error codes",
        "return_type": {
          "type": "None"
        },
        "parameters": [],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "rl_check_render_batch_limit",
        "comment": "Check internal buffer overflow for a given number of vertex",
        "return_type": {
          "type": "bool"
        },
        "parameters": [
          {
            "name": "v_count",
            "datatype": {
              "type": "int"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "rl_clear_color",
        "comment": "Clear color buffer with color",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "r",
            "datatype": {
              "type": "int"
            }
          },
          {
            "name": "g",
            "datatype": {
              "type": "int"
            }
          },
          {
            "name": "b",
            "datatype": {
              "type": "int"
            }
          },
          {
            "name": "a",
            "datatype": {
              "type": "int"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "rl_clear_screen_buffers",
        "comment": "Clear used screen buffers (color and depth)",
        "return_type": {
          "type": "None"
        },
        "parameters": [],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "rl_color3f",
        "comment": "Define one vertex (color) - 3 float",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "x",
            "datatype": {
              "type": "float"
            }
          },
          {
            "name": "y",
            "datatype": {
              "type": "float"
            }
          },
          {
            "name": "z",
            "datatype": {
              "type": "float"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "rl_color4f",
        "comment": "Define one vertex (color) - 4 float",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "x",
            "datatype": {
              "type": "float"
            }
          },
          {
            "name": "y",
            "datatype": {
              "type": "float"
            }
          },
          {
            "name": "z",
            "datatype": {
              "type": "float"
            }
          },
          {
            "name": "w",
            "datatype": {
              "type": "float"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "rl_color4ub",
        "comment": "Define one vertex (color) - 4 byte",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "r",
            "datatype": {
              "type": "int"
            }
          },
          {
            "name": "g",
            "datatype": {
              "type": "int"
            }
          },
          {
            "name": "b",
            "datatype": {
              "type": "int"
            }
          },
          {
            "name": "a",
            "datatype": {
              "type": "int"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "rl_compile_shader",
        "comment": "Compile custom shader and return shader id (type: RL_VERTEX_SHADER, RL_FRAGMENT_SHADER, RL_COMPUTE_SHADER)",
        "return_type": {
          "type": "u32"
        },
        "parameters": [
          {
            "name": "shader_code",
            "datatype": {
              "type": "str"
            }
          },
          {
            "name": "type",
            "datatype": {
              "type": "int"
            }
          }
        ],
        "annotations": [
          {
            "name": "@native",
            "argument": ""
          }
        ]
      },
      {
        "name": "rl_compute_shader_dispatch",
        "comment": "Dispatch compute shader (equivalent to *draw* for graphics pilepine)",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "group_x",
            "datatype": {
              "type": "u32"
            }
          },
          {
            "name": "group_y",
            "datatype": {
              "type": "u32"
            }
          },
          {
            "name": "group_z",
            "datatype": {
              "type": "u32"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "rl_disable_backface_culling",
        "comment": "Disable backface culling",
        "return_type": {
          "type": "None"
        },
        "parameters": [],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "rl_disable_color_blend",
        "comment": "Disable color blending",
        "return_type": {
          "type": "None"
        },
        "parameters": [],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "rl_disable_depth_mask",
        "comment": "Disable depth write",
        "return_type": {
          "type": "None"
        },
        "parameters": [],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "rl_disable_depth_test",
        "comment": "Disable depth test",
        "return_type": {
          "type": "None"
        },
        "parameters": [],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "rl_disable_framebuffer",
        "comment": "Disable render texture (fbo), return to default framebuffer",
        "return_type": {
          "type": "None"
        },
        "parameters": [],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "rl_disable_scissor_test",
        "comment": "Disable scissor test",
        "return_type": {
          "type": "None"
        },
        "parameters": [],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "rl_disable_shader",
        "comment": "Disable shader program",
        "return_type": {
          "type": "None"
        },
        "parameters": [],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "rl_disable_smooth_lines",
        "comment": "Disable line aliasing",
        "return_type": {
          "type": "None"
        },
        "parameters": [],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "rl_disable_state_pointer",
        "comment": "Disable attribute state pointer",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "vertex_attrib_type",
            "datatype": {
              "type": "int"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "rl_disable_stereo_render",
        "comment": "Disable stereo rendering",
        "return_type": {
          "type": "None"
        },
        "parameters": [],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "rl_disable_texture",
        "comment": "Disable texture",
        "return_type": {
          "type": "None"
        },
        "parameters": [],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "rl_disable_texture_cubemap",
        "comment": "Disable texture cubemap",
        "return_type": {
          "type": "None"
        },
        "parameters": [],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "rl_disable_vertex_array",
        "comment": "Disable vertex array (VAO, if supported)",
        "return_type": {
          "type": "None"
        },
        "parameters": [],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "rl_disable_vertex_attribute",
        "comment": "Disable vertex attribute index",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "index",
            "datatype": {
              "type": "u32"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "rl_disable_vertex_buffer",
        "comment": "Disable vertex buffer (VBO)",
        "return_type": {
          "type": "None"
        },
        "parameters": [],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "rl_disable_vertex_buffer_element",
        "comment": "Disable vertex buffer element (VBO element)",
        "return_type": {
          "type": "None"
        },
        "parameters": [],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "rl_disable_wire_mode",
        "comment": "Disable wire mode",
        "return_type": {
          "type": "None"
        },
        "parameters": [],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "rl_draw_call",
        "comment": "Factory function for: rlDrawCall",
        "return_type": {
          "type": "rlDrawCall"
        },
        "parameters": [
          {
            "name": "mode",
            "datatype": {
              "type": "int"
            }
          },
          {
            "name": "vertex_count",
            "datatype": {
              "type": "int"
            }
          },
          {
            "name": "vertex_alignment",
            "datatype": {
              "type": "int"
            }
          },
          {
            "name": "texture_id",
            "datatype": {
              "type": "u32"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "rl_draw_render_batch",
        "comment": "Draw render batch data (Update->Draw->Reset)",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "batch",
            "datatype": {
              "type": "Ptr",
              "arguments": [
                {
                  "type": "rlRenderBatch",
                  "module": "raylib"
                }
              ]
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "rl_draw_render_batch_active",
        "comment": "Update and draw internal render batch",
        "return_type": {
          "type": "None"
        },
        "parameters": [],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "rl_draw_vertex_array",
        "comment": "",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "offset",
            "datatype": {
              "type": "int"
            }
          },
          {
            "name": "count",
            "datatype": {
              "type": "int"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "rl_draw_vertex_array_elements",
        "comment": "",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "offset",
            "datatype": {
              "type": "int"
            }
          },
          {
            "name": "count",
            "datatype": {
              "type": "int"
            }
          },
          {
            "name": "buffer",
            "datatype": {
              "type": "Const",
              "arguments": [
                {
                  "type": "VoidPtr",
                  "module": "libs.c"
                }
              ]
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "rl_draw_vertex_array_elements_instanced",
        "comment": "",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "offset",
            "datatype": {
              "type": "int"
            }
          },
          {
            "name": "count",
            "datatype": {
              "type": "int"
            }
          },
          {
            "name": "buffer",
            "datatype": {
              "type": "Const",
              "arguments": [
                {
                  "type": "VoidPtr",
                  "module": "libs.c"
                }
              ]
            }
          },
          {
            "name": "instances",
            "datatype": {
              "type": "int"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "rl_draw_vertex_array_instanced",
        "comment": "",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "offset",
            "datatype": {
              "type": "int"
            }
          },
          {
            "name": "count",
            "datatype": {
              "type": "int"
            }
          },
          {
            "name": "instances",
            "datatype": {
              "type": "int"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "rl_enable_backface_culling",
        "comment": "Enable backface culling",
        "return_type": {
          "type": "None"
        },
        "parameters": [],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "rl_enable_color_blend",
        "comment": "Enable color blending",
        "return_type": {
          "type": "None"
        },
        "parameters": [],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "rl_enable_depth_mask",
        "comment": "Enable depth write",
        "return_type": {
          "type": "None"
        },
        "parameters": [],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "rl_enable_depth_test",
        "comment": "Enable depth test",
        "return_type": {
          "type": "None"
        },
        "parameters": [],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "rl_enable_framebuffer",
        "comment": "Enable render texture (fbo)",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "id",
            "datatype": {
              "type": "u32"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "rl_enable_scissor_test",
        "comment": "Enable scissor test",
        "return_type": {
          "type": "None"
        },
        "parameters": [],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "rl_enable_shader",
        "comment": "Enable shader program",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "id",
            "datatype": {
              "type": "u32"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "rl_enable_smooth_lines",
        "comment": "Enable line aliasing",
        "return_type": {
          "type": "None"
        },
        "parameters": [],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "rl_enable_state_pointer",
        "comment": "Enable attribute state pointer",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "vertex_attrib_type",
            "datatype": {
              "type": "int"
            }
          },
          {
            "name": "buffer",
            "datatype": {
              "type": "VoidPtr",
              "module": "libs.c"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "rl_enable_stereo_render",
        "comment": "Enable stereo rendering",
        "return_type": {
          "type": "None"
        },
        "parameters": [],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "rl_enable_texture",
        "comment": "Enable texture",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "id",
            "datatype": {
              "type": "u32"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "rl_enable_texture_cubemap",
        "comment": "Enable texture cubemap",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "id",
            "datatype": {
              "type": "u32"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "rl_enable_vertex_array",
        "comment": "Enable vertex array (VAO, if supported)",
        "return_type": {
          "type": "bool"
        },
        "parameters": [
          {
            "name": "vao_id",
            "datatype": {
              "type": "u32"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "rl_enable_vertex_attribute",
        "comment": "Enable vertex attribute index",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "index",
            "datatype": {
              "type": "u32"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "rl_enable_vertex_buffer",
        "comment": "Enable vertex buffer (VBO)",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "id",
            "datatype": {
              "type": "u32"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "rl_enable_vertex_buffer_element",
        "comment": "Enable vertex buffer element (VBO element)",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "id",
            "datatype": {
              "type": "u32"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "rl_enable_wire_mode",
        "comment": "Enable wire mode",
        "return_type": {
          "type": "None"
        },
        "parameters": [],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "rl_end",
        "comment": "Finish vertex providing",
        "return_type": {
          "type": "None"
        },
        "parameters": [],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "rl_framebuffer_attach",
        "comment": "Attach texture/renderbuffer to a framebuffer",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "fbo_id",
            "datatype": {
              "type": "u32"
            }
          },
          {
            "name": "tex_id",
            "datatype": {
              "type": "u32"
            }
          },
          {
            "name": "attach_type",
            "datatype": {
              "type": "int"
            }
          },
          {
            "name": "tex_type",
            "datatype": {
              "type": "int"
            }
          },
          {
            "name": "mip_level",
            "datatype": {
              "type": "int"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "rl_framebuffer_complete",
        "comment": "Verify framebuffer is complete",
        "return_type": {
          "type": "bool"
        },
        "parameters": [
          {
            "name": "id",
            "datatype": {
              "type": "u32"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "rl_frustum",
        "comment": "",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "left",
            "datatype": {
              "type": "f64"
            }
          },
          {
            "name": "right",
            "datatype": {
              "type": "f64"
            }
          },
          {
            "name": "bottom",
            "datatype": {
              "type": "f64"
            }
          },
          {
            "name": "top",
            "datatype": {
              "type": "f64"
            }
          },
          {
            "name": "znear",
            "datatype": {
              "type": "f64"
            }
          },
          {
            "name": "zfar",
            "datatype": {
              "type": "f64"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "rl_gen_texture_mipmaps",
        "comment": "Generate mipmap data for selected texture",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "id",
            "datatype": {
              "type": "u32"
            }
          },
          {
            "name": "width",
            "datatype": {
              "type": "int"
            }
          },
          {
            "name": "height",
            "datatype": {
              "type": "int"
            }
          },
          {
            "name": "format",
            "datatype": {
              "type": "int"
            }
          },
          {
            "name": "mipmaps",
            "datatype": {
              "type": "Ptr",
              "arguments": [
                {
                  "type": "CInt",
                  "module": "libs.c"
                }
              ]
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "rl_get_framebuffer_height",
        "comment": "Get default framebuffer height",
        "return_type": {
          "type": "int"
        },
        "parameters": [],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "rl_get_framebuffer_width",
        "comment": "Get default framebuffer width",
        "return_type": {
          "type": "int"
        },
        "parameters": [],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "rl_get_gl_texture_formats",
        "comment": "Get OpenGL internal formats",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "format",
            "datatype": {
              "type": "int"
            }
          },
          {
            "name": "gl_internal_format",
            "datatype": {
              "type": "Ptr",
              "arguments": [
                {
                  "type": "CUInt",
                  "module": "libs.c"
                }
              ]
            }
          },
          {
            "name": "gl_format",
            "datatype": {
              "type": "Ptr",
              "arguments": [
                {
                  "type": "CUInt",
                  "module": "libs.c"
                }
              ]
            }
          },
          {
            "name": "gl_type",
            "datatype": {
              "type": "Ptr",
              "arguments": [
                {
                  "type": "CUInt",
                  "module": "libs.c"
                }
              ]
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "rl_get_line_width",
        "comment": "Get the line drawing width",
        "return_type": {
          "type": "float"
        },
        "parameters": [],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "rl_get_location_attrib",
        "comment": "Get shader location attribute",
        "return_type": {
          "type": "int"
        },
        "parameters": [
          {
            "name": "shader_id",
            "datatype": {
              "type": "u32"
            }
          },
          {
            "name": "attrib_name",
            "datatype": {
              "type": "str"
            }
          }
        ],
        "annotations": [
          {
            "name": "@native",
            "argument": ""
          }
        ]
      },
      {
        "name": "rl_get_location_uniform",
        "comment": "Get shader location uniform",
        "return_type": {
          "type": "int"
        },
        "parameters": [
          {
            "name": "shader_id",
            "datatype": {
              "type": "u32"
            }
          },
          {
            "name": "uniform_name",
            "datatype": {
              "type": "str"
            }
          }
        ],
        "annotations": [
          {
            "name": "@native",
            "argument": ""
          }
        ]
      },
      {
        "name": "rl_get_matrix_modelview",
        "comment": "Get internal modelview matrix",
        "return_type": {
          "type": "Matrix",
          "module": "raylib"
        },
        "parameters": [],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "rl_get_matrix_projection",
        "comment": "Get internal projection matrix",
        "return_type": {
          "type": "Matrix",
          "module": "raylib"
        },
        "parameters": [],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "rl_get_matrix_projection_stereo",
        "comment": "Get internal projection matrix for stereo render (selected eye)",
        "return_type": {
          "type": "Matrix",
          "module": "raylib"
        },
        "parameters": [
          {
            "name": "eye",
            "datatype": {
              "type": "int"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "rl_get_matrix_transform",
        "comment": "Get internal accumulated transform matrix",
        "return_type": {
          "type": "Matrix",
          "module": "raylib"
        },
        "parameters": [],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "rl_get_matrix_view_offset_stereo",
        "comment": "Get internal view offset matrix for stereo render (selected eye)",
        "return_type": {
          "type": "Matrix",
          "module": "raylib"
        },
        "parameters": [
          {
            "name": "eye",
            "datatype": {
              "type": "int"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "rl_get_pixel_format_name",
        "comment": "Get name string for pixel format",
        "return_type": {
          "type": "Const",
          "arguments": [
            {
              "type": "CStr",
              "module": "libs.c"
            }
          ]
        },
        "parameters": [
          {
            "name": "format",
            "datatype": {
              "type": "u32"
            }
          }
        ],
        "annotations": [
          {
            "name": "@native",
            "argument": ""
          }
        ]
      },
      {
        "name": "rl_get_shader_id_default",
        "comment": "Get default shader id",
        "return_type": {
          "type": "u32"
        },
        "parameters": [],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "rl_get_shader_locs_default",
        "comment": "Get default shader locations",
        "return_type": {
          "type": "Ptr",
          "arguments": [
            {
              "type": "CInt",
              "module": "libs.c"
            }
          ]
        },
        "parameters": [],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "rl_get_texture_id_default",
        "comment": "Get default texture id",
        "return_type": {
          "type": "u32"
        },
        "parameters": [],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "rl_get_version",
        "comment": "Get current OpenGL version",
        "return_type": {
          "type": "int"
        },
        "parameters": [],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "rl_is_stereo_render_enabled",
        "comment": "Check if stereo render is enabled",
        "return_type": {
          "type": "bool"
        },
        "parameters": [],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "rl_load_compute_shader_program",
        "comment": "Load compute shader program",
        "return_type": {
          "type": "u32"
        },
        "parameters": [
          {
            "name": "shader_id",
            "datatype": {
              "type": "u32"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "rl_load_draw_cube",
        "comment": "Load and draw a cube",
        "return_type": {
          "type": "None"
        },
        "parameters": [],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "rl_load_draw_quad",
        "comment": "Load and draw a quad",
        "return_type": {
          "type": "None"
        },
        "parameters": [],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "rl_load_extensions",
        "comment": "Load OpenGL extensions (loader function required)",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "loader",
            "datatype": {
              "type": "VoidPtr",
              "module": "libs.c"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "rl_load_framebuffer",
        "comment": "Load an empty framebuffer",
        "return_type": {
          "type": "u32"
        },
        "parameters": [
          {
            "name": "width",
            "datatype": {
              "type": "int"
            }
          },
          {
            "name": "height",
            "datatype": {
              "type": "int"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "rl_load_identity",
        "comment": "Reset current matrix to identity matrix",
        "return_type": {
          "type": "None"
        },
        "parameters": [],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "rl_load_render_batch",
        "comment": "Load a render batch system",
        "return_type": {
          "type": "rlRenderBatch",
          "module": "raylib"
        },
        "parameters": [
          {
            "name": "num_buffers",
            "datatype": {
              "type": "int"
            }
          },
          {
            "name": "buffer_elements",
            "datatype": {
              "type": "int"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "rl_load_shader_code",
        "comment": "Load shader from code strings",
        "return_type": {
          "type": "u32"
        },
        "parameters": [
          {
            "name": "vs_code",
            "datatype": {
              "type": "str"
            }
          },
          {
            "name": "fs_code",
            "datatype": {
              "type": "str"
            }
          }
        ],
        "annotations": [
          {
            "name": "@native",
            "argument": ""
          }
        ]
      },
      {
        "name": "rl_load_shader_program",
        "comment": "Load custom shader program",
        "return_type": {
          "type": "u32"
        },
        "parameters": [
          {
            "name": "v_shader_id",
            "datatype": {
              "type": "u32"
            }
          },
          {
            "name": "f_shader_id",
            "datatype": {
              "type": "u32"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "rl_load_texture",
        "comment": "Load texture in GPU",
        "return_type": {
          "type": "u32"
        },
        "parameters": [
          {
            "name": "data",
            "datatype": {
              "type": "Const",
              "arguments": [
                {
                  "type": "VoidPtr",
                  "module": "libs.c"
                }
              ]
            }
          },
          {
            "name": "width",
            "datatype": {
              "type": "int"
            }
          },
          {
            "name": "height",
            "datatype": {
              "type": "int"
            }
          },
          {
            "name": "format",
            "datatype": {
              "type": "int"
            }
          },
          {
            "name": "mipmap_count",
            "datatype": {
              "type": "int"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "rl_load_texture_cubemap",
        "comment": "Load texture cubemap",
        "return_type": {
          "type": "u32"
        },
        "parameters": [
          {
            "name": "data",
            "datatype": {
              "type": "Const",
              "arguments": [
                {
                  "type": "VoidPtr",
                  "module": "libs.c"
                }
              ]
            }
          },
          {
            "name": "size",
            "datatype": {
              "type": "int"
            }
          },
          {
            "name": "format",
            "datatype": {
              "type": "int"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "rl_load_texture_depth",
        "comment": "Load depth texture/renderbuffer (to be attached to fbo)",
        "return_type": {
          "type": "u32"
        },
        "parameters": [
          {
            "name": "width",
            "datatype": {
              "type": "int"
            }
          },
          {
            "name": "height",
            "datatype": {
              "type": "int"
            }
          },
          {
            "name": "use_render_buffer",
            "datatype": {
              "type": "bool"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "rl_load_vertex_array",
        "comment": "Load vertex array (vao) if supported",
        "return_type": {
          "type": "u32"
        },
        "parameters": [],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "rl_load_vertex_buffer",
        "comment": "Load a vertex buffer attribute",
        "return_type": {
          "type": "u32"
        },
        "parameters": [
          {
            "name": "buffer",
            "datatype": {
              "type": "Const",
              "arguments": [
                {
                  "type": "VoidPtr",
                  "module": "libs.c"
                }
              ]
            }
          },
          {
            "name": "size",
            "datatype": {
              "type": "int"
            }
          },
          {
            "name": "dynamic",
            "datatype": {
              "type": "bool"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "rl_load_vertex_buffer_element",
        "comment": "Load a new attributes element buffer",
        "return_type": {
          "type": "u32"
        },
        "parameters": [
          {
            "name": "buffer",
            "datatype": {
              "type": "Const",
              "arguments": [
                {
                  "type": "VoidPtr",
                  "module": "libs.c"
                }
              ]
            }
          },
          {
            "name": "size",
            "datatype": {
              "type": "int"
            }
          },
          {
            "name": "dynamic",
            "datatype": {
              "type": "bool"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "rl_matrix_mode",
        "comment": "Choose the current matrix to be transformed",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "mode",
            "datatype": {
              "type": "int"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "rl_mult_matrixf",
        "comment": "Multiply the current matrix by another matrix",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "matf",
            "datatype": {
              "type": "Ptr",
              "arguments": [
                {
                  "type": "CFloat",
                  "module": "libs.c"
                }
              ]
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "rl_normal3f",
        "comment": "Define one vertex (normal) - 3 float",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "x",
            "datatype": {
              "type": "float"
            }
          },
          {
            "name": "y",
            "datatype": {
              "type": "float"
            }
          },
          {
            "name": "z",
            "datatype": {
              "type": "float"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "rl_ortho",
        "comment": "",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "left",
            "datatype": {
              "type": "f64"
            }
          },
          {
            "name": "right",
            "datatype": {
              "type": "f64"
            }
          },
          {
            "name": "bottom",
            "datatype": {
              "type": "f64"
            }
          },
          {
            "name": "top",
            "datatype": {
              "type": "f64"
            }
          },
          {
            "name": "znear",
            "datatype": {
              "type": "f64"
            }
          },
          {
            "name": "zfar",
            "datatype": {
              "type": "f64"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "rl_pop_matrix",
        "comment": "Pop lattest inserted matrix from stack",
        "return_type": {
          "type": "None"
        },
        "parameters": [],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "rl_push_matrix",
        "comment": "Push the current matrix to stack",
        "return_type": {
          "type": "None"
        },
        "parameters": [],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "rl_read_screen_pixels",
        "comment": "Read screen pixel data (color buffer)",
        "return_type": {
          "type": "Ptr",
          "arguments": [
            {
              "type": "CUChar",
              "module": "libs.c"
            }
          ]
        },
        "parameters": [
          {
            "name": "width",
            "datatype": {
              "type": "int"
            }
          },
          {
            "name": "height",
            "datatype": {
              "type": "int"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "rl_read_texture_pixels",
        "comment": "Read texture pixel data",
        "return_type": {
          "type": "VoidPtr",
          "module": "libs.c"
        },
        "parameters": [
          {
            "name": "id",
            "datatype": {
              "type": "u32"
            }
          },
          {
            "name": "width",
            "datatype": {
              "type": "int"
            }
          },
          {
            "name": "height",
            "datatype": {
              "type": "int"
            }
          },
          {
            "name": "format",
            "datatype": {
              "type": "int"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "rl_render_batch",
        "comment": "Factory function for: rlRenderBatch",
        "return_type": {
          "type": "rlRenderBatch"
        },
        "parameters": [
          {
            "name": "buffer_count",
            "datatype": {
              "type": "int"
            }
          },
          {
            "name": "current_buffer",
            "datatype": {
              "type": "int"
            }
          },
          {
            "name": "vertex_buffer",
            "datatype": {
              "type": "Ptr",
              "arguments": [
                {
                  "type": "rlVertexBuffer",
                  "module": "raylib"
                }
              ]
            }
          },
          {
            "name": "draws",
            "datatype": {
              "type": "Ptr",
              "arguments": [
                {
                  "type": "rlDrawCall",
                  "module": "raylib"
                }
              ]
            }
          },
          {
            "name": "draw_counter",
            "datatype": {
              "type": "int"
            }
          },
          {
            "name": "current_depth",
            "datatype": {
              "type": "float"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "rl_rotatef",
        "comment": "Multiply the current matrix by a rotation matrix",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "angle",
            "datatype": {
              "type": "float"
            }
          },
          {
            "name": "x",
            "datatype": {
              "type": "float"
            }
          },
          {
            "name": "y",
            "datatype": {
              "type": "float"
            }
          },
          {
            "name": "z",
            "datatype": {
              "type": "float"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "rl_scalef",
        "comment": "Multiply the current matrix by a scaling matrix",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "x",
            "datatype": {
              "type": "float"
            }
          },
          {
            "name": "y",
            "datatype": {
              "type": "float"
            }
          },
          {
            "name": "z",
            "datatype": {
              "type": "float"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "rl_scissor",
        "comment": "Scissor test",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "x",
            "datatype": {
              "type": "int"
            }
          },
          {
            "name": "y",
            "datatype": {
              "type": "int"
            }
          },
          {
            "name": "width",
            "datatype": {
              "type": "int"
            }
          },
          {
            "name": "height",
            "datatype": {
              "type": "int"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "rl_set_blend_factors",
        "comment": "Set blending mode factor and equation (using OpenGL factors)",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "gl_src_factor",
            "datatype": {
              "type": "int"
            }
          },
          {
            "name": "gl_dst_factor",
            "datatype": {
              "type": "int"
            }
          },
          {
            "name": "gl_equation",
            "datatype": {
              "type": "int"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "rl_set_blend_mode",
        "comment": "Set blending mode",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "mode",
            "datatype": {
              "type": "int"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "rl_set_framebuffer_height",
        "comment": "Set current framebuffer height",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "height",
            "datatype": {
              "type": "int"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "rl_set_framebuffer_width",
        "comment": "Set current framebuffer width",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "width",
            "datatype": {
              "type": "int"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "rl_set_line_width",
        "comment": "Set the line drawing width",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "width",
            "datatype": {
              "type": "float"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "rl_set_matrix_modelview",
        "comment": "Set a custom modelview matrix (replaces internal modelview matrix)",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "view",
            "datatype": {
              "type": "Matrix",
              "module": "raylib"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "rl_set_matrix_projection",
        "comment": "Set a custom projection matrix (replaces internal projection matrix)",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "proj",
            "datatype": {
              "type": "Matrix",
              "module": "raylib"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "rl_set_matrix_projection_stereo",
        "comment": "Set eyes projection matrices for stereo rendering",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "right",
            "datatype": {
              "type": "Matrix",
              "module": "raylib"
            }
          },
          {
            "name": "left",
            "datatype": {
              "type": "Matrix",
              "module": "raylib"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "rl_set_matrix_view_offset_stereo",
        "comment": "Set eyes view offsets matrices for stereo rendering",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "right",
            "datatype": {
              "type": "Matrix",
              "module": "raylib"
            }
          },
          {
            "name": "left",
            "datatype": {
              "type": "Matrix",
              "module": "raylib"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "rl_set_render_batch_active",
        "comment": "Set the active render batch for rlgl (NULL for default internal)",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "batch",
            "datatype": {
              "type": "Ptr",
              "arguments": [
                {
                  "type": "rlRenderBatch",
                  "module": "raylib"
                }
              ]
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "rl_set_shader",
        "comment": "Set shader currently active (id and locations)",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "id",
            "datatype": {
              "type": "u32"
            }
          },
          {
            "name": "locs",
            "datatype": {
              "type": "Ptr",
              "arguments": [
                {
                  "type": "CInt",
                  "module": "libs.c"
                }
              ]
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "rl_set_texture",
        "comment": "Set current texture for render batch and check buffers limits",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "id",
            "datatype": {
              "type": "u32"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "rl_set_uniform",
        "comment": "Set shader value uniform",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "loc_index",
            "datatype": {
              "type": "int"
            }
          },
          {
            "name": "value",
            "datatype": {
              "type": "Const",
              "arguments": [
                {
                  "type": "VoidPtr",
                  "module": "libs.c"
                }
              ]
            }
          },
          {
            "name": "uniform_type",
            "datatype": {
              "type": "int"
            }
          },
          {
            "name": "count",
            "datatype": {
              "type": "int"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "rl_set_uniform_matrix",
        "comment": "Set shader value matrix",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "loc_index",
            "datatype": {
              "type": "int"
            }
          },
          {
            "name": "mat",
            "datatype": {
              "type": "Matrix",
              "module": "raylib"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "rl_set_uniform_sampler",
        "comment": "Set shader value sampler",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "loc_index",
            "datatype": {
              "type": "int"
            }
          },
          {
            "name": "texture_id",
            "datatype": {
              "type": "u32"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "rl_set_vertex_attribute",
        "comment": "",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "index",
            "datatype": {
              "type": "u32"
            }
          },
          {
            "name": "comp_size",
            "datatype": {
              "type": "int"
            }
          },
          {
            "name": "type",
            "datatype": {
              "type": "int"
            }
          },
          {
            "name": "normalized",
            "datatype": {
              "type": "bool"
            }
          },
          {
            "name": "stride",
            "datatype": {
              "type": "int"
            }
          },
          {
            "name": "pointer",
            "datatype": {
              "type": "Const",
              "arguments": [
                {
                  "type": "VoidPtr",
                  "module": "libs.c"
                }
              ]
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "rl_set_vertex_attribute_default",
        "comment": "Set vertex attribute default value",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "loc_index",
            "datatype": {
              "type": "int"
            }
          },
          {
            "name": "value",
            "datatype": {
              "type": "Const",
              "arguments": [
                {
                  "type": "VoidPtr",
                  "module": "libs.c"
                }
              ]
            }
          },
          {
            "name": "attrib_type",
            "datatype": {
              "type": "int"
            }
          },
          {
            "name": "count",
            "datatype": {
              "type": "int"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "rl_set_vertex_attribute_divisor",
        "comment": "",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "index",
            "datatype": {
              "type": "u32"
            }
          },
          {
            "name": "divisor",
            "datatype": {
              "type": "int"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "rl_tex_coord2f",
        "comment": "Define one vertex (texture coordinate) - 2 float",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "x",
            "datatype": {
              "type": "float"
            }
          },
          {
            "name": "y",
            "datatype": {
              "type": "float"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "rl_texture_parameters",
        "comment": "Set texture parameters (filter, wrap)",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "id",
            "datatype": {
              "type": "u32"
            }
          },
          {
            "name": "param",
            "datatype": {
              "type": "int"
            }
          },
          {
            "name": "value",
            "datatype": {
              "type": "int"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "rl_translatef",
        "comment": "Multiply the current matrix by a translation matrix",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "x",
            "datatype": {
              "type": "float"
            }
          },
          {
            "name": "y",
            "datatype": {
              "type": "float"
            }
          },
          {
            "name": "z",
            "datatype": {
              "type": "float"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "rl_unload_framebuffer",
        "comment": "Delete framebuffer from GPU",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "id",
            "datatype": {
              "type": "u32"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "rl_unload_render_batch",
        "comment": "Unload render batch system",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "batch",
            "datatype": {
              "type": "rlRenderBatch",
              "module": "raylib"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "rl_unload_shader_buffer",
        "comment": "Unload shader storage buffer object (SSBO)",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "ssbo_id",
            "datatype": {
              "type": "u32"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "rl_unload_shader_program",
        "comment": "Unload shader program",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "id",
            "datatype": {
              "type": "u32"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "rl_unload_texture",
        "comment": "Unload texture from GPU memory",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "id",
            "datatype": {
              "type": "u32"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "rl_unload_vertex_array",
        "comment": "",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "vao_id",
            "datatype": {
              "type": "u32"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "rl_unload_vertex_buffer",
        "comment": "",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "vbo_id",
            "datatype": {
              "type": "u32"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "rl_update_texture",
        "comment": "Update GPU texture with new data",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "id",
            "datatype": {
              "type": "u32"
            }
          },
          {
            "name": "offset_x",
            "datatype": {
              "type": "int"
            }
          },
          {
            "name": "offset_y",
            "datatype": {
              "type": "int"
            }
          },
          {
            "name": "width",
            "datatype": {
              "type": "int"
            }
          },
          {
            "name": "height",
            "datatype": {
              "type": "int"
            }
          },
          {
            "name": "format",
            "datatype": {
              "type": "int"
            }
          },
          {
            "name": "data",
            "datatype": {
              "type": "Const",
              "arguments": [
                {
                  "type": "VoidPtr",
                  "module": "libs.c"
                }
              ]
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "rl_update_vertex_buffer",
        "comment": "Update GPU buffer with new data",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "buffer_id",
            "datatype": {
              "type": "u32"
            }
          },
          {
            "name": "data",
            "datatype": {
              "type": "Const",
              "arguments": [
                {
                  "type": "VoidPtr",
                  "module": "libs.c"
                }
              ]
            }
          },
          {
            "name": "data_size",
            "datatype": {
              "type": "int"
            }
          },
          {
            "name": "offset",
            "datatype": {
              "type": "int"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "rl_update_vertex_buffer_elements",
        "comment": "Update vertex buffer elements with new data",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "id",
            "datatype": {
              "type": "u32"
            }
          },
          {
            "name": "data",
            "datatype": {
              "type": "Const",
              "arguments": [
                {
                  "type": "VoidPtr",
                  "module": "libs.c"
                }
              ]
            }
          },
          {
            "name": "data_size",
            "datatype": {
              "type": "int"
            }
          },
          {
            "name": "offset",
            "datatype": {
              "type": "int"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "rl_vertex2f",
        "comment": "Define one vertex (position) - 2 float",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "x",
            "datatype": {
              "type": "float"
            }
          },
          {
            "name": "y",
            "datatype": {
              "type": "float"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "rl_vertex2i",
        "comment": "Define one vertex (position) - 2 int",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "x",
            "datatype": {
              "type": "int"
            }
          },
          {
            "name": "y",
            "datatype": {
              "type": "int"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "rl_vertex3f",
        "comment": "Define one vertex (position) - 3 float",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "x",
            "datatype": {
              "type": "float"
            }
          },
          {
            "name": "y",
            "datatype": {
              "type": "float"
            }
          },
          {
            "name": "z",
            "datatype": {
              "type": "float"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "rl_viewport",
        "comment": "Set the viewport area",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "x",
            "datatype": {
              "type": "int"
            }
          },
          {
            "name": "y",
            "datatype": {
              "type": "int"
            }
          },
          {
            "name": "width",
            "datatype": {
              "type": "int"
            }
          },
          {
            "name": "height",
            "datatype": {
              "type": "int"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "rlgl_close",
        "comment": "De-inititialize rlgl (buffers, shaders, textures)",
        "return_type": {
          "type": "None"
        },
        "parameters": [],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "rlgl_init",
        "comment": "Initialize rlgl (buffers, shaders, textures, states)",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "width",
            "datatype": {
              "type": "int"
            }
          },
          {
            "name": "height",
            "datatype": {
              "type": "int"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      }
    ],
    "classes": [
      {
        "name": "rlDrawCall",
        "comment": "of those state-change happens (this is done in core module)",
        "members": [
          {
            "name": "mode",
            "datatype": {
              "type": "CInt",
              "module": "libs.c"
            }
          },
          {
            "name": "vertexCount",
            "datatype": {
              "type": "CInt",
              "module": "libs.c"
            }
          },
          {
            "name": "vertexAlignment",
            "datatype": {
              "type": "CInt",
              "module": "libs.c"
            }
          },
          {
            "name": "textureId",
            "datatype": {
              "type": "CUInt",
              "module": "libs.c"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativedefine",
            "argument": "rlDrawCall"
          }
        ]
      },
      {
        "name": "rlRenderBatch",
        "comment": "rlRenderBatch type",
        "members": [
          {
            "name": "bufferCount",
            "datatype": {
              "type": "CInt",
              "module": "libs.c"
            }
          },
          {
            "name": "currentBuffer",
            "datatype": {
              "type": "CInt",
              "module": "libs.c"
            }
          },
          {
            "name": "vertexBuffer",
            "datatype": {
              "type": "Ptr",
              "arguments": [
                {
                  "type": "rlVertexBuffer",
                  "module": "raylib"
                }
              ]
            }
          },
          {
            "name": "draws",
            "datatype": {
              "type": "Ptr",
              "arguments": [
                {
                  "type": "rlDrawCall",
                  "module": "raylib"
                }
              ]
            }
          },
          {
            "name": "drawCounter",
            "datatype": {
              "type": "CInt",
              "module": "libs.c"
            }
          },
          {
            "name": "currentDepth",
            "datatype": {
              "type": "float"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativedefine",
            "argument": "rlRenderBatch"
          }
        ]
      },
      {
        "name": "rlVertexBuffer",
        "comment": "Dynamic vertex buffers (position + texcoords + colors + indices arrays)",
        "members": [],
        "annotations": [
          {
            "name": "@nativedefine",
            "argument": "rlVertexBuffer"
          }
        ]
      },
      {
        "name": "rlglData",
        "comment": "",
        "members": [],
        "annotations": [
          {
            "name": "@nativedefine",
            "argument": "rlglData"
          }
        ]
      }
    ]
  },
  "raylib.gui": {
    "imports": [
      {
        "alias": "c",
        "path": [
          "libs",
          "c"
        ]
      },
      {
        "alias": "rl",
        "path": [
          "raylib"
        ]
      }
    ],
    "global_consts": [
      {
        "name": "ARROWS_SIZE",
        "comment": "",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "ARROWS_VISIBLE",
        "comment": "",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "ARROW_PADDING",
        "comment": "DropdownBox arrow separation from border and items",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "BACKGROUND_COLOR",
        "comment": "Background color",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "BASE_COLOR_DISABLED",
        "comment": "",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "BASE_COLOR_FOCUSED",
        "comment": "",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "BASE_COLOR_NORMAL",
        "comment": "",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "BASE_COLOR_PRESSED",
        "comment": "",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "BORDER_COLOR_DISABLED",
        "comment": "",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "BORDER_COLOR_FOCUSED",
        "comment": "",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "BORDER_COLOR_NORMAL",
        "comment": "",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "BORDER_COLOR_PRESSED",
        "comment": "",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "BORDER_WIDTH",
        "comment": "",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "BUTTON",
        "comment": "",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "CHECKBOX",
        "comment": "",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "CHECK_PADDING",
        "comment": "CheckBox internal check padding",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "COLORPICKER",
        "comment": "",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "COLOR_SELECTOR_SIZE",
        "comment": "",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "COMBOBOX",
        "comment": "",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "COMBO_BUTTON_SPACING",
        "comment": "ComboBox button separation",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "COMBO_BUTTON_WIDTH",
        "comment": "ComboBox right button width",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "DEFAULT",
        "comment": "",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "DROPDOWNBOX",
        "comment": "",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "DROPDOWN_ITEMS_SPACING",
        "comment": "DropdownBox items separation",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "GROUP_PADDING",
        "comment": "ToggleGroup separation between toggles",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "HUEBAR_PADDING",
        "comment": "ColorPicker right hue bar separation from panel",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "HUEBAR_SELECTOR_HEIGHT",
        "comment": "ColorPicker right hue bar selector height",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "HUEBAR_SELECTOR_OVERFLOW",
        "comment": "ColorPicker right hue bar selector overflow",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "HUEBAR_WIDTH",
        "comment": "ColorPicker right hue bar width",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "ICON_1UP",
        "comment": "",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "ICON_206",
        "comment": "",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "ICON_207",
        "comment": "",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "ICON_208",
        "comment": "",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "ICON_209",
        "comment": "",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "ICON_210",
        "comment": "",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "ICON_211",
        "comment": "",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "ICON_212",
        "comment": "",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "ICON_213",
        "comment": "",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "ICON_214",
        "comment": "",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "ICON_215",
        "comment": "",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "ICON_216",
        "comment": "",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "ICON_217",
        "comment": "",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "ICON_218",
        "comment": "",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "ICON_219",
        "comment": "",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "ICON_220",
        "comment": "",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "ICON_221",
        "comment": "",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "ICON_222",
        "comment": "",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "ICON_223",
        "comment": "",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "ICON_224",
        "comment": "",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "ICON_225",
        "comment": "",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "ICON_226",
        "comment": "",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "ICON_227",
        "comment": "",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "ICON_228",
        "comment": "",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "ICON_229",
        "comment": "",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "ICON_230",
        "comment": "",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "ICON_231",
        "comment": "",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "ICON_232",
        "comment": "",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "ICON_233",
        "comment": "",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "ICON_234",
        "comment": "",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "ICON_235",
        "comment": "",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "ICON_236",
        "comment": "",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "ICON_237",
        "comment": "",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "ICON_238",
        "comment": "",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "ICON_239",
        "comment": "",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "ICON_240",
        "comment": "",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "ICON_241",
        "comment": "",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "ICON_242",
        "comment": "",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "ICON_243",
        "comment": "",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "ICON_244",
        "comment": "",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "ICON_245",
        "comment": "",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "ICON_246",
        "comment": "",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "ICON_247",
        "comment": "",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "ICON_248",
        "comment": "",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "ICON_249",
        "comment": "",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "ICON_250",
        "comment": "",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "ICON_251",
        "comment": "",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "ICON_252",
        "comment": "",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "ICON_253",
        "comment": "",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "ICON_254",
        "comment": "",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "ICON_255",
        "comment": "",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "ICON_ALARM",
        "comment": "",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "ICON_ALPHA_CLEAR",
        "comment": "",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "ICON_ALPHA_MULTIPLY",
        "comment": "",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "ICON_ARROW_DOWN",
        "comment": "",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "ICON_ARROW_DOWN_FILL",
        "comment": "",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "ICON_ARROW_LEFT",
        "comment": "",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "ICON_ARROW_LEFT_FILL",
        "comment": "",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "ICON_ARROW_RIGHT",
        "comment": "",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "ICON_ARROW_RIGHT_FILL",
        "comment": "",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "ICON_ARROW_UP",
        "comment": "",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "ICON_ARROW_UP_FILL",
        "comment": "",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "ICON_AUDIO",
        "comment": "",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "ICON_BIN",
        "comment": "",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "ICON_BOX",
        "comment": "",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "ICON_BOX_BOTTOM",
        "comment": "",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "ICON_BOX_BOTTOM_LEFT",
        "comment": "",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "ICON_BOX_BOTTOM_RIGHT",
        "comment": "",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "ICON_BOX_CENTER",
        "comment": "",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "ICON_BOX_CIRCLE_MASK",
        "comment": "",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "ICON_BOX_CONCENTRIC",
        "comment": "",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "ICON_BOX_CORNERS_BIG",
        "comment": "",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "ICON_BOX_CORNERS_SMALL",
        "comment": "",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "ICON_BOX_DOTS_BIG",
        "comment": "",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "ICON_BOX_DOTS_SMALL",
        "comment": "",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "ICON_BOX_GRID",
        "comment": "",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "ICON_BOX_GRID_BIG",
        "comment": "",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "ICON_BOX_LEFT",
        "comment": "",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "ICON_BOX_MULTISIZE",
        "comment": "",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "ICON_BOX_RIGHT",
        "comment": "",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "ICON_BOX_TOP",
        "comment": "",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "ICON_BOX_TOP_LEFT",
        "comment": "",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "ICON_BOX_TOP_RIGHT",
        "comment": "",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "ICON_BRUSH_CLASSIC",
        "comment": "",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "ICON_BRUSH_PAINTER",
        "comment": "",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "ICON_CAMERA",
        "comment": "",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "ICON_CLOCK",
        "comment": "",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "ICON_COIN",
        "comment": "",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "ICON_COLOR_BUCKET",
        "comment": "",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "ICON_COLOR_PICKER",
        "comment": "",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "ICON_CORNER",
        "comment": "",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "ICON_CRACK",
        "comment": "",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "ICON_CRACK_POINTS",
        "comment": "",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "ICON_CROP",
        "comment": "",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "ICON_CROP_ALPHA",
        "comment": "",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "ICON_CROSS",
        "comment": "",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "ICON_CROSSLINE",
        "comment": "",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "ICON_CROSS_SMALL",
        "comment": "",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "ICON_CUBE",
        "comment": "",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "ICON_CUBE_FACE_BACK",
        "comment": "",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "ICON_CUBE_FACE_BOTTOM",
        "comment": "",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "ICON_CUBE_FACE_FRONT",
        "comment": "",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "ICON_CUBE_FACE_LEFT",
        "comment": "",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "ICON_CUBE_FACE_RIGHT",
        "comment": "",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "ICON_CUBE_FACE_TOP",
        "comment": "",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "ICON_CURSOR_CLASSIC",
        "comment": "",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "ICON_CURSOR_HAND",
        "comment": "",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "ICON_CURSOR_MOVE",
        "comment": "",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "ICON_CURSOR_MOVE_FILL",
        "comment": "",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "ICON_CURSOR_POINTER",
        "comment": "",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "ICON_CURSOR_SCALE",
        "comment": "",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "ICON_CURSOR_SCALE_FILL",
        "comment": "",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "ICON_CURSOR_SCALE_LEFT",
        "comment": "",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "ICON_CURSOR_SCALE_LEFT_FILL",
        "comment": "",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "ICON_CURSOR_SCALE_RIGHT",
        "comment": "",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "ICON_CURSOR_SCALE_RIGHT_FILL",
        "comment": "",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "ICON_DEMON",
        "comment": "",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "ICON_DITHERING",
        "comment": "",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "ICON_DOOR",
        "comment": "",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "ICON_EMPTYBOX",
        "comment": "",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "ICON_EMPTYBOX_SMALL",
        "comment": "",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "ICON_EXIT",
        "comment": "",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "ICON_EXPLOSION",
        "comment": "",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "ICON_EYE_OFF",
        "comment": "",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "ICON_EYE_ON",
        "comment": "",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "ICON_FILETYPE_ALPHA",
        "comment": "",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "ICON_FILETYPE_AUDIO",
        "comment": "",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "ICON_FILETYPE_BINARY",
        "comment": "",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "ICON_FILETYPE_HOME",
        "comment": "",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "ICON_FILETYPE_IMAGE",
        "comment": "",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "ICON_FILETYPE_INFO",
        "comment": "",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "ICON_FILETYPE_PLAY",
        "comment": "",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "ICON_FILETYPE_TEXT",
        "comment": "",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "ICON_FILETYPE_VIDEO",
        "comment": "",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "ICON_FILE_ADD",
        "comment": "",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "ICON_FILE_COPY",
        "comment": "",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "ICON_FILE_CUT",
        "comment": "",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "ICON_FILE_DELETE",
        "comment": "",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "ICON_FILE_EXPORT",
        "comment": "",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "ICON_FILE_NEW",
        "comment": "",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "ICON_FILE_OPEN",
        "comment": "",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "ICON_FILE_PASTE",
        "comment": "",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "ICON_FILE_SAVE",
        "comment": "",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "ICON_FILE_SAVE_CLASSIC",
        "comment": "",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "ICON_FILTER",
        "comment": "",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "ICON_FILTER_BILINEAR",
        "comment": "",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "ICON_FILTER_POINT",
        "comment": "",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "ICON_FILTER_TOP",
        "comment": "",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "ICON_FOLDER_ADD",
        "comment": "",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "ICON_FOLDER_FILE_OPEN",
        "comment": "",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "ICON_FOLDER_OPEN",
        "comment": "",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "ICON_FOLDER_SAVE",
        "comment": "",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "ICON_FOUR_BOXES",
        "comment": "",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "ICON_FX",
        "comment": "",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "ICON_GEAR",
        "comment": "",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "ICON_GEAR_BIG",
        "comment": "",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "ICON_GEAR_EX",
        "comment": "",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "ICON_GRID",
        "comment": "",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "ICON_GRID_FILL",
        "comment": "",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "ICON_HAND_POINTER",
        "comment": "",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "ICON_HEART",
        "comment": "",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "ICON_HELP",
        "comment": "",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "ICON_HEX",
        "comment": "",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "ICON_HIDPI",
        "comment": "",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "ICON_HOUSE",
        "comment": "",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "ICON_INFO",
        "comment": "",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "ICON_KEY",
        "comment": "",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "ICON_LASER",
        "comment": "",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "ICON_LAYERS",
        "comment": "",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "ICON_LAYERS_VISIBLE",
        "comment": "",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "ICON_LENS",
        "comment": "",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "ICON_LENS_BIG",
        "comment": "",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "ICON_LIFE_BARS",
        "comment": "",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "ICON_LINK",
        "comment": "",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "ICON_LINK_BOXES",
        "comment": "",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "ICON_LINK_BROKE",
        "comment": "",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "ICON_LINK_MULTI",
        "comment": "",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "ICON_LINK_NET",
        "comment": "",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "ICON_LOCK_CLOSE",
        "comment": "",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "ICON_LOCK_OPEN",
        "comment": "",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "ICON_MAGNET",
        "comment": "",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "ICON_MAILBOX",
        "comment": "",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "ICON_MIPMAPS",
        "comment": "",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "ICON_MODE_2D",
        "comment": "",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "ICON_MODE_3D",
        "comment": "",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "ICON_MONITOR",
        "comment": "",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "ICON_MUTATE",
        "comment": "",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "ICON_MUTATE_FILL",
        "comment": "",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "ICON_NONE",
        "comment": "",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "ICON_NOTEBOOK",
        "comment": "",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "ICON_OK_TICK",
        "comment": "",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "ICON_PENCIL",
        "comment": "",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "ICON_PENCIL_BIG",
        "comment": "",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "ICON_PHOTO_CAMERA",
        "comment": "",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "ICON_PHOTO_CAMERA_FLASH",
        "comment": "",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "ICON_PLAYER",
        "comment": "",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "ICON_PLAYER_JUMP",
        "comment": "",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "ICON_PLAYER_NEXT",
        "comment": "",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "ICON_PLAYER_PAUSE",
        "comment": "",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "ICON_PLAYER_PLAY",
        "comment": "",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "ICON_PLAYER_PLAY_BACK",
        "comment": "",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "ICON_PLAYER_PREVIOUS",
        "comment": "",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "ICON_PLAYER_RECORD",
        "comment": "",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "ICON_PLAYER_STOP",
        "comment": "",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "ICON_POT",
        "comment": "",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "ICON_PRINTER",
        "comment": "",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "ICON_REDO",
        "comment": "",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "ICON_REDO_FILL",
        "comment": "",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "ICON_REPEAT",
        "comment": "",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "ICON_REPEAT_FILL",
        "comment": "",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "ICON_REREDO",
        "comment": "",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "ICON_REREDO_FILL",
        "comment": "",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "ICON_RESIZE",
        "comment": "",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "ICON_ROTATE",
        "comment": "",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "ICON_ROTATE_FILL",
        "comment": "",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "ICON_RUBBER",
        "comment": "",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "ICON_SCALE",
        "comment": "",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "ICON_SHIELD",
        "comment": "",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "ICON_SHUFFLE",
        "comment": "",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "ICON_SHUFFLE_FILL",
        "comment": "",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "ICON_SPECIAL",
        "comment": "",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "ICON_SQUARE_TOGGLE",
        "comment": "",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "ICON_STAR",
        "comment": "",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "ICON_SUITCASE",
        "comment": "",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "ICON_SUITCASE_ZIP",
        "comment": "",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "ICON_SYMMETRY",
        "comment": "",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "ICON_SYMMETRY_HORIZONTAL",
        "comment": "",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "ICON_SYMMETRY_VERTICAL",
        "comment": "",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "ICON_TARGET",
        "comment": "",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "ICON_TARGET_BIG",
        "comment": "",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "ICON_TARGET_BIG_FILL",
        "comment": "",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "ICON_TARGET_MOVE",
        "comment": "",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "ICON_TARGET_MOVE_FILL",
        "comment": "",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "ICON_TARGET_POINT",
        "comment": "",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "ICON_TARGET_SMALL",
        "comment": "",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "ICON_TARGET_SMALL_FILL",
        "comment": "",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "ICON_TEXT_A",
        "comment": "",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "ICON_TEXT_NOTES",
        "comment": "",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "ICON_TEXT_POPUP",
        "comment": "",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "ICON_TEXT_T",
        "comment": "",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "ICON_TOOLS",
        "comment": "",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "ICON_UNDO",
        "comment": "",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "ICON_UNDO_FILL",
        "comment": "",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "ICON_VERTICAL_BARS",
        "comment": "",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "ICON_VERTICAL_BARS_FILL",
        "comment": "",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "ICON_WATER_DROP",
        "comment": "",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "ICON_WAVE",
        "comment": "",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "ICON_WAVE_SINUS",
        "comment": "",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "ICON_WAVE_SQUARE",
        "comment": "",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "ICON_WAVE_TRIANGULAR",
        "comment": "",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "ICON_WINDOW",
        "comment": "",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "ICON_ZOOM_ALL",
        "comment": "",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "ICON_ZOOM_BIG",
        "comment": "",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "ICON_ZOOM_CENTER",
        "comment": "",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "ICON_ZOOM_MEDIUM",
        "comment": "",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "ICON_ZOOM_SMALL",
        "comment": "",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "LABEL",
        "comment": "Used also for: LABELBUTTON",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "LINE_COLOR",
        "comment": "Line control color",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "LISTVIEW",
        "comment": "",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "LIST_ITEMS_HEIGHT",
        "comment": "ListView items height",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "LIST_ITEMS_SPACING",
        "comment": "ListView items separation",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "PROGRESSBAR",
        "comment": "",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "PROGRESS_PADDING",
        "comment": "ProgressBar internal padding",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "RESERVED",
        "comment": "",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "SCROLLBAR",
        "comment": "",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "SCROLLBAR_SIDE",
        "comment": "ListView scrollbar side (0-left, 1-right)",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "SCROLLBAR_WIDTH",
        "comment": "ListView scrollbar size (usually width)",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "SCROLL_PADDING",
        "comment": "",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "SCROLL_SLIDER_PADDING",
        "comment": "(SLIDERBAR, SLIDER_PADDING)",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "SCROLL_SLIDER_SIZE",
        "comment": "",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "SCROLL_SPEED",
        "comment": "",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "SLIDER",
        "comment": "Used also for: SLIDERBAR",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "SLIDER_PADDING",
        "comment": "Slider/SliderBar internal bar padding",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "SLIDER_WIDTH",
        "comment": "Slider size of internal bar",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "SPINNER",
        "comment": "Uses: BUTTON, VALUEBOX",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "SPIN_BUTTON_SPACING",
        "comment": "Spinner buttons separation",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "SPIN_BUTTON_WIDTH",
        "comment": "Spinner left/right buttons width",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "STATE_DISABLED",
        "comment": "",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "STATE_FOCUSED",
        "comment": "",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "STATE_NORMAL",
        "comment": "",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "STATE_PRESSED",
        "comment": "",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "STATUSBAR",
        "comment": "",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "TEXTBOX",
        "comment": "Used also for: TEXTBOXMULTI",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "TEXT_ALIGNMENT",
        "comment": "",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "TEXT_ALIGN_CENTER",
        "comment": "",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "TEXT_ALIGN_LEFT",
        "comment": "",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "TEXT_ALIGN_RIGHT",
        "comment": "",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "TEXT_COLOR_DISABLED",
        "comment": "",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "TEXT_COLOR_FOCUSED",
        "comment": "",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "TEXT_COLOR_NORMAL",
        "comment": "",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "TEXT_COLOR_PRESSED",
        "comment": "",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "TEXT_INNER_PADDING",
        "comment": "TextBox/TextBoxMulti/ValueBox/Spinner inner text padding",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "TEXT_LINES_SPACING",
        "comment": "TextBoxMulti lines separation",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "TEXT_PADDING",
        "comment": "",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "TEXT_SIZE",
        "comment": "Text size (glyphs max height)",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "TEXT_SPACING",
        "comment": "Text spacing between glyphs",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "TOGGLE",
        "comment": "Used also for: TOGGLEGROUP",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "VALUEBOX",
        "comment": "",
        "datatype": {
          "type": "Const",
          "arguments": [
            {
              "type": "int"
            }
          ]
        }
      }
    ],
    "functions": [
      {
        "name": "gui_button",
        "comment": "Button control, returns true when clicked",
        "return_type": {
          "type": "bool"
        },
        "parameters": [
          {
            "name": "bounds",
            "datatype": {
              "type": "Rectangle",
              "module": "raylib"
            }
          },
          {
            "name": "text",
            "datatype": {
              "type": "str"
            }
          }
        ],
        "annotations": [
          {
            "name": "@native",
            "argument": ""
          }
        ]
      },
      {
        "name": "gui_check_box",
        "comment": "Check Box control, returns true when active",
        "return_type": {
          "type": "bool"
        },
        "parameters": [
          {
            "name": "bounds",
            "datatype": {
              "type": "Rectangle",
              "module": "raylib"
            }
          },
          {
            "name": "text",
            "datatype": {
              "type": "str"
            }
          },
          {
            "name": "checked",
            "datatype": {
              "type": "bool"
            }
          }
        ],
        "annotations": [
          {
            "name": "@native",
            "argument": ""
          }
        ]
      },
      {
        "name": "gui_check_icon_pixel",
        "comment": "Check icon pixel value",
        "return_type": {
          "type": "bool"
        },
        "parameters": [
          {
            "name": "icon_id",
            "datatype": {
              "type": "int"
            }
          },
          {
            "name": "x",
            "datatype": {
              "type": "int"
            }
          },
          {
            "name": "y",
            "datatype": {
              "type": "int"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "gui_clear_icon_pixel",
        "comment": "Clear icon pixel value",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "icon_id",
            "datatype": {
              "type": "int"
            }
          },
          {
            "name": "x",
            "datatype": {
              "type": "int"
            }
          },
          {
            "name": "y",
            "datatype": {
              "type": "int"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "gui_color_bar_alpha",
        "comment": "Color Bar Alpha control",
        "return_type": {
          "type": "float"
        },
        "parameters": [
          {
            "name": "bounds",
            "datatype": {
              "type": "Rectangle",
              "module": "raylib"
            }
          },
          {
            "name": "text",
            "datatype": {
              "type": "str"
            }
          },
          {
            "name": "alpha",
            "datatype": {
              "type": "float"
            }
          }
        ],
        "annotations": [
          {
            "name": "@native",
            "argument": ""
          }
        ]
      },
      {
        "name": "gui_color_bar_hue",
        "comment": "Color Bar Hue control",
        "return_type": {
          "type": "float"
        },
        "parameters": [
          {
            "name": "bounds",
            "datatype": {
              "type": "Rectangle",
              "module": "raylib"
            }
          },
          {
            "name": "text",
            "datatype": {
              "type": "str"
            }
          },
          {
            "name": "value",
            "datatype": {
              "type": "float"
            }
          }
        ],
        "annotations": [
          {
            "name": "@native",
            "argument": ""
          }
        ]
      },
      {
        "name": "gui_color_panel",
        "comment": "Color Panel control",
        "return_type": {
          "type": "Color",
          "module": "raylib"
        },
        "parameters": [
          {
            "name": "bounds",
            "datatype": {
              "type": "Rectangle",
              "module": "raylib"
            }
          },
          {
            "name": "text",
            "datatype": {
              "type": "str"
            }
          },
          {
            "name": "p_color",
            "datatype": {
              "type": "Color",
              "module": "raylib"
            }
          }
        ],
        "annotations": [
          {
            "name": "@native",
            "argument": ""
          }
        ]
      },
      {
        "name": "gui_color_picker",
        "comment": "Color Picker control (multiple color controls)",
        "return_type": {
          "type": "Color",
          "module": "raylib"
        },
        "parameters": [
          {
            "name": "bounds",
            "datatype": {
              "type": "Rectangle",
              "module": "raylib"
            }
          },
          {
            "name": "text",
            "datatype": {
              "type": "str"
            }
          },
          {
            "name": "p_color",
            "datatype": {
              "type": "Color",
              "module": "raylib"
            }
          }
        ],
        "annotations": [
          {
            "name": "@native",
            "argument": ""
          }
        ]
      },
      {
        "name": "gui_combo_box",
        "comment": "Combo Box control, returns selected item index",
        "return_type": {
          "type": "int"
        },
        "parameters": [
          {
            "name": "bounds",
            "datatype": {
              "type": "Rectangle",
              "module": "raylib"
            }
          },
          {
            "name": "text",
            "datatype": {
              "type": "str"
            }
          },
          {
            "name": "active",
            "datatype": {
              "type": "int"
            }
          }
        ],
        "annotations": [
          {
            "name": "@native",
            "argument": ""
          }
        ]
      },
      {
        "name": "gui_disable",
        "comment": "Disable gui controls (global state)",
        "return_type": {
          "type": "None"
        },
        "parameters": [],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "gui_draw_icon",
        "comment": "",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "icon_id",
            "datatype": {
              "type": "int"
            }
          },
          {
            "name": "pos_x",
            "datatype": {
              "type": "int"
            }
          },
          {
            "name": "pos_y",
            "datatype": {
              "type": "int"
            }
          },
          {
            "name": "pixel_size",
            "datatype": {
              "type": "int"
            }
          },
          {
            "name": "p_color",
            "datatype": {
              "type": "Color",
              "module": "raylib"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "gui_dropdown_box",
        "comment": "Dropdown Box control, returns selected item",
        "return_type": {
          "type": "bool"
        },
        "parameters": [
          {
            "name": "bounds",
            "datatype": {
              "type": "Rectangle",
              "module": "raylib"
            }
          },
          {
            "name": "text",
            "datatype": {
              "type": "str"
            }
          },
          {
            "name": "active",
            "datatype": {
              "type": "Ptr",
              "arguments": [
                {
                  "type": "CInt",
                  "module": "libs.c"
                }
              ]
            }
          },
          {
            "name": "edit_mode",
            "datatype": {
              "type": "bool"
            }
          }
        ],
        "annotations": [
          {
            "name": "@native",
            "argument": ""
          }
        ]
      },
      {
        "name": "gui_dummy_rec",
        "comment": "Dummy control for placeholders",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "bounds",
            "datatype": {
              "type": "Rectangle",
              "module": "raylib"
            }
          },
          {
            "name": "text",
            "datatype": {
              "type": "str"
            }
          }
        ],
        "annotations": [
          {
            "name": "@native",
            "argument": ""
          }
        ]
      },
      {
        "name": "gui_enable",
        "comment": "Enable gui controls (global state)",
        "return_type": {
          "type": "None"
        },
        "parameters": [],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "gui_fade",
        "comment": "Set gui controls alpha (global state), alpha goes from 0.0f to 1.0f",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "alpha",
            "datatype": {
              "type": "float"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "gui_get_font",
        "comment": "Get gui custom font (global state)",
        "return_type": {
          "type": "Font",
          "module": "raylib"
        },
        "parameters": [],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "gui_get_icon_data",
        "comment": "Get icon bit data",
        "return_type": {
          "type": "Ptr",
          "arguments": [
            {
              "type": "CUInt",
              "module": "libs.c"
            }
          ]
        },
        "parameters": [
          {
            "name": "icon_id",
            "datatype": {
              "type": "int"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "gui_get_icons",
        "comment": "Get full icons data pointer",
        "return_type": {
          "type": "Ptr",
          "arguments": [
            {
              "type": "CUInt",
              "module": "libs.c"
            }
          ]
        },
        "parameters": [],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "gui_get_state",
        "comment": "Get gui state (global state)",
        "return_type": {
          "type": "int"
        },
        "parameters": [],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "gui_get_style",
        "comment": "Get one style property",
        "return_type": {
          "type": "int"
        },
        "parameters": [
          {
            "name": "control",
            "datatype": {
              "type": "int"
            }
          },
          {
            "name": "property",
            "datatype": {
              "type": "int"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "gui_grid",
        "comment": "Grid control, returns mouse cell position",
        "return_type": {
          "type": "Vector2",
          "module": "raylib"
        },
        "parameters": [
          {
            "name": "bounds",
            "datatype": {
              "type": "Rectangle",
              "module": "raylib"
            }
          },
          {
            "name": "text",
            "datatype": {
              "type": "str"
            }
          },
          {
            "name": "spacing",
            "datatype": {
              "type": "float"
            }
          },
          {
            "name": "subdivs",
            "datatype": {
              "type": "int"
            }
          }
        ],
        "annotations": [
          {
            "name": "@native",
            "argument": ""
          }
        ]
      },
      {
        "name": "gui_group_box",
        "comment": "Group Box control with text name",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "bounds",
            "datatype": {
              "type": "Rectangle",
              "module": "raylib"
            }
          },
          {
            "name": "text",
            "datatype": {
              "type": "str"
            }
          }
        ],
        "annotations": [
          {
            "name": "@native",
            "argument": ""
          }
        ]
      },
      {
        "name": "gui_icon_text",
        "comment": "Get text with icon id prepended (if supported)",
        "return_type": {
          "type": "Const",
          "arguments": [
            {
              "type": "CStr",
              "module": "libs.c"
            }
          ]
        },
        "parameters": [
          {
            "name": "icon_id",
            "datatype": {
              "type": "int"
            }
          },
          {
            "name": "text",
            "datatype": {
              "type": "str"
            }
          }
        ],
        "annotations": [
          {
            "name": "@native",
            "argument": ""
          }
        ]
      },
      {
        "name": "gui_is_locked",
        "comment": "Check if gui is locked (global state)",
        "return_type": {
          "type": "bool"
        },
        "parameters": [],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "gui_label",
        "comment": "Label control, shows text",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "bounds",
            "datatype": {
              "type": "Rectangle",
              "module": "raylib"
            }
          },
          {
            "name": "text",
            "datatype": {
              "type": "str"
            }
          }
        ],
        "annotations": [
          {
            "name": "@native",
            "argument": ""
          }
        ]
      },
      {
        "name": "gui_label_button",
        "comment": "Label button control, show true when clicked",
        "return_type": {
          "type": "bool"
        },
        "parameters": [
          {
            "name": "bounds",
            "datatype": {
              "type": "Rectangle",
              "module": "raylib"
            }
          },
          {
            "name": "text",
            "datatype": {
              "type": "str"
            }
          }
        ],
        "annotations": [
          {
            "name": "@native",
            "argument": ""
          }
        ]
      },
      {
        "name": "gui_line",
        "comment": "Line separator control, could contain text",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "bounds",
            "datatype": {
              "type": "Rectangle",
              "module": "raylib"
            }
          },
          {
            "name": "text",
            "datatype": {
              "type": "str"
            }
          }
        ],
        "annotations": [
          {
            "name": "@native",
            "argument": ""
          }
        ]
      },
      {
        "name": "gui_list_view",
        "comment": "List View control, returns selected list item index",
        "return_type": {
          "type": "int"
        },
        "parameters": [
          {
            "name": "bounds",
            "datatype": {
              "type": "Rectangle",
              "module": "raylib"
            }
          },
          {
            "name": "text",
            "datatype": {
              "type": "str"
            }
          },
          {
            "name": "scroll_index",
            "datatype": {
              "type": "Ptr",
              "arguments": [
                {
                  "type": "CInt",
                  "module": "libs.c"
                }
              ]
            }
          },
          {
            "name": "active",
            "datatype": {
              "type": "int"
            }
          }
        ],
        "annotations": [
          {
            "name": "@native",
            "argument": ""
          }
        ]
      },
      {
        "name": "gui_list_view_ex",
        "comment": "List View with extended parameters",
        "return_type": {
          "type": "int"
        },
        "parameters": [
          {
            "name": "bounds",
            "datatype": {
              "type": "Rectangle",
              "module": "raylib"
            }
          },
          {
            "name": "text",
            "datatype": {
              "type": "Const",
              "arguments": [
                {
                  "type": "Ptr",
                  "arguments": [
                    {
                      "type": "Ptr",
                      "arguments": [
                        {
                          "type": "CChar",
                          "module": "libs.c"
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          },
          {
            "name": "count",
            "datatype": {
              "type": "int"
            }
          },
          {
            "name": "focus",
            "datatype": {
              "type": "Ptr",
              "arguments": [
                {
                  "type": "CInt",
                  "module": "libs.c"
                }
              ]
            }
          },
          {
            "name": "scroll_index",
            "datatype": {
              "type": "Ptr",
              "arguments": [
                {
                  "type": "CInt",
                  "module": "libs.c"
                }
              ]
            }
          },
          {
            "name": "active",
            "datatype": {
              "type": "int"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "gui_load_style",
        "comment": "Load style file over global style variable (.rgs)",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "file_name",
            "datatype": {
              "type": "str"
            }
          }
        ],
        "annotations": [
          {
            "name": "@native",
            "argument": ""
          }
        ]
      },
      {
        "name": "gui_load_style_default",
        "comment": "Load style default over global style",
        "return_type": {
          "type": "None"
        },
        "parameters": [],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "gui_lock",
        "comment": "Lock gui controls (global state)",
        "return_type": {
          "type": "None"
        },
        "parameters": [],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "gui_message_box",
        "comment": "Message Box control, displays a message",
        "return_type": {
          "type": "int"
        },
        "parameters": [
          {
            "name": "bounds",
            "datatype": {
              "type": "Rectangle",
              "module": "raylib"
            }
          },
          {
            "name": "title",
            "datatype": {
              "type": "str"
            }
          },
          {
            "name": "message",
            "datatype": {
              "type": "str"
            }
          },
          {
            "name": "buttons",
            "datatype": {
              "type": "str"
            }
          }
        ],
        "annotations": [
          {
            "name": "@native",
            "argument": ""
          }
        ]
      },
      {
        "name": "gui_panel",
        "comment": "Panel control, useful to group controls",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "bounds",
            "datatype": {
              "type": "Rectangle",
              "module": "raylib"
            }
          },
          {
            "name": "text",
            "datatype": {
              "type": "str"
            }
          }
        ],
        "annotations": [
          {
            "name": "@native",
            "argument": ""
          }
        ]
      },
      {
        "name": "gui_progress_bar",
        "comment": "Progress Bar control, shows current progress value",
        "return_type": {
          "type": "float"
        },
        "parameters": [
          {
            "name": "bounds",
            "datatype": {
              "type": "Rectangle",
              "module": "raylib"
            }
          },
          {
            "name": "text_left",
            "datatype": {
              "type": "str"
            }
          },
          {
            "name": "text_right",
            "datatype": {
              "type": "str"
            }
          },
          {
            "name": "value",
            "datatype": {
              "type": "float"
            }
          },
          {
            "name": "min_value",
            "datatype": {
              "type": "float"
            }
          },
          {
            "name": "max_value",
            "datatype": {
              "type": "float"
            }
          }
        ],
        "annotations": [
          {
            "name": "@native",
            "argument": ""
          }
        ]
      },
      {
        "name": "gui_scroll_panel",
        "comment": "Scroll Panel control",
        "return_type": {
          "type": "Rectangle",
          "module": "raylib"
        },
        "parameters": [
          {
            "name": "bounds",
            "datatype": {
              "type": "Rectangle",
              "module": "raylib"
            }
          },
          {
            "name": "text",
            "datatype": {
              "type": "str"
            }
          },
          {
            "name": "content",
            "datatype": {
              "type": "Rectangle",
              "module": "raylib"
            }
          },
          {
            "name": "scroll",
            "datatype": {
              "type": "Ptr",
              "arguments": [
                {
                  "type": "Vector2",
                  "module": "raylib"
                }
              ]
            }
          }
        ],
        "annotations": [
          {
            "name": "@native",
            "argument": ""
          }
        ]
      },
      {
        "name": "gui_set_font",
        "comment": "Set gui custom font (global state)",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "p_font",
            "datatype": {
              "type": "Font",
              "module": "raylib"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "gui_set_icon_data",
        "comment": "Set icon bit data",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "icon_id",
            "datatype": {
              "type": "int"
            }
          },
          {
            "name": "data",
            "datatype": {
              "type": "Ptr",
              "arguments": [
                {
                  "type": "CUInt",
                  "module": "libs.c"
                }
              ]
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "gui_set_icon_pixel",
        "comment": "Set icon pixel value",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "icon_id",
            "datatype": {
              "type": "int"
            }
          },
          {
            "name": "x",
            "datatype": {
              "type": "int"
            }
          },
          {
            "name": "y",
            "datatype": {
              "type": "int"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "gui_set_icon_scale",
        "comment": "Set icon scale (1 by default)",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "scale",
            "datatype": {
              "type": "u32"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "gui_set_state",
        "comment": "Set gui state (global state)",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "state",
            "datatype": {
              "type": "int"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "gui_set_style",
        "comment": "Set one style property",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "control",
            "datatype": {
              "type": "int"
            }
          },
          {
            "name": "property",
            "datatype": {
              "type": "int"
            }
          },
          {
            "name": "value",
            "datatype": {
              "type": "int"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "gui_slider",
        "comment": "Slider control, returns selected value",
        "return_type": {
          "type": "float"
        },
        "parameters": [
          {
            "name": "bounds",
            "datatype": {
              "type": "Rectangle",
              "module": "raylib"
            }
          },
          {
            "name": "text_left",
            "datatype": {
              "type": "str"
            }
          },
          {
            "name": "text_right",
            "datatype": {
              "type": "str"
            }
          },
          {
            "name": "value",
            "datatype": {
              "type": "float"
            }
          },
          {
            "name": "min_value",
            "datatype": {
              "type": "float"
            }
          },
          {
            "name": "max_value",
            "datatype": {
              "type": "float"
            }
          }
        ],
        "annotations": [
          {
            "name": "@native",
            "argument": ""
          }
        ]
      },
      {
        "name": "gui_slider_bar",
        "comment": "Slider Bar control, returns selected value",
        "return_type": {
          "type": "float"
        },
        "parameters": [
          {
            "name": "bounds",
            "datatype": {
              "type": "Rectangle",
              "module": "raylib"
            }
          },
          {
            "name": "text_left",
            "datatype": {
              "type": "str"
            }
          },
          {
            "name": "text_right",
            "datatype": {
              "type": "str"
            }
          },
          {
            "name": "value",
            "datatype": {
              "type": "float"
            }
          },
          {
            "name": "min_value",
            "datatype": {
              "type": "float"
            }
          },
          {
            "name": "max_value",
            "datatype": {
              "type": "float"
            }
          }
        ],
        "annotations": [
          {
            "name": "@native",
            "argument": ""
          }
        ]
      },
      {
        "name": "gui_spinner",
        "comment": "Spinner control, returns selected value",
        "return_type": {
          "type": "bool"
        },
        "parameters": [
          {
            "name": "bounds",
            "datatype": {
              "type": "Rectangle",
              "module": "raylib"
            }
          },
          {
            "name": "text",
            "datatype": {
              "type": "str"
            }
          },
          {
            "name": "value",
            "datatype": {
              "type": "Ptr",
              "arguments": [
                {
                  "type": "CInt",
                  "module": "libs.c"
                }
              ]
            }
          },
          {
            "name": "min_value",
            "datatype": {
              "type": "int"
            }
          },
          {
            "name": "max_value",
            "datatype": {
              "type": "int"
            }
          },
          {
            "name": "edit_mode",
            "datatype": {
              "type": "bool"
            }
          }
        ],
        "annotations": [
          {
            "name": "@native",
            "argument": ""
          }
        ]
      },
      {
        "name": "gui_status_bar",
        "comment": "Status Bar control, shows info text",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "bounds",
            "datatype": {
              "type": "Rectangle",
              "module": "raylib"
            }
          },
          {
            "name": "text",
            "datatype": {
              "type": "str"
            }
          }
        ],
        "annotations": [
          {
            "name": "@native",
            "argument": ""
          }
        ]
      },
      {
        "name": "gui_style_prop",
        "comment": "Factory function for: GuiStyleProp",
        "return_type": {
          "type": "GuiStyleProp"
        },
        "parameters": [
          {
            "name": "control_id",
            "datatype": {
              "type": "int"
            }
          },
          {
            "name": "property_id",
            "datatype": {
              "type": "int"
            }
          },
          {
            "name": "property_value",
            "datatype": {
              "type": "u32"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "gui_text_box",
        "comment": "Text Box control, updates input text",
        "return_type": {
          "type": "bool"
        },
        "parameters": [
          {
            "name": "bounds",
            "datatype": {
              "type": "Rectangle",
              "module": "raylib"
            }
          },
          {
            "name": "text",
            "datatype": {
              "type": "str"
            }
          },
          {
            "name": "text_size",
            "datatype": {
              "type": "int"
            }
          },
          {
            "name": "edit_mode",
            "datatype": {
              "type": "bool"
            }
          }
        ],
        "annotations": [
          {
            "name": "@native",
            "argument": ""
          }
        ]
      },
      {
        "name": "gui_text_box_multi",
        "comment": "Text Box control with multiple lines",
        "return_type": {
          "type": "bool"
        },
        "parameters": [
          {
            "name": "bounds",
            "datatype": {
              "type": "Rectangle",
              "module": "raylib"
            }
          },
          {
            "name": "text",
            "datatype": {
              "type": "str"
            }
          },
          {
            "name": "text_size",
            "datatype": {
              "type": "int"
            }
          },
          {
            "name": "edit_mode",
            "datatype": {
              "type": "bool"
            }
          }
        ],
        "annotations": [
          {
            "name": "@native",
            "argument": ""
          }
        ]
      },
      {
        "name": "gui_text_input_box",
        "comment": "Text Input Box control, ask for text, supports secret",
        "return_type": {
          "type": "int"
        },
        "parameters": [
          {
            "name": "bounds",
            "datatype": {
              "type": "Rectangle",
              "module": "raylib"
            }
          },
          {
            "name": "title",
            "datatype": {
              "type": "str"
            }
          },
          {
            "name": "message",
            "datatype": {
              "type": "str"
            }
          },
          {
            "name": "buttons",
            "datatype": {
              "type": "str"
            }
          },
          {
            "name": "text",
            "datatype": {
              "type": "str"
            }
          },
          {
            "name": "text_max_size",
            "datatype": {
              "type": "int"
            }
          },
          {
            "name": "secret_view_active",
            "datatype": {
              "type": "Ptr",
              "arguments": [
                {
                  "type": "CInt",
                  "module": "libs.c"
                }
              ]
            }
          }
        ],
        "annotations": [
          {
            "name": "@native",
            "argument": ""
          }
        ]
      },
      {
        "name": "gui_toggle",
        "comment": "Toggle Button control, returns true when active",
        "return_type": {
          "type": "bool"
        },
        "parameters": [
          {
            "name": "bounds",
            "datatype": {
              "type": "Rectangle",
              "module": "raylib"
            }
          },
          {
            "name": "text",
            "datatype": {
              "type": "str"
            }
          },
          {
            "name": "active",
            "datatype": {
              "type": "bool"
            }
          }
        ],
        "annotations": [
          {
            "name": "@native",
            "argument": ""
          }
        ]
      },
      {
        "name": "gui_toggle_group",
        "comment": "Toggle Group control, returns active toggle index",
        "return_type": {
          "type": "int"
        },
        "parameters": [
          {
            "name": "bounds",
            "datatype": {
              "type": "Rectangle",
              "module": "raylib"
            }
          },
          {
            "name": "text",
            "datatype": {
              "type": "str"
            }
          },
          {
            "name": "active",
            "datatype": {
              "type": "int"
            }
          }
        ],
        "annotations": [
          {
            "name": "@native",
            "argument": ""
          }
        ]
      },
      {
        "name": "gui_unlock",
        "comment": "Unlock gui controls (global state)",
        "return_type": {
          "type": "None"
        },
        "parameters": [],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "gui_value_box",
        "comment": "Value Box control, updates input text with numbers",
        "return_type": {
          "type": "bool"
        },
        "parameters": [
          {
            "name": "bounds",
            "datatype": {
              "type": "Rectangle",
              "module": "raylib"
            }
          },
          {
            "name": "text",
            "datatype": {
              "type": "str"
            }
          },
          {
            "name": "value",
            "datatype": {
              "type": "Ptr",
              "arguments": [
                {
                  "type": "CInt",
                  "module": "libs.c"
                }
              ]
            }
          },
          {
            "name": "min_value",
            "datatype": {
              "type": "int"
            }
          },
          {
            "name": "max_value",
            "datatype": {
              "type": "int"
            }
          },
          {
            "name": "edit_mode",
            "datatype": {
              "type": "bool"
            }
          }
        ],
        "annotations": [
          {
            "name": "@native",
            "argument": ""
          }
        ]
      },
      {
        "name": "gui_window_box",
        "comment": "Window Box control, shows a window that can be closed",
        "return_type": {
          "type": "bool"
        },
        "parameters": [
          {
            "name": "bounds",
            "datatype": {
              "type": "Rectangle",
              "module": "raylib"
            }
          },
          {
            "name": "title",
            "datatype": {
              "type": "str"
            }
          }
        ],
        "annotations": [
          {
            "name": "@native",
            "argument": ""
          }
        ]
      }
    ],
    "classes": [
      {
        "name": "GuiStyleProp",
        "comment": "Style property",
        "members": [
          {
            "name": "controlId",
            "datatype": {
              "type": "CUShort",
              "module": "libs.c"
            }
          },
          {
            "name": "propertyId",
            "datatype": {
              "type": "CUShort",
              "module": "libs.c"
            }
          },
          {
            "name": "propertyValue",
            "datatype": {
              "type": "CUInt",
              "module": "libs.c"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativedefine",
            "argument": "GuiStyleProp"
          }
        ]
      }
    ]
  },
  "raylib.math": {
    "imports": [
      {
        "alias": "c",
        "path": [
          "libs",
          "c"
        ]
      },
      {
        "alias": "rl",
        "path": [
          "raylib"
        ]
      }
    ],
    "global_consts": [],
    "functions": [
      {
        "name": "clamp",
        "comment": "",
        "return_type": {
          "type": "float"
        },
        "parameters": [
          {
            "name": "value",
            "datatype": {
              "type": "float"
            }
          },
          {
            "name": "min",
            "datatype": {
              "type": "float"
            }
          },
          {
            "name": "max",
            "datatype": {
              "type": "float"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "float_equals",
        "comment": "",
        "return_type": {
          "type": "int"
        },
        "parameters": [
          {
            "name": "x",
            "datatype": {
              "type": "float"
            }
          },
          {
            "name": "y",
            "datatype": {
              "type": "float"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "lerp",
        "comment": "",
        "return_type": {
          "type": "float"
        },
        "parameters": [
          {
            "name": "start",
            "datatype": {
              "type": "float"
            }
          },
          {
            "name": "end",
            "datatype": {
              "type": "float"
            }
          },
          {
            "name": "amount",
            "datatype": {
              "type": "float"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "matrix_add",
        "comment": "",
        "return_type": {
          "type": "Matrix",
          "module": "raylib"
        },
        "parameters": [
          {
            "name": "left",
            "datatype": {
              "type": "Matrix",
              "module": "raylib"
            }
          },
          {
            "name": "right",
            "datatype": {
              "type": "Matrix",
              "module": "raylib"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "matrix_determinant",
        "comment": "",
        "return_type": {
          "type": "float"
        },
        "parameters": [
          {
            "name": "mat",
            "datatype": {
              "type": "Matrix",
              "module": "raylib"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "matrix_frustum",
        "comment": "",
        "return_type": {
          "type": "Matrix",
          "module": "raylib"
        },
        "parameters": [
          {
            "name": "left",
            "datatype": {
              "type": "f64"
            }
          },
          {
            "name": "right",
            "datatype": {
              "type": "f64"
            }
          },
          {
            "name": "bottom",
            "datatype": {
              "type": "f64"
            }
          },
          {
            "name": "top",
            "datatype": {
              "type": "f64"
            }
          },
          {
            "name": "near",
            "datatype": {
              "type": "f64"
            }
          },
          {
            "name": "far",
            "datatype": {
              "type": "f64"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "matrix_identity",
        "comment": "",
        "return_type": {
          "type": "Matrix",
          "module": "raylib"
        },
        "parameters": [],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "matrix_invert",
        "comment": "",
        "return_type": {
          "type": "Matrix",
          "module": "raylib"
        },
        "parameters": [
          {
            "name": "mat",
            "datatype": {
              "type": "Matrix",
              "module": "raylib"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "matrix_look_at",
        "comment": "",
        "return_type": {
          "type": "Matrix",
          "module": "raylib"
        },
        "parameters": [
          {
            "name": "eye",
            "datatype": {
              "type": "Vector3",
              "module": "raylib"
            }
          },
          {
            "name": "target",
            "datatype": {
              "type": "Vector3",
              "module": "raylib"
            }
          },
          {
            "name": "up",
            "datatype": {
              "type": "Vector3",
              "module": "raylib"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "matrix_multiply",
        "comment": "",
        "return_type": {
          "type": "Matrix",
          "module": "raylib"
        },
        "parameters": [
          {
            "name": "left",
            "datatype": {
              "type": "Matrix",
              "module": "raylib"
            }
          },
          {
            "name": "right",
            "datatype": {
              "type": "Matrix",
              "module": "raylib"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "matrix_ortho",
        "comment": "",
        "return_type": {
          "type": "Matrix",
          "module": "raylib"
        },
        "parameters": [
          {
            "name": "left",
            "datatype": {
              "type": "f64"
            }
          },
          {
            "name": "right",
            "datatype": {
              "type": "f64"
            }
          },
          {
            "name": "bottom",
            "datatype": {
              "type": "f64"
            }
          },
          {
            "name": "top",
            "datatype": {
              "type": "f64"
            }
          },
          {
            "name": "near",
            "datatype": {
              "type": "f64"
            }
          },
          {
            "name": "far",
            "datatype": {
              "type": "f64"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "matrix_perspective",
        "comment": "",
        "return_type": {
          "type": "Matrix",
          "module": "raylib"
        },
        "parameters": [
          {
            "name": "fovy",
            "datatype": {
              "type": "f64"
            }
          },
          {
            "name": "aspect",
            "datatype": {
              "type": "f64"
            }
          },
          {
            "name": "near",
            "datatype": {
              "type": "f64"
            }
          },
          {
            "name": "far",
            "datatype": {
              "type": "f64"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "matrix_rotate",
        "comment": "",
        "return_type": {
          "type": "Matrix",
          "module": "raylib"
        },
        "parameters": [
          {
            "name": "axis",
            "datatype": {
              "type": "Vector3",
              "module": "raylib"
            }
          },
          {
            "name": "angle",
            "datatype": {
              "type": "float"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "matrix_rotate_x",
        "comment": "",
        "return_type": {
          "type": "Matrix",
          "module": "raylib"
        },
        "parameters": [
          {
            "name": "angle",
            "datatype": {
              "type": "float"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "matrix_rotate_xyz",
        "comment": "",
        "return_type": {
          "type": "Matrix",
          "module": "raylib"
        },
        "parameters": [
          {
            "name": "angle",
            "datatype": {
              "type": "Vector3",
              "module": "raylib"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "matrix_rotate_y",
        "comment": "",
        "return_type": {
          "type": "Matrix",
          "module": "raylib"
        },
        "parameters": [
          {
            "name": "angle",
            "datatype": {
              "type": "float"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "matrix_rotate_z",
        "comment": "",
        "return_type": {
          "type": "Matrix",
          "module": "raylib"
        },
        "parameters": [
          {
            "name": "angle",
            "datatype": {
              "type": "float"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "matrix_rotate_zyx",
        "comment": "",
        "return_type": {
          "type": "Matrix",
          "module": "raylib"
        },
        "parameters": [
          {
            "name": "angle",
            "datatype": {
              "type": "Vector3",
              "module": "raylib"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "matrix_scale",
        "comment": "",
        "return_type": {
          "type": "Matrix",
          "module": "raylib"
        },
        "parameters": [
          {
            "name": "x",
            "datatype": {
              "type": "float"
            }
          },
          {
            "name": "y",
            "datatype": {
              "type": "float"
            }
          },
          {
            "name": "z",
            "datatype": {
              "type": "float"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "matrix_subtract",
        "comment": "",
        "return_type": {
          "type": "Matrix",
          "module": "raylib"
        },
        "parameters": [
          {
            "name": "left",
            "datatype": {
              "type": "Matrix",
              "module": "raylib"
            }
          },
          {
            "name": "right",
            "datatype": {
              "type": "Matrix",
              "module": "raylib"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "matrix_to_float_v",
        "comment": "",
        "return_type": {
          "type": "float16",
          "module": "raylib"
        },
        "parameters": [
          {
            "name": "mat",
            "datatype": {
              "type": "Matrix",
              "module": "raylib"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "matrix_trace",
        "comment": "",
        "return_type": {
          "type": "float"
        },
        "parameters": [
          {
            "name": "mat",
            "datatype": {
              "type": "Matrix",
              "module": "raylib"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "matrix_translate",
        "comment": "",
        "return_type": {
          "type": "Matrix",
          "module": "raylib"
        },
        "parameters": [
          {
            "name": "x",
            "datatype": {
              "type": "float"
            }
          },
          {
            "name": "y",
            "datatype": {
              "type": "float"
            }
          },
          {
            "name": "z",
            "datatype": {
              "type": "float"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "matrix_transpose",
        "comment": "",
        "return_type": {
          "type": "Matrix",
          "module": "raylib"
        },
        "parameters": [
          {
            "name": "mat",
            "datatype": {
              "type": "Matrix",
              "module": "raylib"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "normalize",
        "comment": "",
        "return_type": {
          "type": "float"
        },
        "parameters": [
          {
            "name": "value",
            "datatype": {
              "type": "float"
            }
          },
          {
            "name": "start",
            "datatype": {
              "type": "float"
            }
          },
          {
            "name": "end",
            "datatype": {
              "type": "float"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "quaternion_add",
        "comment": "",
        "return_type": {
          "type": "Quaternion",
          "module": "raylib"
        },
        "parameters": [
          {
            "name": "q1",
            "datatype": {
              "type": "Quaternion",
              "module": "raylib"
            }
          },
          {
            "name": "q2",
            "datatype": {
              "type": "Quaternion",
              "module": "raylib"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "quaternion_add_value",
        "comment": "",
        "return_type": {
          "type": "Quaternion",
          "module": "raylib"
        },
        "parameters": [
          {
            "name": "q",
            "datatype": {
              "type": "Quaternion",
              "module": "raylib"
            }
          },
          {
            "name": "add",
            "datatype": {
              "type": "float"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "quaternion_divide",
        "comment": "",
        "return_type": {
          "type": "Quaternion",
          "module": "raylib"
        },
        "parameters": [
          {
            "name": "q1",
            "datatype": {
              "type": "Quaternion",
              "module": "raylib"
            }
          },
          {
            "name": "q2",
            "datatype": {
              "type": "Quaternion",
              "module": "raylib"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "quaternion_equals",
        "comment": "",
        "return_type": {
          "type": "int"
        },
        "parameters": [
          {
            "name": "p",
            "datatype": {
              "type": "Quaternion",
              "module": "raylib"
            }
          },
          {
            "name": "q",
            "datatype": {
              "type": "Quaternion",
              "module": "raylib"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "quaternion_from_axis_angle",
        "comment": "",
        "return_type": {
          "type": "Quaternion",
          "module": "raylib"
        },
        "parameters": [
          {
            "name": "axis",
            "datatype": {
              "type": "Vector3",
              "module": "raylib"
            }
          },
          {
            "name": "angle",
            "datatype": {
              "type": "float"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "quaternion_from_euler",
        "comment": "",
        "return_type": {
          "type": "Quaternion",
          "module": "raylib"
        },
        "parameters": [
          {
            "name": "pitch",
            "datatype": {
              "type": "float"
            }
          },
          {
            "name": "yaw",
            "datatype": {
              "type": "float"
            }
          },
          {
            "name": "roll",
            "datatype": {
              "type": "float"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "quaternion_from_matrix",
        "comment": "",
        "return_type": {
          "type": "Quaternion",
          "module": "raylib"
        },
        "parameters": [
          {
            "name": "mat",
            "datatype": {
              "type": "Matrix",
              "module": "raylib"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "quaternion_from_vector3_to_vector3",
        "comment": "",
        "return_type": {
          "type": "Quaternion",
          "module": "raylib"
        },
        "parameters": [
          {
            "name": "p_from",
            "datatype": {
              "type": "Vector3",
              "module": "raylib"
            }
          },
          {
            "name": "to",
            "datatype": {
              "type": "Vector3",
              "module": "raylib"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "quaternion_identity",
        "comment": "",
        "return_type": {
          "type": "Quaternion",
          "module": "raylib"
        },
        "parameters": [],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "quaternion_invert",
        "comment": "",
        "return_type": {
          "type": "Quaternion",
          "module": "raylib"
        },
        "parameters": [
          {
            "name": "q",
            "datatype": {
              "type": "Quaternion",
              "module": "raylib"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "quaternion_length",
        "comment": "",
        "return_type": {
          "type": "float"
        },
        "parameters": [
          {
            "name": "q",
            "datatype": {
              "type": "Quaternion",
              "module": "raylib"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "quaternion_lerp",
        "comment": "",
        "return_type": {
          "type": "Quaternion",
          "module": "raylib"
        },
        "parameters": [
          {
            "name": "q1",
            "datatype": {
              "type": "Quaternion",
              "module": "raylib"
            }
          },
          {
            "name": "q2",
            "datatype": {
              "type": "Quaternion",
              "module": "raylib"
            }
          },
          {
            "name": "amount",
            "datatype": {
              "type": "float"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "quaternion_multiply",
        "comment": "",
        "return_type": {
          "type": "Quaternion",
          "module": "raylib"
        },
        "parameters": [
          {
            "name": "q1",
            "datatype": {
              "type": "Quaternion",
              "module": "raylib"
            }
          },
          {
            "name": "q2",
            "datatype": {
              "type": "Quaternion",
              "module": "raylib"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "quaternion_nlerp",
        "comment": "",
        "return_type": {
          "type": "Quaternion",
          "module": "raylib"
        },
        "parameters": [
          {
            "name": "q1",
            "datatype": {
              "type": "Quaternion",
              "module": "raylib"
            }
          },
          {
            "name": "q2",
            "datatype": {
              "type": "Quaternion",
              "module": "raylib"
            }
          },
          {
            "name": "amount",
            "datatype": {
              "type": "float"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "quaternion_normalize",
        "comment": "",
        "return_type": {
          "type": "Quaternion",
          "module": "raylib"
        },
        "parameters": [
          {
            "name": "q",
            "datatype": {
              "type": "Quaternion",
              "module": "raylib"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "quaternion_scale",
        "comment": "",
        "return_type": {
          "type": "Quaternion",
          "module": "raylib"
        },
        "parameters": [
          {
            "name": "q",
            "datatype": {
              "type": "Quaternion",
              "module": "raylib"
            }
          },
          {
            "name": "mul",
            "datatype": {
              "type": "float"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "quaternion_slerp",
        "comment": "",
        "return_type": {
          "type": "Quaternion",
          "module": "raylib"
        },
        "parameters": [
          {
            "name": "q1",
            "datatype": {
              "type": "Quaternion",
              "module": "raylib"
            }
          },
          {
            "name": "q2",
            "datatype": {
              "type": "Quaternion",
              "module": "raylib"
            }
          },
          {
            "name": "amount",
            "datatype": {
              "type": "float"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "quaternion_subtract",
        "comment": "",
        "return_type": {
          "type": "Quaternion",
          "module": "raylib"
        },
        "parameters": [
          {
            "name": "q1",
            "datatype": {
              "type": "Quaternion",
              "module": "raylib"
            }
          },
          {
            "name": "q2",
            "datatype": {
              "type": "Quaternion",
              "module": "raylib"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "quaternion_subtract_value",
        "comment": "",
        "return_type": {
          "type": "Quaternion",
          "module": "raylib"
        },
        "parameters": [
          {
            "name": "q",
            "datatype": {
              "type": "Quaternion",
              "module": "raylib"
            }
          },
          {
            "name": "sub",
            "datatype": {
              "type": "float"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "quaternion_to_axis_angle",
        "comment": "",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "q",
            "datatype": {
              "type": "Quaternion",
              "module": "raylib"
            }
          },
          {
            "name": "out_axis",
            "datatype": {
              "type": "Ptr",
              "arguments": [
                {
                  "type": "Vector3",
                  "module": "raylib"
                }
              ]
            }
          },
          {
            "name": "out_angle",
            "datatype": {
              "type": "Ptr",
              "arguments": [
                {
                  "type": "CFloat",
                  "module": "libs.c"
                }
              ]
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "quaternion_to_euler",
        "comment": "",
        "return_type": {
          "type": "Vector3",
          "module": "raylib"
        },
        "parameters": [
          {
            "name": "q",
            "datatype": {
              "type": "Quaternion",
              "module": "raylib"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "quaternion_to_matrix",
        "comment": "",
        "return_type": {
          "type": "Matrix",
          "module": "raylib"
        },
        "parameters": [
          {
            "name": "q",
            "datatype": {
              "type": "Quaternion",
              "module": "raylib"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "quaternion_transform",
        "comment": "",
        "return_type": {
          "type": "Quaternion",
          "module": "raylib"
        },
        "parameters": [
          {
            "name": "q",
            "datatype": {
              "type": "Quaternion",
              "module": "raylib"
            }
          },
          {
            "name": "mat",
            "datatype": {
              "type": "Matrix",
              "module": "raylib"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "remap",
        "comment": "",
        "return_type": {
          "type": "float"
        },
        "parameters": [
          {
            "name": "value",
            "datatype": {
              "type": "float"
            }
          },
          {
            "name": "input_start",
            "datatype": {
              "type": "float"
            }
          },
          {
            "name": "input_end",
            "datatype": {
              "type": "float"
            }
          },
          {
            "name": "output_start",
            "datatype": {
              "type": "float"
            }
          },
          {
            "name": "output_end",
            "datatype": {
              "type": "float"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "vector2_add",
        "comment": "",
        "return_type": {
          "type": "Vector2",
          "module": "raylib"
        },
        "parameters": [
          {
            "name": "v1",
            "datatype": {
              "type": "Vector2",
              "module": "raylib"
            }
          },
          {
            "name": "v2",
            "datatype": {
              "type": "Vector2",
              "module": "raylib"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "vector2_add_value",
        "comment": "",
        "return_type": {
          "type": "Vector2",
          "module": "raylib"
        },
        "parameters": [
          {
            "name": "v",
            "datatype": {
              "type": "Vector2",
              "module": "raylib"
            }
          },
          {
            "name": "add",
            "datatype": {
              "type": "float"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "vector2_angle",
        "comment": "",
        "return_type": {
          "type": "float"
        },
        "parameters": [
          {
            "name": "v1",
            "datatype": {
              "type": "Vector2",
              "module": "raylib"
            }
          },
          {
            "name": "v2",
            "datatype": {
              "type": "Vector2",
              "module": "raylib"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "vector2_clamp",
        "comment": "",
        "return_type": {
          "type": "Vector2",
          "module": "raylib"
        },
        "parameters": [
          {
            "name": "v",
            "datatype": {
              "type": "Vector2",
              "module": "raylib"
            }
          },
          {
            "name": "min",
            "datatype": {
              "type": "Vector2",
              "module": "raylib"
            }
          },
          {
            "name": "max",
            "datatype": {
              "type": "Vector2",
              "module": "raylib"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "vector2_clamp_value",
        "comment": "",
        "return_type": {
          "type": "Vector2",
          "module": "raylib"
        },
        "parameters": [
          {
            "name": "v",
            "datatype": {
              "type": "Vector2",
              "module": "raylib"
            }
          },
          {
            "name": "min",
            "datatype": {
              "type": "float"
            }
          },
          {
            "name": "max",
            "datatype": {
              "type": "float"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "vector2_distance",
        "comment": "",
        "return_type": {
          "type": "float"
        },
        "parameters": [
          {
            "name": "v1",
            "datatype": {
              "type": "Vector2",
              "module": "raylib"
            }
          },
          {
            "name": "v2",
            "datatype": {
              "type": "Vector2",
              "module": "raylib"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "vector2_distance_sqr",
        "comment": "",
        "return_type": {
          "type": "float"
        },
        "parameters": [
          {
            "name": "v1",
            "datatype": {
              "type": "Vector2",
              "module": "raylib"
            }
          },
          {
            "name": "v2",
            "datatype": {
              "type": "Vector2",
              "module": "raylib"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "vector2_divide",
        "comment": "",
        "return_type": {
          "type": "Vector2",
          "module": "raylib"
        },
        "parameters": [
          {
            "name": "v1",
            "datatype": {
              "type": "Vector2",
              "module": "raylib"
            }
          },
          {
            "name": "v2",
            "datatype": {
              "type": "Vector2",
              "module": "raylib"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "vector2_dot_product",
        "comment": "",
        "return_type": {
          "type": "float"
        },
        "parameters": [
          {
            "name": "v1",
            "datatype": {
              "type": "Vector2",
              "module": "raylib"
            }
          },
          {
            "name": "v2",
            "datatype": {
              "type": "Vector2",
              "module": "raylib"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "vector2_equals",
        "comment": "",
        "return_type": {
          "type": "int"
        },
        "parameters": [
          {
            "name": "p",
            "datatype": {
              "type": "Vector2",
              "module": "raylib"
            }
          },
          {
            "name": "q",
            "datatype": {
              "type": "Vector2",
              "module": "raylib"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "vector2_invert",
        "comment": "",
        "return_type": {
          "type": "Vector2",
          "module": "raylib"
        },
        "parameters": [
          {
            "name": "v",
            "datatype": {
              "type": "Vector2",
              "module": "raylib"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "vector2_length",
        "comment": "",
        "return_type": {
          "type": "float"
        },
        "parameters": [
          {
            "name": "v",
            "datatype": {
              "type": "Vector2",
              "module": "raylib"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "vector2_length_sqr",
        "comment": "",
        "return_type": {
          "type": "float"
        },
        "parameters": [
          {
            "name": "v",
            "datatype": {
              "type": "Vector2",
              "module": "raylib"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "vector2_lerp",
        "comment": "",
        "return_type": {
          "type": "Vector2",
          "module": "raylib"
        },
        "parameters": [
          {
            "name": "v1",
            "datatype": {
              "type": "Vector2",
              "module": "raylib"
            }
          },
          {
            "name": "v2",
            "datatype": {
              "type": "Vector2",
              "module": "raylib"
            }
          },
          {
            "name": "amount",
            "datatype": {
              "type": "float"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "vector2_move_towards",
        "comment": "",
        "return_type": {
          "type": "Vector2",
          "module": "raylib"
        },
        "parameters": [
          {
            "name": "v",
            "datatype": {
              "type": "Vector2",
              "module": "raylib"
            }
          },
          {
            "name": "target",
            "datatype": {
              "type": "Vector2",
              "module": "raylib"
            }
          },
          {
            "name": "max_distance",
            "datatype": {
              "type": "float"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "vector2_multiply",
        "comment": "",
        "return_type": {
          "type": "Vector2",
          "module": "raylib"
        },
        "parameters": [
          {
            "name": "v1",
            "datatype": {
              "type": "Vector2",
              "module": "raylib"
            }
          },
          {
            "name": "v2",
            "datatype": {
              "type": "Vector2",
              "module": "raylib"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "vector2_negate",
        "comment": "",
        "return_type": {
          "type": "Vector2",
          "module": "raylib"
        },
        "parameters": [
          {
            "name": "v",
            "datatype": {
              "type": "Vector2",
              "module": "raylib"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "vector2_normalize",
        "comment": "",
        "return_type": {
          "type": "Vector2",
          "module": "raylib"
        },
        "parameters": [
          {
            "name": "v",
            "datatype": {
              "type": "Vector2",
              "module": "raylib"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "vector2_one",
        "comment": "",
        "return_type": {
          "type": "Vector2",
          "module": "raylib"
        },
        "parameters": [],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "vector2_reflect",
        "comment": "",
        "return_type": {
          "type": "Vector2",
          "module": "raylib"
        },
        "parameters": [
          {
            "name": "v",
            "datatype": {
              "type": "Vector2",
              "module": "raylib"
            }
          },
          {
            "name": "normal",
            "datatype": {
              "type": "Vector2",
              "module": "raylib"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "vector2_rotate",
        "comment": "",
        "return_type": {
          "type": "Vector2",
          "module": "raylib"
        },
        "parameters": [
          {
            "name": "v",
            "datatype": {
              "type": "Vector2",
              "module": "raylib"
            }
          },
          {
            "name": "angle",
            "datatype": {
              "type": "float"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "vector2_scale",
        "comment": "",
        "return_type": {
          "type": "Vector2",
          "module": "raylib"
        },
        "parameters": [
          {
            "name": "v",
            "datatype": {
              "type": "Vector2",
              "module": "raylib"
            }
          },
          {
            "name": "scale",
            "datatype": {
              "type": "float"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "vector2_subtract",
        "comment": "",
        "return_type": {
          "type": "Vector2",
          "module": "raylib"
        },
        "parameters": [
          {
            "name": "v1",
            "datatype": {
              "type": "Vector2",
              "module": "raylib"
            }
          },
          {
            "name": "v2",
            "datatype": {
              "type": "Vector2",
              "module": "raylib"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "vector2_subtract_value",
        "comment": "",
        "return_type": {
          "type": "Vector2",
          "module": "raylib"
        },
        "parameters": [
          {
            "name": "v",
            "datatype": {
              "type": "Vector2",
              "module": "raylib"
            }
          },
          {
            "name": "sub",
            "datatype": {
              "type": "float"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "vector2_transform",
        "comment": "",
        "return_type": {
          "type": "Vector2",
          "module": "raylib"
        },
        "parameters": [
          {
            "name": "v",
            "datatype": {
              "type": "Vector2",
              "module": "raylib"
            }
          },
          {
            "name": "mat",
            "datatype": {
              "type": "Matrix",
              "module": "raylib"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "vector2_zero",
        "comment": "",
        "return_type": {
          "type": "Vector2",
          "module": "raylib"
        },
        "parameters": [],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "vector3_add",
        "comment": "",
        "return_type": {
          "type": "Vector3",
          "module": "raylib"
        },
        "parameters": [
          {
            "name": "v1",
            "datatype": {
              "type": "Vector3",
              "module": "raylib"
            }
          },
          {
            "name": "v2",
            "datatype": {
              "type": "Vector3",
              "module": "raylib"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "vector3_add_value",
        "comment": "",
        "return_type": {
          "type": "Vector3",
          "module": "raylib"
        },
        "parameters": [
          {
            "name": "v",
            "datatype": {
              "type": "Vector3",
              "module": "raylib"
            }
          },
          {
            "name": "add",
            "datatype": {
              "type": "float"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "vector3_angle",
        "comment": "",
        "return_type": {
          "type": "float"
        },
        "parameters": [
          {
            "name": "v1",
            "datatype": {
              "type": "Vector3",
              "module": "raylib"
            }
          },
          {
            "name": "v2",
            "datatype": {
              "type": "Vector3",
              "module": "raylib"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "vector3_barycenter",
        "comment": "",
        "return_type": {
          "type": "Vector3",
          "module": "raylib"
        },
        "parameters": [
          {
            "name": "p",
            "datatype": {
              "type": "Vector3",
              "module": "raylib"
            }
          },
          {
            "name": "a",
            "datatype": {
              "type": "Vector3",
              "module": "raylib"
            }
          },
          {
            "name": "b",
            "datatype": {
              "type": "Vector3",
              "module": "raylib"
            }
          },
          {
            "name": "c",
            "datatype": {
              "type": "Vector3",
              "module": "raylib"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "vector3_clamp",
        "comment": "",
        "return_type": {
          "type": "Vector3",
          "module": "raylib"
        },
        "parameters": [
          {
            "name": "v",
            "datatype": {
              "type": "Vector3",
              "module": "raylib"
            }
          },
          {
            "name": "min",
            "datatype": {
              "type": "Vector3",
              "module": "raylib"
            }
          },
          {
            "name": "max",
            "datatype": {
              "type": "Vector3",
              "module": "raylib"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "vector3_clamp_value",
        "comment": "",
        "return_type": {
          "type": "Vector3",
          "module": "raylib"
        },
        "parameters": [
          {
            "name": "v",
            "datatype": {
              "type": "Vector3",
              "module": "raylib"
            }
          },
          {
            "name": "min",
            "datatype": {
              "type": "float"
            }
          },
          {
            "name": "max",
            "datatype": {
              "type": "float"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "vector3_cross_product",
        "comment": "",
        "return_type": {
          "type": "Vector3",
          "module": "raylib"
        },
        "parameters": [
          {
            "name": "v1",
            "datatype": {
              "type": "Vector3",
              "module": "raylib"
            }
          },
          {
            "name": "v2",
            "datatype": {
              "type": "Vector3",
              "module": "raylib"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "vector3_distance",
        "comment": "",
        "return_type": {
          "type": "float"
        },
        "parameters": [
          {
            "name": "v1",
            "datatype": {
              "type": "Vector3",
              "module": "raylib"
            }
          },
          {
            "name": "v2",
            "datatype": {
              "type": "Vector3",
              "module": "raylib"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "vector3_distance_sqr",
        "comment": "",
        "return_type": {
          "type": "float"
        },
        "parameters": [
          {
            "name": "v1",
            "datatype": {
              "type": "Vector3",
              "module": "raylib"
            }
          },
          {
            "name": "v2",
            "datatype": {
              "type": "Vector3",
              "module": "raylib"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "vector3_divide",
        "comment": "",
        "return_type": {
          "type": "Vector3",
          "module": "raylib"
        },
        "parameters": [
          {
            "name": "v1",
            "datatype": {
              "type": "Vector3",
              "module": "raylib"
            }
          },
          {
            "name": "v2",
            "datatype": {
              "type": "Vector3",
              "module": "raylib"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "vector3_dot_product",
        "comment": "",
        "return_type": {
          "type": "float"
        },
        "parameters": [
          {
            "name": "v1",
            "datatype": {
              "type": "Vector3",
              "module": "raylib"
            }
          },
          {
            "name": "v2",
            "datatype": {
              "type": "Vector3",
              "module": "raylib"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "vector3_equals",
        "comment": "",
        "return_type": {
          "type": "int"
        },
        "parameters": [
          {
            "name": "p",
            "datatype": {
              "type": "Vector3",
              "module": "raylib"
            }
          },
          {
            "name": "q",
            "datatype": {
              "type": "Vector3",
              "module": "raylib"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "vector3_invert",
        "comment": "",
        "return_type": {
          "type": "Vector3",
          "module": "raylib"
        },
        "parameters": [
          {
            "name": "v",
            "datatype": {
              "type": "Vector3",
              "module": "raylib"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "vector3_length",
        "comment": "",
        "return_type": {
          "type": "float"
        },
        "parameters": [
          {
            "name": "v",
            "datatype": {
              "type": "Const",
              "arguments": [
                {
                  "type": "Vector3",
                  "module": "raylib"
                }
              ]
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "vector3_length_sqr",
        "comment": "",
        "return_type": {
          "type": "float"
        },
        "parameters": [
          {
            "name": "v",
            "datatype": {
              "type": "Const",
              "arguments": [
                {
                  "type": "Vector3",
                  "module": "raylib"
                }
              ]
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "vector3_lerp",
        "comment": "",
        "return_type": {
          "type": "Vector3",
          "module": "raylib"
        },
        "parameters": [
          {
            "name": "v1",
            "datatype": {
              "type": "Vector3",
              "module": "raylib"
            }
          },
          {
            "name": "v2",
            "datatype": {
              "type": "Vector3",
              "module": "raylib"
            }
          },
          {
            "name": "amount",
            "datatype": {
              "type": "float"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "vector3_max",
        "comment": "",
        "return_type": {
          "type": "Vector3",
          "module": "raylib"
        },
        "parameters": [
          {
            "name": "v1",
            "datatype": {
              "type": "Vector3",
              "module": "raylib"
            }
          },
          {
            "name": "v2",
            "datatype": {
              "type": "Vector3",
              "module": "raylib"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "vector3_min",
        "comment": "",
        "return_type": {
          "type": "Vector3",
          "module": "raylib"
        },
        "parameters": [
          {
            "name": "v1",
            "datatype": {
              "type": "Vector3",
              "module": "raylib"
            }
          },
          {
            "name": "v2",
            "datatype": {
              "type": "Vector3",
              "module": "raylib"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "vector3_multiply",
        "comment": "",
        "return_type": {
          "type": "Vector3",
          "module": "raylib"
        },
        "parameters": [
          {
            "name": "v1",
            "datatype": {
              "type": "Vector3",
              "module": "raylib"
            }
          },
          {
            "name": "v2",
            "datatype": {
              "type": "Vector3",
              "module": "raylib"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "vector3_negate",
        "comment": "",
        "return_type": {
          "type": "Vector3",
          "module": "raylib"
        },
        "parameters": [
          {
            "name": "v",
            "datatype": {
              "type": "Vector3",
              "module": "raylib"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "vector3_normalize",
        "comment": "",
        "return_type": {
          "type": "Vector3",
          "module": "raylib"
        },
        "parameters": [
          {
            "name": "v",
            "datatype": {
              "type": "Vector3",
              "module": "raylib"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "vector3_one",
        "comment": "",
        "return_type": {
          "type": "Vector3",
          "module": "raylib"
        },
        "parameters": [],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "vector3_ortho_normalize",
        "comment": "",
        "return_type": {
          "type": "None"
        },
        "parameters": [
          {
            "name": "v1",
            "datatype": {
              "type": "Ptr",
              "arguments": [
                {
                  "type": "Vector3",
                  "module": "raylib"
                }
              ]
            }
          },
          {
            "name": "v2",
            "datatype": {
              "type": "Ptr",
              "arguments": [
                {
                  "type": "Vector3",
                  "module": "raylib"
                }
              ]
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "vector3_perpendicular",
        "comment": "",
        "return_type": {
          "type": "Vector3",
          "module": "raylib"
        },
        "parameters": [
          {
            "name": "v",
            "datatype": {
              "type": "Vector3",
              "module": "raylib"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "vector3_reflect",
        "comment": "",
        "return_type": {
          "type": "Vector3",
          "module": "raylib"
        },
        "parameters": [
          {
            "name": "v",
            "datatype": {
              "type": "Vector3",
              "module": "raylib"
            }
          },
          {
            "name": "normal",
            "datatype": {
              "type": "Vector3",
              "module": "raylib"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "vector3_refract",
        "comment": "",
        "return_type": {
          "type": "Vector3",
          "module": "raylib"
        },
        "parameters": [
          {
            "name": "v",
            "datatype": {
              "type": "Vector3",
              "module": "raylib"
            }
          },
          {
            "name": "n",
            "datatype": {
              "type": "Vector3",
              "module": "raylib"
            }
          },
          {
            "name": "r",
            "datatype": {
              "type": "float"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "vector3_rotate_by_axis_angle",
        "comment": "",
        "return_type": {
          "type": "Vector3",
          "module": "raylib"
        },
        "parameters": [
          {
            "name": "v",
            "datatype": {
              "type": "Vector3",
              "module": "raylib"
            }
          },
          {
            "name": "axis",
            "datatype": {
              "type": "Vector3",
              "module": "raylib"
            }
          },
          {
            "name": "angle",
            "datatype": {
              "type": "float"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "vector3_rotate_by_quaternion",
        "comment": "",
        "return_type": {
          "type": "Vector3",
          "module": "raylib"
        },
        "parameters": [
          {
            "name": "v",
            "datatype": {
              "type": "Vector3",
              "module": "raylib"
            }
          },
          {
            "name": "q",
            "datatype": {
              "type": "Quaternion",
              "module": "raylib"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "vector3_scale",
        "comment": "",
        "return_type": {
          "type": "Vector3",
          "module": "raylib"
        },
        "parameters": [
          {
            "name": "v",
            "datatype": {
              "type": "Vector3",
              "module": "raylib"
            }
          },
          {
            "name": "scalar",
            "datatype": {
              "type": "float"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "vector3_subtract",
        "comment": "",
        "return_type": {
          "type": "Vector3",
          "module": "raylib"
        },
        "parameters": [
          {
            "name": "v1",
            "datatype": {
              "type": "Vector3",
              "module": "raylib"
            }
          },
          {
            "name": "v2",
            "datatype": {
              "type": "Vector3",
              "module": "raylib"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "vector3_subtract_value",
        "comment": "",
        "return_type": {
          "type": "Vector3",
          "module": "raylib"
        },
        "parameters": [
          {
            "name": "v",
            "datatype": {
              "type": "Vector3",
              "module": "raylib"
            }
          },
          {
            "name": "sub",
            "datatype": {
              "type": "float"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "vector3_to_float_v",
        "comment": "",
        "return_type": {
          "type": "float3",
          "module": "raylib"
        },
        "parameters": [
          {
            "name": "v",
            "datatype": {
              "type": "Vector3",
              "module": "raylib"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "vector3_transform",
        "comment": "",
        "return_type": {
          "type": "Vector3",
          "module": "raylib"
        },
        "parameters": [
          {
            "name": "v",
            "datatype": {
              "type": "Vector3",
              "module": "raylib"
            }
          },
          {
            "name": "mat",
            "datatype": {
              "type": "Matrix",
              "module": "raylib"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "vector3_unproject",
        "comment": "",
        "return_type": {
          "type": "Vector3",
          "module": "raylib"
        },
        "parameters": [
          {
            "name": "source",
            "datatype": {
              "type": "Vector3",
              "module": "raylib"
            }
          },
          {
            "name": "projection",
            "datatype": {
              "type": "Matrix",
              "module": "raylib"
            }
          },
          {
            "name": "view",
            "datatype": {
              "type": "Matrix",
              "module": "raylib"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "vector3_zero",
        "comment": "",
        "return_type": {
          "type": "Vector3",
          "module": "raylib"
        },
        "parameters": [],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "wrap",
        "comment": "",
        "return_type": {
          "type": "float"
        },
        "parameters": [
          {
            "name": "value",
            "datatype": {
              "type": "float"
            }
          },
          {
            "name": "min",
            "datatype": {
              "type": "float"
            }
          },
          {
            "name": "max",
            "datatype": {
              "type": "float"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      }
    ],
    "classes": [
      {
        "name": "float16",
        "comment": "",
        "members": [],
        "annotations": [
          {
            "name": "@nativedefine",
            "argument": "float16"
          }
        ]
      },
      {
        "name": "float3",
        "comment": "NOTE: Helper types to be used instead of array return types for *ToFloat functions",
        "members": [],
        "annotations": [
          {
            "name": "@nativedefine",
            "argument": "float3"
          }
        ]
      }
    ]
  },
  "raylib.utils": {
    "imports": [
      {
        "alias": "rl",
        "path": [
          "raylib"
        ]
      }
    ],
    "global_consts": [],
    "functions": [
      {
        "name": "clear",
        "comment": "Clear background with RAYWHITE colour",
        "return_type": {
          "type": "None"
        },
        "parameters": [],
        "annotations": [
          {
            "name": "@native",
            "argument": ""
          }
        ]
      },
      {
        "name": "cos_deg",
        "comment": "",
        "return_type": {
          "type": "float"
        },
        "parameters": [
          {
            "name": "x",
            "datatype": {
              "type": "float"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "lerp_color",
        "comment": "",
        "return_type": {
          "type": "Color",
          "module": "raylib"
        },
        "parameters": [
          {
            "name": "a",
            "datatype": {
              "type": "Color",
              "module": "raylib"
            }
          },
          {
            "name": "b",
            "datatype": {
              "type": "Color",
              "module": "raylib"
            }
          },
          {
            "name": "fraction",
            "datatype": {
              "type": "float"
            }
          }
        ],
        "annotations": [
          {
            "name": "@native",
            "argument": ""
          }
        ]
      },
      {
        "name": "pi",
        "comment": "Get approximate PI value",
        "return_type": {
          "type": "float"
        },
        "parameters": [],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "remap",
        "comment": "Map x to be from 'a to b' range to 'c to d' range",
        "return_type": {
          "type": "float"
        },
        "parameters": [
          {
            "name": "x",
            "datatype": {
              "type": "float"
            }
          },
          {
            "name": "a",
            "datatype": {
              "type": "float"
            }
          },
          {
            "name": "b",
            "datatype": {
              "type": "float"
            }
          },
          {
            "name": "c",
            "datatype": {
              "type": "float"
            }
          },
          {
            "name": "d",
            "datatype": {
              "type": "float"
            }
          }
        ],
        "annotations": []
      },
      {
        "name": "sin_deg",
        "comment": "",
        "return_type": {
          "type": "float"
        },
        "parameters": [
          {
            "name": "x",
            "datatype": {
              "type": "float"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "tan_deg",
        "comment": "",
        "return_type": {
          "type": "float"
        },
        "parameters": [
          {
            "name": "x",
            "datatype": {
              "type": "float"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "todeg",
        "comment": "",
        "return_type": {
          "type": "float"
        },
        "parameters": [
          {
            "name": "radians",
            "datatype": {
              "type": "float"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      },
      {
        "name": "torad",
        "comment": "",
        "return_type": {
          "type": "float"
        },
        "parameters": [
          {
            "name": "degrees",
            "datatype": {
              "type": "float"
            }
          }
        ],
        "annotations": [
          {
            "name": "@nativemacro",
            "argument": ""
          }
        ]
      }
    ],
    "classes": []
  }
}